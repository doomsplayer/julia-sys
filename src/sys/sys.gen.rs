/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl <T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl <T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl <T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __IncompleteArrayField<T> { }
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 24;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const _STDLIB_H: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WSTOPPED: ::std::os::raw::c_uint = 2;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WCONTINUED: ::std::os::raw::c_uint = 8;
pub const WNOWAIT: ::std::os::raw::c_uint = 16777216;
pub const __WNOTHREAD: ::std::os::raw::c_uint = 536870912;
pub const __WALL: ::std::os::raw::c_uint = 1073741824;
pub const __WCLONE: ::std::os::raw::c_uint = 2147483648;
pub const __W_CONTINUED: ::std::os::raw::c_uint = 65535;
pub const __WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const __ldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\x00";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uint = 1;
pub const _ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _ASSERT_H: ::std::os::raw::c_uint = 1;
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const _MATH_H: ::std::os::raw::c_uint = 1;
pub const __GLIBC_USE_LIB_EXT2: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: ::std::os::raw::c_uint = 0;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: ::std::os::raw::c_uint = 1;
pub const _MATH_H_MATHDEF: ::std::os::raw::c_uint = 1;
pub const FP_ILOGB0: ::std::os::raw::c_int = -2147483648;
pub const FP_ILOGBNAN: ::std::os::raw::c_int = -2147483648;
pub const __MATH_DECLARING_DOUBLE: ::std::os::raw::c_uint = 1;
pub const __MATH_DECLARE_LDOUBLE: ::std::os::raw::c_uint = 1;
pub const MATH_ERRNO: ::std::os::raw::c_uint = 1;
pub const MATH_ERREXCEPT: ::std::os::raw::c_uint = 2;
pub const math_errhandling: ::std::os::raw::c_uint = 3;
pub const DOMAIN: ::std::os::raw::c_uint = 1;
pub const SING: ::std::os::raw::c_uint = 2;
pub const OVERFLOW: ::std::os::raw::c_uint = 3;
pub const UNDERFLOW: ::std::os::raw::c_uint = 4;
pub const TLOSS: ::std::os::raw::c_uint = 5;
pub const PLOSS: ::std::os::raw::c_uint = 6;
pub const M_E: f32 = 2.718281828459045;
pub const M_LOG2E: f32 = 1.4426950408889634;
pub const M_LOG10E: f32 = 0.4342944819032518;
pub const M_LN2: f32 = 0.6931471805599453;
pub const M_LN10: f32 = 2.302585092994046;
pub const M_PI: f32 = 3.141592653589793;
pub const M_PI_2: f32 = 1.5707963267948966;
pub const M_PI_4: f32 = 0.7853981633974483;
pub const M_1_PI: f32 = 0.3183098861837907;
pub const M_2_PI: f32 = 0.6366197723675814;
pub const M_2_SQRTPI: f32 = 1.1283791670955126;
pub const M_SQRT2: f32 = 1.4142135623730951;
pub const M_SQRT1_2: f32 = 0.7071067811865476;
pub const _INTTYPES_H: ::std::os::raw::c_uint = 1;
pub const ____gwchar_t_defined: ::std::os::raw::c_uint = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\x00";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\x00";
pub const PRId8: &'static [u8; 2usize] = b"d\x00";
pub const PRId16: &'static [u8; 2usize] = b"d\x00";
pub const PRId32: &'static [u8; 2usize] = b"d\x00";
pub const PRId64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIi8: &'static [u8; 2usize] = b"i\x00";
pub const PRIi16: &'static [u8; 2usize] = b"i\x00";
pub const PRIi32: &'static [u8; 2usize] = b"i\x00";
pub const PRIi64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIo8: &'static [u8; 2usize] = b"o\x00";
pub const PRIo16: &'static [u8; 2usize] = b"o\x00";
pub const PRIo32: &'static [u8; 2usize] = b"o\x00";
pub const PRIo64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIu8: &'static [u8; 2usize] = b"u\x00";
pub const PRIu16: &'static [u8; 2usize] = b"u\x00";
pub const PRIu32: &'static [u8; 2usize] = b"u\x00";
pub const PRIu64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIx8: &'static [u8; 2usize] = b"x\x00";
pub const PRIx16: &'static [u8; 2usize] = b"x\x00";
pub const PRIx32: &'static [u8; 2usize] = b"x\x00";
pub const PRIx64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIX8: &'static [u8; 2usize] = b"X\x00";
pub const PRIX16: &'static [u8; 2usize] = b"X\x00";
pub const PRIX32: &'static [u8; 2usize] = b"X\x00";
pub const PRIX64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\x00";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\x00";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\x00";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\x00";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\x00";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\x00";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\x00";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\x00";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\x00";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNd16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNd32: &'static [u8; 2usize] = b"d\x00";
pub const SCNd64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNi16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNi32: &'static [u8; 2usize] = b"i\x00";
pub const SCNi64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNu16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNu32: &'static [u8; 2usize] = b"u\x00";
pub const SCNu64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNo8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNo16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNo32: &'static [u8; 2usize] = b"o\x00";
pub const SCNo64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNx16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNx32: &'static [u8; 2usize] = b"x\x00";
pub const SCNx64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\x00";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\x00";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\x00";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\x00";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\x00";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\x00";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const TOP_BIT: ::std::os::raw::c_longlong = -9223372036854775808;
pub const NBITS: ::std::os::raw::c_uint = 64;
pub const DBL_MAXINT: ::std::os::raw::c_ulonglong = 9007199254740992;
pub const FLT_MAXINT: ::std::os::raw::c_uint = 16777216;
pub const U64_MAX: ::std::os::raw::c_int = -1;
pub const S64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const S64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const BIT63: ::std::os::raw::c_longlong = -9223372036854775808;
pub const U32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const S32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const S32_MIN: ::std::os::raw::c_int = -2147483648;
pub const BIT31: ::std::os::raw::c_uint = 2147483648;
pub const LEGACY_REGS: &'static [u8; 3usize] = b"=Q\x00";
pub const _ERRNO_H: ::std::os::raw::c_uint = 1;
pub const EPERM: ::std::os::raw::c_uint = 1;
pub const ENOENT: ::std::os::raw::c_uint = 2;
pub const ESRCH: ::std::os::raw::c_uint = 3;
pub const EINTR: ::std::os::raw::c_uint = 4;
pub const EIO: ::std::os::raw::c_uint = 5;
pub const ENXIO: ::std::os::raw::c_uint = 6;
pub const E2BIG: ::std::os::raw::c_uint = 7;
pub const ENOEXEC: ::std::os::raw::c_uint = 8;
pub const EBADF: ::std::os::raw::c_uint = 9;
pub const ECHILD: ::std::os::raw::c_uint = 10;
pub const EAGAIN: ::std::os::raw::c_uint = 11;
pub const ENOMEM: ::std::os::raw::c_uint = 12;
pub const EACCES: ::std::os::raw::c_uint = 13;
pub const EFAULT: ::std::os::raw::c_uint = 14;
pub const ENOTBLK: ::std::os::raw::c_uint = 15;
pub const EBUSY: ::std::os::raw::c_uint = 16;
pub const EEXIST: ::std::os::raw::c_uint = 17;
pub const EXDEV: ::std::os::raw::c_uint = 18;
pub const ENODEV: ::std::os::raw::c_uint = 19;
pub const ENOTDIR: ::std::os::raw::c_uint = 20;
pub const EISDIR: ::std::os::raw::c_uint = 21;
pub const EINVAL: ::std::os::raw::c_uint = 22;
pub const ENFILE: ::std::os::raw::c_uint = 23;
pub const EMFILE: ::std::os::raw::c_uint = 24;
pub const ENOTTY: ::std::os::raw::c_uint = 25;
pub const ETXTBSY: ::std::os::raw::c_uint = 26;
pub const EFBIG: ::std::os::raw::c_uint = 27;
pub const ENOSPC: ::std::os::raw::c_uint = 28;
pub const ESPIPE: ::std::os::raw::c_uint = 29;
pub const EROFS: ::std::os::raw::c_uint = 30;
pub const EMLINK: ::std::os::raw::c_uint = 31;
pub const EPIPE: ::std::os::raw::c_uint = 32;
pub const EDOM: ::std::os::raw::c_uint = 33;
pub const ERANGE: ::std::os::raw::c_uint = 34;
pub const EDEADLK: ::std::os::raw::c_uint = 35;
pub const ENAMETOOLONG: ::std::os::raw::c_uint = 36;
pub const ENOLCK: ::std::os::raw::c_uint = 37;
pub const ENOSYS: ::std::os::raw::c_uint = 38;
pub const ENOTEMPTY: ::std::os::raw::c_uint = 39;
pub const ELOOP: ::std::os::raw::c_uint = 40;
pub const EWOULDBLOCK: ::std::os::raw::c_uint = 11;
pub const ENOMSG: ::std::os::raw::c_uint = 42;
pub const EIDRM: ::std::os::raw::c_uint = 43;
pub const ECHRNG: ::std::os::raw::c_uint = 44;
pub const EL2NSYNC: ::std::os::raw::c_uint = 45;
pub const EL3HLT: ::std::os::raw::c_uint = 46;
pub const EL3RST: ::std::os::raw::c_uint = 47;
pub const ELNRNG: ::std::os::raw::c_uint = 48;
pub const EUNATCH: ::std::os::raw::c_uint = 49;
pub const ENOCSI: ::std::os::raw::c_uint = 50;
pub const EL2HLT: ::std::os::raw::c_uint = 51;
pub const EBADE: ::std::os::raw::c_uint = 52;
pub const EBADR: ::std::os::raw::c_uint = 53;
pub const EXFULL: ::std::os::raw::c_uint = 54;
pub const ENOANO: ::std::os::raw::c_uint = 55;
pub const EBADRQC: ::std::os::raw::c_uint = 56;
pub const EBADSLT: ::std::os::raw::c_uint = 57;
pub const EDEADLOCK: ::std::os::raw::c_uint = 35;
pub const EBFONT: ::std::os::raw::c_uint = 59;
pub const ENOSTR: ::std::os::raw::c_uint = 60;
pub const ENODATA: ::std::os::raw::c_uint = 61;
pub const ETIME: ::std::os::raw::c_uint = 62;
pub const ENOSR: ::std::os::raw::c_uint = 63;
pub const ENONET: ::std::os::raw::c_uint = 64;
pub const ENOPKG: ::std::os::raw::c_uint = 65;
pub const EREMOTE: ::std::os::raw::c_uint = 66;
pub const ENOLINK: ::std::os::raw::c_uint = 67;
pub const EADV: ::std::os::raw::c_uint = 68;
pub const ESRMNT: ::std::os::raw::c_uint = 69;
pub const ECOMM: ::std::os::raw::c_uint = 70;
pub const EPROTO: ::std::os::raw::c_uint = 71;
pub const EMULTIHOP: ::std::os::raw::c_uint = 72;
pub const EDOTDOT: ::std::os::raw::c_uint = 73;
pub const EBADMSG: ::std::os::raw::c_uint = 74;
pub const EOVERFLOW: ::std::os::raw::c_uint = 75;
pub const ENOTUNIQ: ::std::os::raw::c_uint = 76;
pub const EBADFD: ::std::os::raw::c_uint = 77;
pub const EREMCHG: ::std::os::raw::c_uint = 78;
pub const ELIBACC: ::std::os::raw::c_uint = 79;
pub const ELIBBAD: ::std::os::raw::c_uint = 80;
pub const ELIBSCN: ::std::os::raw::c_uint = 81;
pub const ELIBMAX: ::std::os::raw::c_uint = 82;
pub const ELIBEXEC: ::std::os::raw::c_uint = 83;
pub const EILSEQ: ::std::os::raw::c_uint = 84;
pub const ERESTART: ::std::os::raw::c_uint = 85;
pub const ESTRPIPE: ::std::os::raw::c_uint = 86;
pub const EUSERS: ::std::os::raw::c_uint = 87;
pub const ENOTSOCK: ::std::os::raw::c_uint = 88;
pub const EDESTADDRREQ: ::std::os::raw::c_uint = 89;
pub const EMSGSIZE: ::std::os::raw::c_uint = 90;
pub const EPROTOTYPE: ::std::os::raw::c_uint = 91;
pub const ENOPROTOOPT: ::std::os::raw::c_uint = 92;
pub const EPROTONOSUPPORT: ::std::os::raw::c_uint = 93;
pub const ESOCKTNOSUPPORT: ::std::os::raw::c_uint = 94;
pub const EOPNOTSUPP: ::std::os::raw::c_uint = 95;
pub const EPFNOSUPPORT: ::std::os::raw::c_uint = 96;
pub const EAFNOSUPPORT: ::std::os::raw::c_uint = 97;
pub const EADDRINUSE: ::std::os::raw::c_uint = 98;
pub const EADDRNOTAVAIL: ::std::os::raw::c_uint = 99;
pub const ENETDOWN: ::std::os::raw::c_uint = 100;
pub const ENETUNREACH: ::std::os::raw::c_uint = 101;
pub const ENETRESET: ::std::os::raw::c_uint = 102;
pub const ECONNABORTED: ::std::os::raw::c_uint = 103;
pub const ECONNRESET: ::std::os::raw::c_uint = 104;
pub const ENOBUFS: ::std::os::raw::c_uint = 105;
pub const EISCONN: ::std::os::raw::c_uint = 106;
pub const ENOTCONN: ::std::os::raw::c_uint = 107;
pub const ESHUTDOWN: ::std::os::raw::c_uint = 108;
pub const ETOOMANYREFS: ::std::os::raw::c_uint = 109;
pub const ETIMEDOUT: ::std::os::raw::c_uint = 110;
pub const ECONNREFUSED: ::std::os::raw::c_uint = 111;
pub const EHOSTDOWN: ::std::os::raw::c_uint = 112;
pub const EHOSTUNREACH: ::std::os::raw::c_uint = 113;
pub const EALREADY: ::std::os::raw::c_uint = 114;
pub const EINPROGRESS: ::std::os::raw::c_uint = 115;
pub const ESTALE: ::std::os::raw::c_uint = 116;
pub const EUCLEAN: ::std::os::raw::c_uint = 117;
pub const ENOTNAM: ::std::os::raw::c_uint = 118;
pub const ENAVAIL: ::std::os::raw::c_uint = 119;
pub const EISNAM: ::std::os::raw::c_uint = 120;
pub const EREMOTEIO: ::std::os::raw::c_uint = 121;
pub const EDQUOT: ::std::os::raw::c_uint = 122;
pub const ENOMEDIUM: ::std::os::raw::c_uint = 123;
pub const EMEDIUMTYPE: ::std::os::raw::c_uint = 124;
pub const ECANCELED: ::std::os::raw::c_uint = 125;
pub const ENOKEY: ::std::os::raw::c_uint = 126;
pub const EKEYEXPIRED: ::std::os::raw::c_uint = 127;
pub const EKEYREVOKED: ::std::os::raw::c_uint = 128;
pub const EKEYREJECTED: ::std::os::raw::c_uint = 129;
pub const EOWNERDEAD: ::std::os::raw::c_uint = 130;
pub const ENOTRECOVERABLE: ::std::os::raw::c_uint = 131;
pub const ERFKILL: ::std::os::raw::c_uint = 132;
pub const EHWPOISON: ::std::os::raw::c_uint = 133;
pub const ENOTSUP: ::std::os::raw::c_uint = 95;
pub const UV__EOF: ::std::os::raw::c_int = -4095;
pub const UV__UNKNOWN: ::std::os::raw::c_int = -4094;
pub const UV__EAI_ADDRFAMILY: ::std::os::raw::c_int = -3000;
pub const UV__EAI_AGAIN: ::std::os::raw::c_int = -3001;
pub const UV__EAI_BADFLAGS: ::std::os::raw::c_int = -3002;
pub const UV__EAI_CANCELED: ::std::os::raw::c_int = -3003;
pub const UV__EAI_FAIL: ::std::os::raw::c_int = -3004;
pub const UV__EAI_FAMILY: ::std::os::raw::c_int = -3005;
pub const UV__EAI_MEMORY: ::std::os::raw::c_int = -3006;
pub const UV__EAI_NODATA: ::std::os::raw::c_int = -3007;
pub const UV__EAI_NONAME: ::std::os::raw::c_int = -3008;
pub const UV__EAI_OVERFLOW: ::std::os::raw::c_int = -3009;
pub const UV__EAI_SERVICE: ::std::os::raw::c_int = -3010;
pub const UV__EAI_SOCKTYPE: ::std::os::raw::c_int = -3011;
pub const UV__EAI_BADHINTS: ::std::os::raw::c_int = -3013;
pub const UV__EAI_PROTOCOL: ::std::os::raw::c_int = -3014;
pub const UV__E2BIG: ::std::os::raw::c_int = -7;
pub const UV__EACCES: ::std::os::raw::c_int = -13;
pub const UV__EADDRINUSE: ::std::os::raw::c_int = -98;
pub const UV__EADDRNOTAVAIL: ::std::os::raw::c_int = -99;
pub const UV__EAFNOSUPPORT: ::std::os::raw::c_int = -97;
pub const UV__EAGAIN: ::std::os::raw::c_int = -11;
pub const UV__EALREADY: ::std::os::raw::c_int = -114;
pub const UV__EBADF: ::std::os::raw::c_int = -9;
pub const UV__EBUSY: ::std::os::raw::c_int = -16;
pub const UV__ECANCELED: ::std::os::raw::c_int = -125;
pub const UV__ECHARSET: ::std::os::raw::c_int = -4080;
pub const UV__ECONNABORTED: ::std::os::raw::c_int = -103;
pub const UV__ECONNREFUSED: ::std::os::raw::c_int = -111;
pub const UV__ECONNRESET: ::std::os::raw::c_int = -104;
pub const UV__EDESTADDRREQ: ::std::os::raw::c_int = -89;
pub const UV__EEXIST: ::std::os::raw::c_int = -17;
pub const UV__EFAULT: ::std::os::raw::c_int = -14;
pub const UV__EHOSTUNREACH: ::std::os::raw::c_int = -113;
pub const UV__EINTR: ::std::os::raw::c_int = -4;
pub const UV__EINVAL: ::std::os::raw::c_int = -22;
pub const UV__EIO: ::std::os::raw::c_int = -5;
pub const UV__EISCONN: ::std::os::raw::c_int = -106;
pub const UV__EISDIR: ::std::os::raw::c_int = -21;
pub const UV__ELOOP: ::std::os::raw::c_int = -40;
pub const UV__EMFILE: ::std::os::raw::c_int = -24;
pub const UV__EMSGSIZE: ::std::os::raw::c_int = -90;
pub const UV__ENAMETOOLONG: ::std::os::raw::c_int = -36;
pub const UV__ENETDOWN: ::std::os::raw::c_int = -100;
pub const UV__ENETUNREACH: ::std::os::raw::c_int = -101;
pub const UV__ENFILE: ::std::os::raw::c_int = -23;
pub const UV__ENOBUFS: ::std::os::raw::c_int = -105;
pub const UV__ENODEV: ::std::os::raw::c_int = -19;
pub const UV__ENOENT: ::std::os::raw::c_int = -2;
pub const UV__ENOMEM: ::std::os::raw::c_int = -12;
pub const UV__ENONET: ::std::os::raw::c_int = -64;
pub const UV__ENOSPC: ::std::os::raw::c_int = -28;
pub const UV__ENOSYS: ::std::os::raw::c_int = -38;
pub const UV__ENOTCONN: ::std::os::raw::c_int = -107;
pub const UV__ENOTDIR: ::std::os::raw::c_int = -20;
pub const UV__ENOTEMPTY: ::std::os::raw::c_int = -39;
pub const UV__ENOTSOCK: ::std::os::raw::c_int = -88;
pub const UV__ENOTSUP: ::std::os::raw::c_int = -95;
pub const UV__EPERM: ::std::os::raw::c_int = -1;
pub const UV__EPIPE: ::std::os::raw::c_int = -32;
pub const UV__EPROTO: ::std::os::raw::c_int = -71;
pub const UV__EPROTONOSUPPORT: ::std::os::raw::c_int = -93;
pub const UV__EPROTOTYPE: ::std::os::raw::c_int = -91;
pub const UV__EROFS: ::std::os::raw::c_int = -30;
pub const UV__ESHUTDOWN: ::std::os::raw::c_int = -108;
pub const UV__ESPIPE: ::std::os::raw::c_int = -29;
pub const UV__ESRCH: ::std::os::raw::c_int = -3;
pub const UV__ETIMEDOUT: ::std::os::raw::c_int = -110;
pub const UV__ETXTBSY: ::std::os::raw::c_int = -26;
pub const UV__EXDEV: ::std::os::raw::c_int = -18;
pub const UV__EFBIG: ::std::os::raw::c_int = -27;
pub const UV__ENOPROTOOPT: ::std::os::raw::c_int = -92;
pub const UV__ERANGE: ::std::os::raw::c_int = -34;
pub const UV__ENXIO: ::std::os::raw::c_int = -6;
pub const UV__EMLINK: ::std::os::raw::c_int = -31;
pub const UV__EHOSTDOWN: ::std::os::raw::c_int = -112;
pub const UV_VERSION_MAJOR: ::std::os::raw::c_uint = 1;
pub const UV_VERSION_MINOR: ::std::os::raw::c_uint = 9;
pub const UV_VERSION_PATCH: ::std::os::raw::c_uint = 0;
pub const UV_VERSION_IS_RELEASE: ::std::os::raw::c_uint = 1;
pub const UV_VERSION_SUFFIX: &'static [u8; 1usize] = b"\x00";
pub const UV_VERSION_HEX: ::std::os::raw::c_uint = 67840;
pub const _STDIO_H: ::std::os::raw::c_uint = 1;
pub const __FILE_defined: ::std::os::raw::c_uint = 1;
pub const ____FILE_defined: ::std::os::raw::c_uint = 1;
pub const _G_config_h: ::std::os::raw::c_uint = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uint = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uint = 1;
pub const EOF: ::std::os::raw::c_int = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uint = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uint = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uint = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uint = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uint = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uint = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uint = 64;
pub const _IOS_BIN: ::std::os::raw::c_uint = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uint = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uint = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uint = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uint = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uint = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uint = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uint = 64;
pub const _IO_LINKED: ::std::os::raw::c_uint = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_uint = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_uint = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_uint = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_uint = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_uint = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_uint = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_uint = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uint = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uint = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uint = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uint = 1;
pub const _IO_LEFT: ::std::os::raw::c_uint = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uint = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uint = 8;
pub const _IO_DEC: ::std::os::raw::c_uint = 16;
pub const _IO_OCT: ::std::os::raw::c_uint = 32;
pub const _IO_HEX: ::std::os::raw::c_uint = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uint = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_uint = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_uint = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_uint = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_uint = 2048;
pub const _IO_FIXED: ::std::os::raw::c_uint = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_STDIO: ::std::os::raw::c_uint = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_uint = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 4096;
pub const L_ctermid: ::std::os::raw::c_uint = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 16;
pub const _SYS_STAT_H: ::std::os::raw::c_uint = 1;
pub const _BITS_STAT_H: ::std::os::raw::c_uint = 1;
pub const _STAT_VER_KERNEL: ::std::os::raw::c_uint = 0;
pub const _STAT_VER_LINUX: ::std::os::raw::c_uint = 1;
pub const _MKNOD_VER_LINUX: ::std::os::raw::c_uint = 0;
pub const _STAT_VER: ::std::os::raw::c_uint = 1;
pub const __S_IFMT: ::std::os::raw::c_uint = 61440;
pub const __S_IFDIR: ::std::os::raw::c_uint = 16384;
pub const __S_IFCHR: ::std::os::raw::c_uint = 8192;
pub const __S_IFBLK: ::std::os::raw::c_uint = 24576;
pub const __S_IFREG: ::std::os::raw::c_uint = 32768;
pub const __S_IFIFO: ::std::os::raw::c_uint = 4096;
pub const __S_IFLNK: ::std::os::raw::c_uint = 40960;
pub const __S_IFSOCK: ::std::os::raw::c_uint = 49152;
pub const __S_ISUID: ::std::os::raw::c_uint = 2048;
pub const __S_ISGID: ::std::os::raw::c_uint = 1024;
pub const __S_ISVTX: ::std::os::raw::c_uint = 512;
pub const __S_IREAD: ::std::os::raw::c_uint = 256;
pub const __S_IWRITE: ::std::os::raw::c_uint = 128;
pub const __S_IEXEC: ::std::os::raw::c_uint = 64;
pub const UTIME_NOW: ::std::os::raw::c_uint = 1073741823;
pub const UTIME_OMIT: ::std::os::raw::c_uint = 1073741822;
pub const S_IFMT: ::std::os::raw::c_uint = 61440;
pub const S_IFDIR: ::std::os::raw::c_uint = 16384;
pub const S_IFCHR: ::std::os::raw::c_uint = 8192;
pub const S_IFBLK: ::std::os::raw::c_uint = 24576;
pub const S_IFREG: ::std::os::raw::c_uint = 32768;
pub const S_IFIFO: ::std::os::raw::c_uint = 4096;
pub const S_IFLNK: ::std::os::raw::c_uint = 40960;
pub const S_IFSOCK: ::std::os::raw::c_uint = 49152;
pub const S_ISUID: ::std::os::raw::c_uint = 2048;
pub const S_ISGID: ::std::os::raw::c_uint = 1024;
pub const S_ISVTX: ::std::os::raw::c_uint = 512;
pub const S_IRUSR: ::std::os::raw::c_uint = 256;
pub const S_IWUSR: ::std::os::raw::c_uint = 128;
pub const S_IXUSR: ::std::os::raw::c_uint = 64;
pub const S_IRWXU: ::std::os::raw::c_uint = 448;
pub const S_IREAD: ::std::os::raw::c_uint = 256;
pub const S_IWRITE: ::std::os::raw::c_uint = 128;
pub const S_IEXEC: ::std::os::raw::c_uint = 64;
pub const S_IRGRP: ::std::os::raw::c_uint = 32;
pub const S_IWGRP: ::std::os::raw::c_uint = 16;
pub const S_IXGRP: ::std::os::raw::c_uint = 8;
pub const S_IRWXG: ::std::os::raw::c_uint = 56;
pub const S_IROTH: ::std::os::raw::c_uint = 4;
pub const S_IWOTH: ::std::os::raw::c_uint = 2;
pub const S_IXOTH: ::std::os::raw::c_uint = 1;
pub const S_IRWXO: ::std::os::raw::c_uint = 7;
pub const ACCESSPERMS: ::std::os::raw::c_uint = 511;
pub const ALLPERMS: ::std::os::raw::c_uint = 4095;
pub const DEFFILEMODE: ::std::os::raw::c_uint = 438;
pub const S_BLKSIZE: ::std::os::raw::c_uint = 512;
pub const _MKNOD_VER: ::std::os::raw::c_uint = 0;
pub const _FCNTL_H: ::std::os::raw::c_uint = 1;
pub const __O_LARGEFILE: ::std::os::raw::c_uint = 0;
pub const F_GETLK64: ::std::os::raw::c_uint = 5;
pub const F_SETLK64: ::std::os::raw::c_uint = 6;
pub const F_SETLKW64: ::std::os::raw::c_uint = 7;
pub const O_ACCMODE: ::std::os::raw::c_uint = 3;
pub const O_RDONLY: ::std::os::raw::c_uint = 0;
pub const O_WRONLY: ::std::os::raw::c_uint = 1;
pub const O_RDWR: ::std::os::raw::c_uint = 2;
pub const O_CREAT: ::std::os::raw::c_uint = 64;
pub const O_EXCL: ::std::os::raw::c_uint = 128;
pub const O_NOCTTY: ::std::os::raw::c_uint = 256;
pub const O_TRUNC: ::std::os::raw::c_uint = 512;
pub const O_APPEND: ::std::os::raw::c_uint = 1024;
pub const O_NONBLOCK: ::std::os::raw::c_uint = 2048;
pub const O_NDELAY: ::std::os::raw::c_uint = 2048;
pub const O_SYNC: ::std::os::raw::c_uint = 1052672;
pub const O_FSYNC: ::std::os::raw::c_uint = 1052672;
pub const O_ASYNC: ::std::os::raw::c_uint = 8192;
pub const __O_DIRECTORY: ::std::os::raw::c_uint = 65536;
pub const __O_NOFOLLOW: ::std::os::raw::c_uint = 131072;
pub const __O_CLOEXEC: ::std::os::raw::c_uint = 524288;
pub const __O_DIRECT: ::std::os::raw::c_uint = 16384;
pub const __O_NOATIME: ::std::os::raw::c_uint = 262144;
pub const __O_PATH: ::std::os::raw::c_uint = 2097152;
pub const __O_DSYNC: ::std::os::raw::c_uint = 4096;
pub const __O_TMPFILE: ::std::os::raw::c_uint = 4259840;
pub const F_GETLK: ::std::os::raw::c_uint = 5;
pub const F_SETLK: ::std::os::raw::c_uint = 6;
pub const F_SETLKW: ::std::os::raw::c_uint = 7;
pub const O_DIRECTORY: ::std::os::raw::c_uint = 65536;
pub const O_NOFOLLOW: ::std::os::raw::c_uint = 131072;
pub const O_CLOEXEC: ::std::os::raw::c_uint = 524288;
pub const O_DSYNC: ::std::os::raw::c_uint = 4096;
pub const O_RSYNC: ::std::os::raw::c_uint = 1052672;
pub const F_DUPFD: ::std::os::raw::c_uint = 0;
pub const F_GETFD: ::std::os::raw::c_uint = 1;
pub const F_SETFD: ::std::os::raw::c_uint = 2;
pub const F_GETFL: ::std::os::raw::c_uint = 3;
pub const F_SETFL: ::std::os::raw::c_uint = 4;
pub const __F_SETOWN: ::std::os::raw::c_uint = 8;
pub const __F_GETOWN: ::std::os::raw::c_uint = 9;
pub const F_SETOWN: ::std::os::raw::c_uint = 8;
pub const F_GETOWN: ::std::os::raw::c_uint = 9;
pub const __F_SETSIG: ::std::os::raw::c_uint = 10;
pub const __F_GETSIG: ::std::os::raw::c_uint = 11;
pub const __F_SETOWN_EX: ::std::os::raw::c_uint = 15;
pub const __F_GETOWN_EX: ::std::os::raw::c_uint = 16;
pub const F_DUPFD_CLOEXEC: ::std::os::raw::c_uint = 1030;
pub const FD_CLOEXEC: ::std::os::raw::c_uint = 1;
pub const F_RDLCK: ::std::os::raw::c_uint = 0;
pub const F_WRLCK: ::std::os::raw::c_uint = 1;
pub const F_UNLCK: ::std::os::raw::c_uint = 2;
pub const F_EXLCK: ::std::os::raw::c_uint = 4;
pub const F_SHLCK: ::std::os::raw::c_uint = 8;
pub const LOCK_SH: ::std::os::raw::c_uint = 1;
pub const LOCK_EX: ::std::os::raw::c_uint = 2;
pub const LOCK_NB: ::std::os::raw::c_uint = 4;
pub const LOCK_UN: ::std::os::raw::c_uint = 8;
pub const FAPPEND: ::std::os::raw::c_uint = 1024;
pub const FFSYNC: ::std::os::raw::c_uint = 1052672;
pub const FASYNC: ::std::os::raw::c_uint = 8192;
pub const FNONBLOCK: ::std::os::raw::c_uint = 2048;
pub const FNDELAY: ::std::os::raw::c_uint = 2048;
pub const __POSIX_FADV_DONTNEED: ::std::os::raw::c_uint = 4;
pub const __POSIX_FADV_NOREUSE: ::std::os::raw::c_uint = 5;
pub const POSIX_FADV_NORMAL: ::std::os::raw::c_uint = 0;
pub const POSIX_FADV_RANDOM: ::std::os::raw::c_uint = 1;
pub const POSIX_FADV_SEQUENTIAL: ::std::os::raw::c_uint = 2;
pub const POSIX_FADV_WILLNEED: ::std::os::raw::c_uint = 3;
pub const POSIX_FADV_DONTNEED: ::std::os::raw::c_uint = 4;
pub const POSIX_FADV_NOREUSE: ::std::os::raw::c_uint = 5;
pub const R_OK: ::std::os::raw::c_uint = 4;
pub const W_OK: ::std::os::raw::c_uint = 2;
pub const X_OK: ::std::os::raw::c_uint = 1;
pub const F_OK: ::std::os::raw::c_uint = 0;
pub const AT_FDCWD: ::std::os::raw::c_int = -100;
pub const AT_SYMLINK_NOFOLLOW: ::std::os::raw::c_uint = 256;
pub const AT_REMOVEDIR: ::std::os::raw::c_uint = 512;
pub const AT_SYMLINK_FOLLOW: ::std::os::raw::c_uint = 1024;
pub const AT_EACCESS: ::std::os::raw::c_uint = 512;
pub const F_ULOCK: ::std::os::raw::c_uint = 0;
pub const F_LOCK: ::std::os::raw::c_uint = 1;
pub const F_TLOCK: ::std::os::raw::c_uint = 2;
pub const F_TEST: ::std::os::raw::c_uint = 3;
pub const _DIRENT_H: ::std::os::raw::c_uint = 1;
pub const _DIRENT_MATCHES_DIRENT64: ::std::os::raw::c_uint = 1;
pub const _BITS_POSIX1_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uint = 1;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_uint = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uint = 25;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uint = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uint = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const NR_OPEN: ::std::os::raw::c_uint = 1024;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 65536;
pub const ARG_MAX: ::std::os::raw::c_uint = 131072;
pub const LINK_MAX: ::std::os::raw::c_uint = 127;
pub const MAX_CANON: ::std::os::raw::c_uint = 255;
pub const MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const NAME_MAX: ::std::os::raw::c_uint = 255;
pub const PATH_MAX: ::std::os::raw::c_uint = 4096;
pub const PIPE_BUF: ::std::os::raw::c_uint = 4096;
pub const XATTR_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const XATTR_SIZE_MAX: ::std::os::raw::c_uint = 65536;
pub const XATTR_LIST_MAX: ::std::os::raw::c_uint = 65536;
pub const RTSIG_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 128;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_uint = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 64;
pub const AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 20;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_uint = 16384;
pub const DELAYTIMER_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TTY_NAME_MAX: ::std::os::raw::c_uint = 32;
pub const LOGIN_NAME_MAX: ::std::os::raw::c_uint = 256;
pub const HOST_NAME_MAX: ::std::os::raw::c_uint = 64;
pub const MQ_PRIO_MAX: ::std::os::raw::c_uint = 32768;
pub const SEM_VALUE_MAX: ::std::os::raw::c_uint = 2147483647;
pub const MAXNAMLEN: ::std::os::raw::c_uint = 255;
pub const _SYS_SOCKET_H: ::std::os::raw::c_uint = 1;
pub const _SYS_UIO_H: ::std::os::raw::c_uint = 1;
pub const _BITS_UIO_H: ::std::os::raw::c_uint = 1;
pub const UIO_MAXIOV: ::std::os::raw::c_uint = 1024;
pub const PF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const PF_LOCAL: ::std::os::raw::c_uint = 1;
pub const PF_UNIX: ::std::os::raw::c_uint = 1;
pub const PF_FILE: ::std::os::raw::c_uint = 1;
pub const PF_INET: ::std::os::raw::c_uint = 2;
pub const PF_AX25: ::std::os::raw::c_uint = 3;
pub const PF_IPX: ::std::os::raw::c_uint = 4;
pub const PF_APPLETALK: ::std::os::raw::c_uint = 5;
pub const PF_NETROM: ::std::os::raw::c_uint = 6;
pub const PF_BRIDGE: ::std::os::raw::c_uint = 7;
pub const PF_ATMPVC: ::std::os::raw::c_uint = 8;
pub const PF_X25: ::std::os::raw::c_uint = 9;
pub const PF_INET6: ::std::os::raw::c_uint = 10;
pub const PF_ROSE: ::std::os::raw::c_uint = 11;
pub const PF_DECnet: ::std::os::raw::c_uint = 12;
pub const PF_NETBEUI: ::std::os::raw::c_uint = 13;
pub const PF_SECURITY: ::std::os::raw::c_uint = 14;
pub const PF_KEY: ::std::os::raw::c_uint = 15;
pub const PF_NETLINK: ::std::os::raw::c_uint = 16;
pub const PF_ROUTE: ::std::os::raw::c_uint = 16;
pub const PF_PACKET: ::std::os::raw::c_uint = 17;
pub const PF_ASH: ::std::os::raw::c_uint = 18;
pub const PF_ECONET: ::std::os::raw::c_uint = 19;
pub const PF_ATMSVC: ::std::os::raw::c_uint = 20;
pub const PF_RDS: ::std::os::raw::c_uint = 21;
pub const PF_SNA: ::std::os::raw::c_uint = 22;
pub const PF_IRDA: ::std::os::raw::c_uint = 23;
pub const PF_PPPOX: ::std::os::raw::c_uint = 24;
pub const PF_WANPIPE: ::std::os::raw::c_uint = 25;
pub const PF_LLC: ::std::os::raw::c_uint = 26;
pub const PF_IB: ::std::os::raw::c_uint = 27;
pub const PF_MPLS: ::std::os::raw::c_uint = 28;
pub const PF_CAN: ::std::os::raw::c_uint = 29;
pub const PF_TIPC: ::std::os::raw::c_uint = 30;
pub const PF_BLUETOOTH: ::std::os::raw::c_uint = 31;
pub const PF_IUCV: ::std::os::raw::c_uint = 32;
pub const PF_RXRPC: ::std::os::raw::c_uint = 33;
pub const PF_ISDN: ::std::os::raw::c_uint = 34;
pub const PF_PHONET: ::std::os::raw::c_uint = 35;
pub const PF_IEEE802154: ::std::os::raw::c_uint = 36;
pub const PF_CAIF: ::std::os::raw::c_uint = 37;
pub const PF_ALG: ::std::os::raw::c_uint = 38;
pub const PF_NFC: ::std::os::raw::c_uint = 39;
pub const PF_VSOCK: ::std::os::raw::c_uint = 40;
pub const PF_KCM: ::std::os::raw::c_uint = 41;
pub const PF_QIPCRTR: ::std::os::raw::c_uint = 42;
pub const PF_MAX: ::std::os::raw::c_uint = 43;
pub const AF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const AF_LOCAL: ::std::os::raw::c_uint = 1;
pub const AF_UNIX: ::std::os::raw::c_uint = 1;
pub const AF_FILE: ::std::os::raw::c_uint = 1;
pub const AF_INET: ::std::os::raw::c_uint = 2;
pub const AF_AX25: ::std::os::raw::c_uint = 3;
pub const AF_IPX: ::std::os::raw::c_uint = 4;
pub const AF_APPLETALK: ::std::os::raw::c_uint = 5;
pub const AF_NETROM: ::std::os::raw::c_uint = 6;
pub const AF_BRIDGE: ::std::os::raw::c_uint = 7;
pub const AF_ATMPVC: ::std::os::raw::c_uint = 8;
pub const AF_X25: ::std::os::raw::c_uint = 9;
pub const AF_INET6: ::std::os::raw::c_uint = 10;
pub const AF_ROSE: ::std::os::raw::c_uint = 11;
pub const AF_DECnet: ::std::os::raw::c_uint = 12;
pub const AF_NETBEUI: ::std::os::raw::c_uint = 13;
pub const AF_SECURITY: ::std::os::raw::c_uint = 14;
pub const AF_KEY: ::std::os::raw::c_uint = 15;
pub const AF_NETLINK: ::std::os::raw::c_uint = 16;
pub const AF_ROUTE: ::std::os::raw::c_uint = 16;
pub const AF_PACKET: ::std::os::raw::c_uint = 17;
pub const AF_ASH: ::std::os::raw::c_uint = 18;
pub const AF_ECONET: ::std::os::raw::c_uint = 19;
pub const AF_ATMSVC: ::std::os::raw::c_uint = 20;
pub const AF_RDS: ::std::os::raw::c_uint = 21;
pub const AF_SNA: ::std::os::raw::c_uint = 22;
pub const AF_IRDA: ::std::os::raw::c_uint = 23;
pub const AF_PPPOX: ::std::os::raw::c_uint = 24;
pub const AF_WANPIPE: ::std::os::raw::c_uint = 25;
pub const AF_LLC: ::std::os::raw::c_uint = 26;
pub const AF_IB: ::std::os::raw::c_uint = 27;
pub const AF_MPLS: ::std::os::raw::c_uint = 28;
pub const AF_CAN: ::std::os::raw::c_uint = 29;
pub const AF_TIPC: ::std::os::raw::c_uint = 30;
pub const AF_BLUETOOTH: ::std::os::raw::c_uint = 31;
pub const AF_IUCV: ::std::os::raw::c_uint = 32;
pub const AF_RXRPC: ::std::os::raw::c_uint = 33;
pub const AF_ISDN: ::std::os::raw::c_uint = 34;
pub const AF_PHONET: ::std::os::raw::c_uint = 35;
pub const AF_IEEE802154: ::std::os::raw::c_uint = 36;
pub const AF_CAIF: ::std::os::raw::c_uint = 37;
pub const AF_ALG: ::std::os::raw::c_uint = 38;
pub const AF_NFC: ::std::os::raw::c_uint = 39;
pub const AF_VSOCK: ::std::os::raw::c_uint = 40;
pub const AF_KCM: ::std::os::raw::c_uint = 41;
pub const AF_QIPCRTR: ::std::os::raw::c_uint = 42;
pub const AF_MAX: ::std::os::raw::c_uint = 43;
pub const SOL_RAW: ::std::os::raw::c_uint = 255;
pub const SOL_DECNET: ::std::os::raw::c_uint = 261;
pub const SOL_X25: ::std::os::raw::c_uint = 262;
pub const SOL_PACKET: ::std::os::raw::c_uint = 263;
pub const SOL_ATM: ::std::os::raw::c_uint = 264;
pub const SOL_AAL: ::std::os::raw::c_uint = 265;
pub const SOL_IRDA: ::std::os::raw::c_uint = 266;
pub const SOL_NETBEUI: ::std::os::raw::c_uint = 267;
pub const SOL_LLC: ::std::os::raw::c_uint = 268;
pub const SOL_DCCP: ::std::os::raw::c_uint = 269;
pub const SOL_NETLINK: ::std::os::raw::c_uint = 270;
pub const SOL_TIPC: ::std::os::raw::c_uint = 271;
pub const SOL_RXRPC: ::std::os::raw::c_uint = 272;
pub const SOL_PPPOL2TP: ::std::os::raw::c_uint = 273;
pub const SOL_BLUETOOTH: ::std::os::raw::c_uint = 274;
pub const SOL_PNPIPE: ::std::os::raw::c_uint = 275;
pub const SOL_RDS: ::std::os::raw::c_uint = 276;
pub const SOL_IUCV: ::std::os::raw::c_uint = 277;
pub const SOL_CAIF: ::std::os::raw::c_uint = 278;
pub const SOL_ALG: ::std::os::raw::c_uint = 279;
pub const SOL_NFC: ::std::os::raw::c_uint = 280;
pub const SOL_KCM: ::std::os::raw::c_uint = 281;
pub const SOMAXCONN: ::std::os::raw::c_uint = 128;
pub const _BITS_SOCKADDR_H: ::std::os::raw::c_uint = 1;
pub const _SS_SIZE: ::std::os::raw::c_uint = 128;
pub const FIOSETOWN: ::std::os::raw::c_uint = 35073;
pub const SIOCSPGRP: ::std::os::raw::c_uint = 35074;
pub const FIOGETOWN: ::std::os::raw::c_uint = 35075;
pub const SIOCGPGRP: ::std::os::raw::c_uint = 35076;
pub const SIOCATMARK: ::std::os::raw::c_uint = 35077;
pub const SIOCGSTAMP: ::std::os::raw::c_uint = 35078;
pub const SIOCGSTAMPNS: ::std::os::raw::c_uint = 35079;
pub const SOL_SOCKET: ::std::os::raw::c_uint = 1;
pub const SO_DEBUG: ::std::os::raw::c_uint = 1;
pub const SO_REUSEADDR: ::std::os::raw::c_uint = 2;
pub const SO_TYPE: ::std::os::raw::c_uint = 3;
pub const SO_ERROR: ::std::os::raw::c_uint = 4;
pub const SO_DONTROUTE: ::std::os::raw::c_uint = 5;
pub const SO_BROADCAST: ::std::os::raw::c_uint = 6;
pub const SO_SNDBUF: ::std::os::raw::c_uint = 7;
pub const SO_RCVBUF: ::std::os::raw::c_uint = 8;
pub const SO_SNDBUFFORCE: ::std::os::raw::c_uint = 32;
pub const SO_RCVBUFFORCE: ::std::os::raw::c_uint = 33;
pub const SO_KEEPALIVE: ::std::os::raw::c_uint = 9;
pub const SO_OOBINLINE: ::std::os::raw::c_uint = 10;
pub const SO_NO_CHECK: ::std::os::raw::c_uint = 11;
pub const SO_PRIORITY: ::std::os::raw::c_uint = 12;
pub const SO_LINGER: ::std::os::raw::c_uint = 13;
pub const SO_BSDCOMPAT: ::std::os::raw::c_uint = 14;
pub const SO_REUSEPORT: ::std::os::raw::c_uint = 15;
pub const SO_PASSCRED: ::std::os::raw::c_uint = 16;
pub const SO_PEERCRED: ::std::os::raw::c_uint = 17;
pub const SO_RCVLOWAT: ::std::os::raw::c_uint = 18;
pub const SO_SNDLOWAT: ::std::os::raw::c_uint = 19;
pub const SO_RCVTIMEO: ::std::os::raw::c_uint = 20;
pub const SO_SNDTIMEO: ::std::os::raw::c_uint = 21;
pub const SO_SECURITY_AUTHENTICATION: ::std::os::raw::c_uint = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: ::std::os::raw::c_uint = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: ::std::os::raw::c_uint = 24;
pub const SO_BINDTODEVICE: ::std::os::raw::c_uint = 25;
pub const SO_ATTACH_FILTER: ::std::os::raw::c_uint = 26;
pub const SO_DETACH_FILTER: ::std::os::raw::c_uint = 27;
pub const SO_GET_FILTER: ::std::os::raw::c_uint = 26;
pub const SO_PEERNAME: ::std::os::raw::c_uint = 28;
pub const SO_TIMESTAMP: ::std::os::raw::c_uint = 29;
pub const SCM_TIMESTAMP: ::std::os::raw::c_uint = 29;
pub const SO_ACCEPTCONN: ::std::os::raw::c_uint = 30;
pub const SO_PEERSEC: ::std::os::raw::c_uint = 31;
pub const SO_PASSSEC: ::std::os::raw::c_uint = 34;
pub const SO_TIMESTAMPNS: ::std::os::raw::c_uint = 35;
pub const SCM_TIMESTAMPNS: ::std::os::raw::c_uint = 35;
pub const SO_MARK: ::std::os::raw::c_uint = 36;
pub const SO_TIMESTAMPING: ::std::os::raw::c_uint = 37;
pub const SCM_TIMESTAMPING: ::std::os::raw::c_uint = 37;
pub const SO_PROTOCOL: ::std::os::raw::c_uint = 38;
pub const SO_DOMAIN: ::std::os::raw::c_uint = 39;
pub const SO_RXQ_OVFL: ::std::os::raw::c_uint = 40;
pub const SO_WIFI_STATUS: ::std::os::raw::c_uint = 41;
pub const SCM_WIFI_STATUS: ::std::os::raw::c_uint = 41;
pub const SO_PEEK_OFF: ::std::os::raw::c_uint = 42;
pub const SO_NOFCS: ::std::os::raw::c_uint = 43;
pub const SO_LOCK_FILTER: ::std::os::raw::c_uint = 44;
pub const SO_SELECT_ERR_QUEUE: ::std::os::raw::c_uint = 45;
pub const SO_BUSY_POLL: ::std::os::raw::c_uint = 46;
pub const SO_MAX_PACING_RATE: ::std::os::raw::c_uint = 47;
pub const SO_BPF_EXTENSIONS: ::std::os::raw::c_uint = 48;
pub const SO_INCOMING_CPU: ::std::os::raw::c_uint = 49;
pub const SO_ATTACH_BPF: ::std::os::raw::c_uint = 50;
pub const SO_DETACH_BPF: ::std::os::raw::c_uint = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: ::std::os::raw::c_uint = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: ::std::os::raw::c_uint = 52;
pub const SO_CNX_ADVICE: ::std::os::raw::c_uint = 53;
pub const _NETINET_IN_H: ::std::os::raw::c_uint = 1;
pub const __USE_KERNEL_IPV6_DEFS: ::std::os::raw::c_uint = 0;
pub const IP_OPTIONS: ::std::os::raw::c_uint = 4;
pub const IP_HDRINCL: ::std::os::raw::c_uint = 3;
pub const IP_TOS: ::std::os::raw::c_uint = 1;
pub const IP_TTL: ::std::os::raw::c_uint = 2;
pub const IP_RECVOPTS: ::std::os::raw::c_uint = 6;
pub const IP_RETOPTS: ::std::os::raw::c_uint = 7;
pub const IP_MULTICAST_IF: ::std::os::raw::c_uint = 32;
pub const IP_MULTICAST_TTL: ::std::os::raw::c_uint = 33;
pub const IP_MULTICAST_LOOP: ::std::os::raw::c_uint = 34;
pub const IP_ADD_MEMBERSHIP: ::std::os::raw::c_uint = 35;
pub const IP_DROP_MEMBERSHIP: ::std::os::raw::c_uint = 36;
pub const IP_UNBLOCK_SOURCE: ::std::os::raw::c_uint = 37;
pub const IP_BLOCK_SOURCE: ::std::os::raw::c_uint = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: ::std::os::raw::c_uint = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: ::std::os::raw::c_uint = 40;
pub const IP_MSFILTER: ::std::os::raw::c_uint = 41;
pub const MCAST_JOIN_GROUP: ::std::os::raw::c_uint = 42;
pub const MCAST_BLOCK_SOURCE: ::std::os::raw::c_uint = 43;
pub const MCAST_UNBLOCK_SOURCE: ::std::os::raw::c_uint = 44;
pub const MCAST_LEAVE_GROUP: ::std::os::raw::c_uint = 45;
pub const MCAST_JOIN_SOURCE_GROUP: ::std::os::raw::c_uint = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: ::std::os::raw::c_uint = 47;
pub const MCAST_MSFILTER: ::std::os::raw::c_uint = 48;
pub const IP_MULTICAST_ALL: ::std::os::raw::c_uint = 49;
pub const IP_UNICAST_IF: ::std::os::raw::c_uint = 50;
pub const MCAST_EXCLUDE: ::std::os::raw::c_uint = 0;
pub const MCAST_INCLUDE: ::std::os::raw::c_uint = 1;
pub const IP_ROUTER_ALERT: ::std::os::raw::c_uint = 5;
pub const IP_PKTINFO: ::std::os::raw::c_uint = 8;
pub const IP_PKTOPTIONS: ::std::os::raw::c_uint = 9;
pub const IP_PMTUDISC: ::std::os::raw::c_uint = 10;
pub const IP_MTU_DISCOVER: ::std::os::raw::c_uint = 10;
pub const IP_RECVERR: ::std::os::raw::c_uint = 11;
pub const IP_RECVTTL: ::std::os::raw::c_uint = 12;
pub const IP_RECVTOS: ::std::os::raw::c_uint = 13;
pub const IP_MTU: ::std::os::raw::c_uint = 14;
pub const IP_FREEBIND: ::std::os::raw::c_uint = 15;
pub const IP_IPSEC_POLICY: ::std::os::raw::c_uint = 16;
pub const IP_XFRM_POLICY: ::std::os::raw::c_uint = 17;
pub const IP_PASSSEC: ::std::os::raw::c_uint = 18;
pub const IP_TRANSPARENT: ::std::os::raw::c_uint = 19;
pub const IP_ORIGDSTADDR: ::std::os::raw::c_uint = 20;
pub const IP_RECVORIGDSTADDR: ::std::os::raw::c_uint = 20;
pub const IP_MINTTL: ::std::os::raw::c_uint = 21;
pub const IP_NODEFRAG: ::std::os::raw::c_uint = 22;
pub const IP_CHECKSUM: ::std::os::raw::c_uint = 23;
pub const IP_BIND_ADDRESS_NO_PORT: ::std::os::raw::c_uint = 24;
pub const IP_PMTUDISC_DONT: ::std::os::raw::c_uint = 0;
pub const IP_PMTUDISC_WANT: ::std::os::raw::c_uint = 1;
pub const IP_PMTUDISC_DO: ::std::os::raw::c_uint = 2;
pub const IP_PMTUDISC_PROBE: ::std::os::raw::c_uint = 3;
pub const IP_PMTUDISC_INTERFACE: ::std::os::raw::c_uint = 4;
pub const IP_PMTUDISC_OMIT: ::std::os::raw::c_uint = 5;
pub const SOL_IP: ::std::os::raw::c_uint = 0;
pub const IP_DEFAULT_MULTICAST_TTL: ::std::os::raw::c_uint = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: ::std::os::raw::c_uint = 1;
pub const IP_MAX_MEMBERSHIPS: ::std::os::raw::c_uint = 20;
pub const IPV6_ADDRFORM: ::std::os::raw::c_uint = 1;
pub const IPV6_2292PKTINFO: ::std::os::raw::c_uint = 2;
pub const IPV6_2292HOPOPTS: ::std::os::raw::c_uint = 3;
pub const IPV6_2292DSTOPTS: ::std::os::raw::c_uint = 4;
pub const IPV6_2292RTHDR: ::std::os::raw::c_uint = 5;
pub const IPV6_2292PKTOPTIONS: ::std::os::raw::c_uint = 6;
pub const IPV6_CHECKSUM: ::std::os::raw::c_uint = 7;
pub const IPV6_2292HOPLIMIT: ::std::os::raw::c_uint = 8;
pub const IPV6_NEXTHOP: ::std::os::raw::c_uint = 9;
pub const IPV6_AUTHHDR: ::std::os::raw::c_uint = 10;
pub const IPV6_UNICAST_HOPS: ::std::os::raw::c_uint = 16;
pub const IPV6_MULTICAST_IF: ::std::os::raw::c_uint = 17;
pub const IPV6_MULTICAST_HOPS: ::std::os::raw::c_uint = 18;
pub const IPV6_MULTICAST_LOOP: ::std::os::raw::c_uint = 19;
pub const IPV6_JOIN_GROUP: ::std::os::raw::c_uint = 20;
pub const IPV6_LEAVE_GROUP: ::std::os::raw::c_uint = 21;
pub const IPV6_ROUTER_ALERT: ::std::os::raw::c_uint = 22;
pub const IPV6_MTU_DISCOVER: ::std::os::raw::c_uint = 23;
pub const IPV6_MTU: ::std::os::raw::c_uint = 24;
pub const IPV6_RECVERR: ::std::os::raw::c_uint = 25;
pub const IPV6_V6ONLY: ::std::os::raw::c_uint = 26;
pub const IPV6_JOIN_ANYCAST: ::std::os::raw::c_uint = 27;
pub const IPV6_LEAVE_ANYCAST: ::std::os::raw::c_uint = 28;
pub const IPV6_IPSEC_POLICY: ::std::os::raw::c_uint = 34;
pub const IPV6_XFRM_POLICY: ::std::os::raw::c_uint = 35;
pub const IPV6_HDRINCL: ::std::os::raw::c_uint = 36;
pub const IPV6_RECVPKTINFO: ::std::os::raw::c_uint = 49;
pub const IPV6_PKTINFO: ::std::os::raw::c_uint = 50;
pub const IPV6_RECVHOPLIMIT: ::std::os::raw::c_uint = 51;
pub const IPV6_HOPLIMIT: ::std::os::raw::c_uint = 52;
pub const IPV6_RECVHOPOPTS: ::std::os::raw::c_uint = 53;
pub const IPV6_HOPOPTS: ::std::os::raw::c_uint = 54;
pub const IPV6_RTHDRDSTOPTS: ::std::os::raw::c_uint = 55;
pub const IPV6_RECVRTHDR: ::std::os::raw::c_uint = 56;
pub const IPV6_RTHDR: ::std::os::raw::c_uint = 57;
pub const IPV6_RECVDSTOPTS: ::std::os::raw::c_uint = 58;
pub const IPV6_DSTOPTS: ::std::os::raw::c_uint = 59;
pub const IPV6_RECVPATHMTU: ::std::os::raw::c_uint = 60;
pub const IPV6_PATHMTU: ::std::os::raw::c_uint = 61;
pub const IPV6_DONTFRAG: ::std::os::raw::c_uint = 62;
pub const IPV6_RECVTCLASS: ::std::os::raw::c_uint = 66;
pub const IPV6_TCLASS: ::std::os::raw::c_uint = 67;
pub const IPV6_ADD_MEMBERSHIP: ::std::os::raw::c_uint = 20;
pub const IPV6_DROP_MEMBERSHIP: ::std::os::raw::c_uint = 21;
pub const IPV6_RXHOPOPTS: ::std::os::raw::c_uint = 54;
pub const IPV6_RXDSTOPTS: ::std::os::raw::c_uint = 59;
pub const IPV6_PMTUDISC_DONT: ::std::os::raw::c_uint = 0;
pub const IPV6_PMTUDISC_WANT: ::std::os::raw::c_uint = 1;
pub const IPV6_PMTUDISC_DO: ::std::os::raw::c_uint = 2;
pub const IPV6_PMTUDISC_PROBE: ::std::os::raw::c_uint = 3;
pub const IPV6_PMTUDISC_INTERFACE: ::std::os::raw::c_uint = 4;
pub const IPV6_PMTUDISC_OMIT: ::std::os::raw::c_uint = 5;
pub const SOL_IPV6: ::std::os::raw::c_uint = 41;
pub const SOL_ICMPV6: ::std::os::raw::c_uint = 58;
pub const IPV6_RTHDR_LOOSE: ::std::os::raw::c_uint = 0;
pub const IPV6_RTHDR_STRICT: ::std::os::raw::c_uint = 1;
pub const IPV6_RTHDR_TYPE_0: ::std::os::raw::c_uint = 0;
pub const IN_CLASSA_NET: ::std::os::raw::c_uint = 4278190080;
pub const IN_CLASSA_NSHIFT: ::std::os::raw::c_uint = 24;
pub const IN_CLASSA_HOST: ::std::os::raw::c_uint = 16777215;
pub const IN_CLASSA_MAX: ::std::os::raw::c_uint = 128;
pub const IN_CLASSB_NET: ::std::os::raw::c_uint = 4294901760;
pub const IN_CLASSB_NSHIFT: ::std::os::raw::c_uint = 16;
pub const IN_CLASSB_HOST: ::std::os::raw::c_uint = 65535;
pub const IN_CLASSB_MAX: ::std::os::raw::c_uint = 65536;
pub const IN_CLASSC_NET: ::std::os::raw::c_uint = 4294967040;
pub const IN_CLASSC_NSHIFT: ::std::os::raw::c_uint = 8;
pub const IN_CLASSC_HOST: ::std::os::raw::c_uint = 255;
pub const IN_LOOPBACKNET: ::std::os::raw::c_uint = 127;
pub const INET_ADDRSTRLEN: ::std::os::raw::c_uint = 16;
pub const INET6_ADDRSTRLEN: ::std::os::raw::c_uint = 46;
pub const _NETINET_TCP_H: ::std::os::raw::c_uint = 1;
pub const TCP_NODELAY: ::std::os::raw::c_uint = 1;
pub const TCP_MAXSEG: ::std::os::raw::c_uint = 2;
pub const TCP_CORK: ::std::os::raw::c_uint = 3;
pub const TCP_KEEPIDLE: ::std::os::raw::c_uint = 4;
pub const TCP_KEEPINTVL: ::std::os::raw::c_uint = 5;
pub const TCP_KEEPCNT: ::std::os::raw::c_uint = 6;
pub const TCP_SYNCNT: ::std::os::raw::c_uint = 7;
pub const TCP_LINGER2: ::std::os::raw::c_uint = 8;
pub const TCP_DEFER_ACCEPT: ::std::os::raw::c_uint = 9;
pub const TCP_WINDOW_CLAMP: ::std::os::raw::c_uint = 10;
pub const TCP_INFO: ::std::os::raw::c_uint = 11;
pub const TCP_QUICKACK: ::std::os::raw::c_uint = 12;
pub const TCP_CONGESTION: ::std::os::raw::c_uint = 13;
pub const TCP_MD5SIG: ::std::os::raw::c_uint = 14;
pub const TCP_COOKIE_TRANSACTIONS: ::std::os::raw::c_uint = 15;
pub const TCP_THIN_LINEAR_TIMEOUTS: ::std::os::raw::c_uint = 16;
pub const TCP_THIN_DUPACK: ::std::os::raw::c_uint = 17;
pub const TCP_USER_TIMEOUT: ::std::os::raw::c_uint = 18;
pub const TCP_REPAIR: ::std::os::raw::c_uint = 19;
pub const TCP_REPAIR_QUEUE: ::std::os::raw::c_uint = 20;
pub const TCP_QUEUE_SEQ: ::std::os::raw::c_uint = 21;
pub const TCP_REPAIR_OPTIONS: ::std::os::raw::c_uint = 22;
pub const TCP_FASTOPEN: ::std::os::raw::c_uint = 23;
pub const TCP_TIMESTAMP: ::std::os::raw::c_uint = 24;
pub const TCP_NOTSENT_LOWAT: ::std::os::raw::c_uint = 25;
pub const TCP_CC_INFO: ::std::os::raw::c_uint = 26;
pub const TCP_SAVE_SYN: ::std::os::raw::c_uint = 27;
pub const TCP_SAVED_SYN: ::std::os::raw::c_uint = 28;
pub const TH_FIN: ::std::os::raw::c_uint = 1;
pub const TH_SYN: ::std::os::raw::c_uint = 2;
pub const TH_RST: ::std::os::raw::c_uint = 4;
pub const TH_PUSH: ::std::os::raw::c_uint = 8;
pub const TH_ACK: ::std::os::raw::c_uint = 16;
pub const TCPOPT_EOL: ::std::os::raw::c_uint = 0;
pub const TCPOPT_NOP: ::std::os::raw::c_uint = 1;
pub const TCPOPT_MAXSEG: ::std::os::raw::c_uint = 2;
pub const TCPOLEN_MAXSEG: ::std::os::raw::c_uint = 4;
pub const TCPOPT_WINDOW: ::std::os::raw::c_uint = 3;
pub const TCPOLEN_WINDOW: ::std::os::raw::c_uint = 3;
pub const TCPOPT_SACK_PERMITTED: ::std::os::raw::c_uint = 4;
pub const TCPOLEN_SACK_PERMITTED: ::std::os::raw::c_uint = 2;
pub const TCPOPT_SACK: ::std::os::raw::c_uint = 5;
pub const TCPOPT_TIMESTAMP: ::std::os::raw::c_uint = 8;
pub const TCPOLEN_TIMESTAMP: ::std::os::raw::c_uint = 10;
pub const TCPOLEN_TSTAMP_APPA: ::std::os::raw::c_uint = 12;
pub const TCPOPT_TSTAMP_HDR: ::std::os::raw::c_uint = 16844810;
pub const TCP_MSS: ::std::os::raw::c_uint = 512;
pub const TCP_MAXWIN: ::std::os::raw::c_uint = 65535;
pub const TCP_MAX_WINSHIFT: ::std::os::raw::c_uint = 14;
pub const SOL_TCP: ::std::os::raw::c_uint = 6;
pub const TCPI_OPT_TIMESTAMPS: ::std::os::raw::c_uint = 1;
pub const TCPI_OPT_SACK: ::std::os::raw::c_uint = 2;
pub const TCPI_OPT_WSCALE: ::std::os::raw::c_uint = 4;
pub const TCPI_OPT_ECN: ::std::os::raw::c_uint = 8;
pub const TCPI_OPT_ECN_SEEN: ::std::os::raw::c_uint = 16;
pub const TCPI_OPT_SYN_DATA: ::std::os::raw::c_uint = 32;
pub const TCP_MD5SIG_MAXKEYLEN: ::std::os::raw::c_uint = 80;
pub const TCP_COOKIE_MIN: ::std::os::raw::c_uint = 8;
pub const TCP_COOKIE_MAX: ::std::os::raw::c_uint = 16;
pub const TCP_COOKIE_PAIR_SIZE: ::std::os::raw::c_uint = 32;
pub const TCP_COOKIE_IN_ALWAYS: ::std::os::raw::c_uint = 1;
pub const TCP_COOKIE_OUT_NEVER: ::std::os::raw::c_uint = 2;
pub const TCP_S_DATA_IN: ::std::os::raw::c_uint = 4;
pub const TCP_S_DATA_OUT: ::std::os::raw::c_uint = 8;
pub const TCP_MSS_DEFAULT: ::std::os::raw::c_uint = 536;
pub const TCP_MSS_DESIRED: ::std::os::raw::c_uint = 1220;
pub const _ARPA_INET_H: ::std::os::raw::c_uint = 1;
pub const _NETDB_H: ::std::os::raw::c_uint = 1;
pub const _RPC_NETDB_H: ::std::os::raw::c_uint = 1;
pub const _PATH_HEQUIV: &'static [u8; 17usize] = b"/etc/hosts.equiv\x00";
pub const _PATH_HOSTS: &'static [u8; 11usize] = b"/etc/hosts\x00";
pub const _PATH_NETWORKS: &'static [u8; 14usize] = b"/etc/networks\x00";
pub const _PATH_NSSWITCH_CONF: &'static [u8; 19usize] =
    b"/etc/nsswitch.conf\x00";
pub const _PATH_PROTOCOLS: &'static [u8; 15usize] = b"/etc/protocols\x00";
pub const HOST_NOT_FOUND: ::std::os::raw::c_uint = 1;
pub const TRY_AGAIN: ::std::os::raw::c_uint = 2;
pub const NO_RECOVERY: ::std::os::raw::c_uint = 3;
pub const NO_DATA: ::std::os::raw::c_uint = 4;
pub const NETDB_INTERNAL: ::std::os::raw::c_int = -1;
pub const NETDB_SUCCESS: ::std::os::raw::c_uint = 0;
pub const NO_ADDRESS: ::std::os::raw::c_uint = 4;
pub const IPPORT_RESERVED: ::std::os::raw::c_uint = 1024;
pub const AI_PASSIVE: ::std::os::raw::c_uint = 1;
pub const AI_CANONNAME: ::std::os::raw::c_uint = 2;
pub const AI_NUMERICHOST: ::std::os::raw::c_uint = 4;
pub const AI_V4MAPPED: ::std::os::raw::c_uint = 8;
pub const AI_ALL: ::std::os::raw::c_uint = 16;
pub const AI_ADDRCONFIG: ::std::os::raw::c_uint = 32;
pub const AI_NUMERICSERV: ::std::os::raw::c_uint = 1024;
pub const EAI_BADFLAGS: ::std::os::raw::c_int = -1;
pub const EAI_NONAME: ::std::os::raw::c_int = -2;
pub const EAI_AGAIN: ::std::os::raw::c_int = -3;
pub const EAI_FAIL: ::std::os::raw::c_int = -4;
pub const EAI_FAMILY: ::std::os::raw::c_int = -6;
pub const EAI_SOCKTYPE: ::std::os::raw::c_int = -7;
pub const EAI_SERVICE: ::std::os::raw::c_int = -8;
pub const EAI_MEMORY: ::std::os::raw::c_int = -10;
pub const EAI_SYSTEM: ::std::os::raw::c_int = -11;
pub const EAI_OVERFLOW: ::std::os::raw::c_int = -12;
pub const NI_MAXHOST: ::std::os::raw::c_uint = 1025;
pub const NI_MAXSERV: ::std::os::raw::c_uint = 32;
pub const NI_NUMERICHOST: ::std::os::raw::c_uint = 1;
pub const NI_NUMERICSERV: ::std::os::raw::c_uint = 2;
pub const NI_NOFQDN: ::std::os::raw::c_uint = 4;
pub const NI_NAMEREQD: ::std::os::raw::c_uint = 8;
pub const NI_DGRAM: ::std::os::raw::c_uint = 16;
pub const _TERMIOS_H: ::std::os::raw::c_uint = 1;
pub const NCCS: ::std::os::raw::c_uint = 32;
pub const _HAVE_STRUCT_TERMIOS_C_ISPEED: ::std::os::raw::c_uint = 1;
pub const VINTR: ::std::os::raw::c_uint = 0;
pub const VQUIT: ::std::os::raw::c_uint = 1;
pub const VERASE: ::std::os::raw::c_uint = 2;
pub const VKILL: ::std::os::raw::c_uint = 3;
pub const VEOF: ::std::os::raw::c_uint = 4;
pub const VTIME: ::std::os::raw::c_uint = 5;
pub const VMIN: ::std::os::raw::c_uint = 6;
pub const VSWTC: ::std::os::raw::c_uint = 7;
pub const VSTART: ::std::os::raw::c_uint = 8;
pub const VSTOP: ::std::os::raw::c_uint = 9;
pub const VSUSP: ::std::os::raw::c_uint = 10;
pub const VEOL: ::std::os::raw::c_uint = 11;
pub const VREPRINT: ::std::os::raw::c_uint = 12;
pub const VDISCARD: ::std::os::raw::c_uint = 13;
pub const VWERASE: ::std::os::raw::c_uint = 14;
pub const VLNEXT: ::std::os::raw::c_uint = 15;
pub const VEOL2: ::std::os::raw::c_uint = 16;
pub const IGNBRK: ::std::os::raw::c_uint = 1;
pub const BRKINT: ::std::os::raw::c_uint = 2;
pub const IGNPAR: ::std::os::raw::c_uint = 4;
pub const PARMRK: ::std::os::raw::c_uint = 8;
pub const INPCK: ::std::os::raw::c_uint = 16;
pub const ISTRIP: ::std::os::raw::c_uint = 32;
pub const INLCR: ::std::os::raw::c_uint = 64;
pub const IGNCR: ::std::os::raw::c_uint = 128;
pub const ICRNL: ::std::os::raw::c_uint = 256;
pub const IUCLC: ::std::os::raw::c_uint = 512;
pub const IXON: ::std::os::raw::c_uint = 1024;
pub const IXANY: ::std::os::raw::c_uint = 2048;
pub const IXOFF: ::std::os::raw::c_uint = 4096;
pub const IMAXBEL: ::std::os::raw::c_uint = 8192;
pub const IUTF8: ::std::os::raw::c_uint = 16384;
pub const OPOST: ::std::os::raw::c_uint = 1;
pub const OLCUC: ::std::os::raw::c_uint = 2;
pub const ONLCR: ::std::os::raw::c_uint = 4;
pub const OCRNL: ::std::os::raw::c_uint = 8;
pub const ONOCR: ::std::os::raw::c_uint = 16;
pub const ONLRET: ::std::os::raw::c_uint = 32;
pub const OFILL: ::std::os::raw::c_uint = 64;
pub const OFDEL: ::std::os::raw::c_uint = 128;
pub const NLDLY: ::std::os::raw::c_uint = 256;
pub const NL0: ::std::os::raw::c_uint = 0;
pub const NL1: ::std::os::raw::c_uint = 256;
pub const CRDLY: ::std::os::raw::c_uint = 1536;
pub const CR0: ::std::os::raw::c_uint = 0;
pub const CR1: ::std::os::raw::c_uint = 512;
pub const CR2: ::std::os::raw::c_uint = 1024;
pub const CR3: ::std::os::raw::c_uint = 1536;
pub const TABDLY: ::std::os::raw::c_uint = 6144;
pub const TAB0: ::std::os::raw::c_uint = 0;
pub const TAB1: ::std::os::raw::c_uint = 2048;
pub const TAB2: ::std::os::raw::c_uint = 4096;
pub const TAB3: ::std::os::raw::c_uint = 6144;
pub const BSDLY: ::std::os::raw::c_uint = 8192;
pub const BS0: ::std::os::raw::c_uint = 0;
pub const BS1: ::std::os::raw::c_uint = 8192;
pub const FFDLY: ::std::os::raw::c_uint = 32768;
pub const FF0: ::std::os::raw::c_uint = 0;
pub const FF1: ::std::os::raw::c_uint = 32768;
pub const VTDLY: ::std::os::raw::c_uint = 16384;
pub const VT0: ::std::os::raw::c_uint = 0;
pub const VT1: ::std::os::raw::c_uint = 16384;
pub const XTABS: ::std::os::raw::c_uint = 6144;
pub const CBAUD: ::std::os::raw::c_uint = 4111;
pub const B0: ::std::os::raw::c_uint = 0;
pub const B50: ::std::os::raw::c_uint = 1;
pub const B75: ::std::os::raw::c_uint = 2;
pub const B110: ::std::os::raw::c_uint = 3;
pub const B134: ::std::os::raw::c_uint = 4;
pub const B150: ::std::os::raw::c_uint = 5;
pub const B200: ::std::os::raw::c_uint = 6;
pub const B300: ::std::os::raw::c_uint = 7;
pub const B600: ::std::os::raw::c_uint = 8;
pub const B1200: ::std::os::raw::c_uint = 9;
pub const B1800: ::std::os::raw::c_uint = 10;
pub const B2400: ::std::os::raw::c_uint = 11;
pub const B4800: ::std::os::raw::c_uint = 12;
pub const B9600: ::std::os::raw::c_uint = 13;
pub const B19200: ::std::os::raw::c_uint = 14;
pub const B38400: ::std::os::raw::c_uint = 15;
pub const EXTA: ::std::os::raw::c_uint = 14;
pub const EXTB: ::std::os::raw::c_uint = 15;
pub const CSIZE: ::std::os::raw::c_uint = 48;
pub const CS5: ::std::os::raw::c_uint = 0;
pub const CS6: ::std::os::raw::c_uint = 16;
pub const CS7: ::std::os::raw::c_uint = 32;
pub const CS8: ::std::os::raw::c_uint = 48;
pub const CSTOPB: ::std::os::raw::c_uint = 64;
pub const CREAD: ::std::os::raw::c_uint = 128;
pub const PARENB: ::std::os::raw::c_uint = 256;
pub const PARODD: ::std::os::raw::c_uint = 512;
pub const HUPCL: ::std::os::raw::c_uint = 1024;
pub const CLOCAL: ::std::os::raw::c_uint = 2048;
pub const CBAUDEX: ::std::os::raw::c_uint = 4096;
pub const B57600: ::std::os::raw::c_uint = 4097;
pub const B115200: ::std::os::raw::c_uint = 4098;
pub const B230400: ::std::os::raw::c_uint = 4099;
pub const B460800: ::std::os::raw::c_uint = 4100;
pub const B500000: ::std::os::raw::c_uint = 4101;
pub const B576000: ::std::os::raw::c_uint = 4102;
pub const B921600: ::std::os::raw::c_uint = 4103;
pub const B1000000: ::std::os::raw::c_uint = 4104;
pub const B1152000: ::std::os::raw::c_uint = 4105;
pub const B1500000: ::std::os::raw::c_uint = 4106;
pub const B2000000: ::std::os::raw::c_uint = 4107;
pub const B2500000: ::std::os::raw::c_uint = 4108;
pub const B3000000: ::std::os::raw::c_uint = 4109;
pub const B3500000: ::std::os::raw::c_uint = 4110;
pub const B4000000: ::std::os::raw::c_uint = 4111;
pub const __MAX_BAUD: ::std::os::raw::c_uint = 4111;
pub const CIBAUD: ::std::os::raw::c_uint = 269418496;
pub const CMSPAR: ::std::os::raw::c_uint = 1073741824;
pub const CRTSCTS: ::std::os::raw::c_uint = 2147483648;
pub const ISIG: ::std::os::raw::c_uint = 1;
pub const ICANON: ::std::os::raw::c_uint = 2;
pub const XCASE: ::std::os::raw::c_uint = 4;
pub const ECHO: ::std::os::raw::c_uint = 8;
pub const ECHOE: ::std::os::raw::c_uint = 16;
pub const ECHOK: ::std::os::raw::c_uint = 32;
pub const ECHONL: ::std::os::raw::c_uint = 64;
pub const NOFLSH: ::std::os::raw::c_uint = 128;
pub const TOSTOP: ::std::os::raw::c_uint = 256;
pub const ECHOCTL: ::std::os::raw::c_uint = 512;
pub const ECHOPRT: ::std::os::raw::c_uint = 1024;
pub const ECHOKE: ::std::os::raw::c_uint = 2048;
pub const FLUSHO: ::std::os::raw::c_uint = 4096;
pub const PENDIN: ::std::os::raw::c_uint = 16384;
pub const IEXTEN: ::std::os::raw::c_uint = 32768;
pub const EXTPROC: ::std::os::raw::c_uint = 65536;
pub const TCOOFF: ::std::os::raw::c_uint = 0;
pub const TCOON: ::std::os::raw::c_uint = 1;
pub const TCIOFF: ::std::os::raw::c_uint = 2;
pub const TCION: ::std::os::raw::c_uint = 3;
pub const TCIFLUSH: ::std::os::raw::c_uint = 0;
pub const TCOFLUSH: ::std::os::raw::c_uint = 1;
pub const TCIOFLUSH: ::std::os::raw::c_uint = 2;
pub const TCSANOW: ::std::os::raw::c_uint = 0;
pub const TCSADRAIN: ::std::os::raw::c_uint = 1;
pub const TCSAFLUSH: ::std::os::raw::c_uint = 2;
pub const TTYDEF_IFLAG: ::std::os::raw::c_uint = 11554;
pub const TTYDEF_OFLAG: ::std::os::raw::c_uint = 6149;
pub const TTYDEF_LFLAG: ::std::os::raw::c_uint = 35355;
pub const TTYDEF_CFLAG: ::std::os::raw::c_uint = 1440;
pub const TTYDEF_SPEED: ::std::os::raw::c_uint = 13;
pub const CEOL: u8 = b'\x00';
pub const CERASE: ::std::os::raw::c_uint = 127;
pub const CSTATUS: u8 = b'\x00';
pub const CMIN: ::std::os::raw::c_uint = 1;
pub const CQUIT: ::std::os::raw::c_uint = 28;
pub const CTIME: ::std::os::raw::c_uint = 0;
pub const CBRK: u8 = b'\x00';
pub const _PWD_H: ::std::os::raw::c_uint = 1;
pub const NSS_BUFLEN_PASSWD: ::std::os::raw::c_uint = 1024;
pub const _SEMAPHORE_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_SEM_T: ::std::os::raw::c_uint = 32;
pub const _PTHREAD_H: ::std::os::raw::c_uint = 1;
pub const _SCHED_H: ::std::os::raw::c_uint = 1;
pub const SCHED_OTHER: ::std::os::raw::c_uint = 0;
pub const SCHED_FIFO: ::std::os::raw::c_uint = 1;
pub const SCHED_RR: ::std::os::raw::c_uint = 2;
pub const __defined_schedparam: ::std::os::raw::c_uint = 1;
pub const __CPU_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _TIME_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TIME_H: ::std::os::raw::c_uint = 1;
pub const CLOCK_REALTIME: ::std::os::raw::c_uint = 0;
pub const CLOCK_MONOTONIC: ::std::os::raw::c_uint = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: ::std::os::raw::c_uint = 2;
pub const CLOCK_THREAD_CPUTIME_ID: ::std::os::raw::c_uint = 3;
pub const CLOCK_MONOTONIC_RAW: ::std::os::raw::c_uint = 4;
pub const CLOCK_REALTIME_COARSE: ::std::os::raw::c_uint = 5;
pub const CLOCK_MONOTONIC_COARSE: ::std::os::raw::c_uint = 6;
pub const CLOCK_BOOTTIME: ::std::os::raw::c_uint = 7;
pub const CLOCK_REALTIME_ALARM: ::std::os::raw::c_uint = 8;
pub const CLOCK_BOOTTIME_ALARM: ::std::os::raw::c_uint = 9;
pub const CLOCK_TAI: ::std::os::raw::c_uint = 11;
pub const TIMER_ABSTIME: ::std::os::raw::c_uint = 1;
pub const TIME_UTC: ::std::os::raw::c_uint = 1;
pub const _XLOCALE_H: ::std::os::raw::c_uint = 1;
pub const _BITS_SETJMP_H: ::std::os::raw::c_uint = 1;
pub const PTHREAD_ONCE_INIT: ::std::os::raw::c_uint = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: ::std::os::raw::c_int = -1;
pub const _SIGSET_H_fns: ::std::os::raw::c_uint = 1;
pub const SIGHUP: ::std::os::raw::c_uint = 1;
pub const SIGINT: ::std::os::raw::c_uint = 2;
pub const SIGQUIT: ::std::os::raw::c_uint = 3;
pub const SIGILL: ::std::os::raw::c_uint = 4;
pub const SIGTRAP: ::std::os::raw::c_uint = 5;
pub const SIGABRT: ::std::os::raw::c_uint = 6;
pub const SIGIOT: ::std::os::raw::c_uint = 6;
pub const SIGBUS: ::std::os::raw::c_uint = 7;
pub const SIGFPE: ::std::os::raw::c_uint = 8;
pub const SIGKILL: ::std::os::raw::c_uint = 9;
pub const SIGUSR1: ::std::os::raw::c_uint = 10;
pub const SIGSEGV: ::std::os::raw::c_uint = 11;
pub const SIGUSR2: ::std::os::raw::c_uint = 12;
pub const SIGPIPE: ::std::os::raw::c_uint = 13;
pub const SIGALRM: ::std::os::raw::c_uint = 14;
pub const SIGTERM: ::std::os::raw::c_uint = 15;
pub const SIGSTKFLT: ::std::os::raw::c_uint = 16;
pub const SIGCHLD: ::std::os::raw::c_uint = 17;
pub const SIGCONT: ::std::os::raw::c_uint = 18;
pub const SIGSTOP: ::std::os::raw::c_uint = 19;
pub const SIGTSTP: ::std::os::raw::c_uint = 20;
pub const SIGTTIN: ::std::os::raw::c_uint = 21;
pub const SIGTTOU: ::std::os::raw::c_uint = 22;
pub const SIGURG: ::std::os::raw::c_uint = 23;
pub const SIGXCPU: ::std::os::raw::c_uint = 24;
pub const SIGXFSZ: ::std::os::raw::c_uint = 25;
pub const SIGVTALRM: ::std::os::raw::c_uint = 26;
pub const SIGPROF: ::std::os::raw::c_uint = 27;
pub const SIGWINCH: ::std::os::raw::c_uint = 28;
pub const SIGIO: ::std::os::raw::c_uint = 29;
pub const SIGPWR: ::std::os::raw::c_uint = 30;
pub const SIGSYS: ::std::os::raw::c_uint = 31;
pub const SIGUNUSED: ::std::os::raw::c_uint = 31;
pub const _NSIG: ::std::os::raw::c_uint = 65;
pub const __SIGRTMIN: ::std::os::raw::c_uint = 32;
pub const __SIGRTMAX: ::std::os::raw::c_uint = 64;
pub const __have_sigval_t: ::std::os::raw::c_uint = 1;
pub const __have_siginfo_t: ::std::os::raw::c_uint = 1;
pub const __SI_MAX_SIZE: ::std::os::raw::c_uint = 128;
pub const __have_sigevent_t: ::std::os::raw::c_uint = 1;
pub const __SIGEV_MAX_SIZE: ::std::os::raw::c_uint = 64;
pub const NSIG: ::std::os::raw::c_uint = 65;
pub const SA_NOCLDSTOP: ::std::os::raw::c_uint = 1;
pub const SA_NOCLDWAIT: ::std::os::raw::c_uint = 2;
pub const SA_SIGINFO: ::std::os::raw::c_uint = 4;
pub const SA_ONSTACK: ::std::os::raw::c_uint = 134217728;
pub const SA_RESTART: ::std::os::raw::c_uint = 268435456;
pub const SA_NODEFER: ::std::os::raw::c_uint = 1073741824;
pub const SA_RESETHAND: ::std::os::raw::c_uint = 2147483648;
pub const SA_INTERRUPT: ::std::os::raw::c_uint = 536870912;
pub const SA_NOMASK: ::std::os::raw::c_uint = 1073741824;
pub const SA_ONESHOT: ::std::os::raw::c_uint = 2147483648;
pub const SA_STACK: ::std::os::raw::c_uint = 134217728;
pub const SIG_BLOCK: ::std::os::raw::c_uint = 0;
pub const SIG_UNBLOCK: ::std::os::raw::c_uint = 1;
pub const SIG_SETMASK: ::std::os::raw::c_uint = 2;
pub const _BITS_SIGCONTEXT_H: ::std::os::raw::c_uint = 1;
pub const FP_XSTATE_MAGIC1: ::std::os::raw::c_uint = 1179670611;
pub const FP_XSTATE_MAGIC2: ::std::os::raw::c_uint = 1179670597;
pub const MINSIGSTKSZ: ::std::os::raw::c_uint = 2048;
pub const SIGSTKSZ: ::std::os::raw::c_uint = 8192;
pub const _SYS_UCONTEXT_H: ::std::os::raw::c_uint = 1;
pub const NGREG: ::std::os::raw::c_uint = 23;
pub const _BITS_SIGTHREAD_H: ::std::os::raw::c_uint = 1;
pub const UV_ONCE_INIT: ::std::os::raw::c_uint = 0;
pub const UV_FS_SYMLINK_DIR: ::std::os::raw::c_uint = 1;
pub const IOS_INLSIZE: ::std::os::raw::c_uint = 54;
pub const IOS_BUFSIZE: ::std::os::raw::c_uint = 131072;
pub const HT_N_INLINE: ::std::os::raw::c_uint = 32;
pub const PATHSEPSTRING: &'static [u8; 2usize] = b"/\x00";
pub const PATHLISTSEPSTRING: &'static [u8; 2usize] = b":\x00";
pub const _STRING_H: ::std::os::raw::c_uint = 1;
pub const AL_N_INLINE: ::std::os::raw::c_uint = 29;
pub const _SETJMP_H: ::std::os::raw::c_uint = 1;
pub const _MM_HINT_T0: ::std::os::raw::c_uint = 3;
pub const _MM_HINT_T1: ::std::os::raw::c_uint = 2;
pub const _MM_HINT_T2: ::std::os::raw::c_uint = 1;
pub const _MM_HINT_NTA: ::std::os::raw::c_uint = 0;
pub const _MM_EXCEPT_INVALID: ::std::os::raw::c_uint = 1;
pub const _MM_EXCEPT_DENORM: ::std::os::raw::c_uint = 2;
pub const _MM_EXCEPT_DIV_ZERO: ::std::os::raw::c_uint = 4;
pub const _MM_EXCEPT_OVERFLOW: ::std::os::raw::c_uint = 8;
pub const _MM_EXCEPT_UNDERFLOW: ::std::os::raw::c_uint = 16;
pub const _MM_EXCEPT_INEXACT: ::std::os::raw::c_uint = 32;
pub const _MM_EXCEPT_MASK: ::std::os::raw::c_uint = 63;
pub const _MM_MASK_INVALID: ::std::os::raw::c_uint = 128;
pub const _MM_MASK_DENORM: ::std::os::raw::c_uint = 256;
pub const _MM_MASK_DIV_ZERO: ::std::os::raw::c_uint = 512;
pub const _MM_MASK_OVERFLOW: ::std::os::raw::c_uint = 1024;
pub const _MM_MASK_UNDERFLOW: ::std::os::raw::c_uint = 2048;
pub const _MM_MASK_INEXACT: ::std::os::raw::c_uint = 4096;
pub const _MM_MASK_MASK: ::std::os::raw::c_uint = 8064;
pub const _MM_ROUND_NEAREST: ::std::os::raw::c_uint = 0;
pub const _MM_ROUND_DOWN: ::std::os::raw::c_uint = 8192;
pub const _MM_ROUND_UP: ::std::os::raw::c_uint = 16384;
pub const _MM_ROUND_TOWARD_ZERO: ::std::os::raw::c_uint = 24576;
pub const _MM_ROUND_MASK: ::std::os::raw::c_uint = 24576;
pub const _MM_FLUSH_ZERO_MASK: ::std::os::raw::c_uint = 32768;
pub const _MM_FLUSH_ZERO_ON: ::std::os::raw::c_uint = 32768;
pub const _MM_FLUSH_ZERO_OFF: ::std::os::raw::c_uint = 0;
pub const _MM_DENORMALS_ZERO_ON: ::std::os::raw::c_uint = 64;
pub const _MM_DENORMALS_ZERO_OFF: ::std::os::raw::c_uint = 0;
pub const _MM_DENORMALS_ZERO_MASK: ::std::os::raw::c_uint = 64;
pub const _MM_FROUND_TO_NEAREST_INT: ::std::os::raw::c_uint = 0;
pub const _MM_FROUND_TO_NEG_INF: ::std::os::raw::c_uint = 1;
pub const _MM_FROUND_TO_POS_INF: ::std::os::raw::c_uint = 2;
pub const _MM_FROUND_TO_ZERO: ::std::os::raw::c_uint = 3;
pub const _MM_FROUND_CUR_DIRECTION: ::std::os::raw::c_uint = 4;
pub const _MM_FROUND_RAISE_EXC: ::std::os::raw::c_uint = 0;
pub const _MM_FROUND_NO_EXC: ::std::os::raw::c_uint = 8;
pub const _MM_FROUND_NINT: ::std::os::raw::c_uint = 0;
pub const _MM_FROUND_FLOOR: ::std::os::raw::c_uint = 1;
pub const _MM_FROUND_CEIL: ::std::os::raw::c_uint = 2;
pub const _MM_FROUND_TRUNC: ::std::os::raw::c_uint = 3;
pub const _MM_FROUND_RINT: ::std::os::raw::c_uint = 4;
pub const _MM_FROUND_NEARBYINT: ::std::os::raw::c_uint = 12;
pub const _SIDD_UBYTE_OPS: ::std::os::raw::c_uint = 0;
pub const _SIDD_UWORD_OPS: ::std::os::raw::c_uint = 1;
pub const _SIDD_SBYTE_OPS: ::std::os::raw::c_uint = 2;
pub const _SIDD_SWORD_OPS: ::std::os::raw::c_uint = 3;
pub const _SIDD_CMP_EQUAL_ANY: ::std::os::raw::c_uint = 0;
pub const _SIDD_CMP_RANGES: ::std::os::raw::c_uint = 4;
pub const _SIDD_CMP_EQUAL_EACH: ::std::os::raw::c_uint = 8;
pub const _SIDD_CMP_EQUAL_ORDERED: ::std::os::raw::c_uint = 12;
pub const _SIDD_POSITIVE_POLARITY: ::std::os::raw::c_uint = 0;
pub const _SIDD_NEGATIVE_POLARITY: ::std::os::raw::c_uint = 16;
pub const _SIDD_MASKED_POSITIVE_POLARITY: ::std::os::raw::c_uint = 32;
pub const _SIDD_MASKED_NEGATIVE_POLARITY: ::std::os::raw::c_uint = 48;
pub const _SIDD_LEAST_SIGNIFICANT: ::std::os::raw::c_uint = 0;
pub const _SIDD_MOST_SIGNIFICANT: ::std::os::raw::c_uint = 64;
pub const _SIDD_BIT_MASK: ::std::os::raw::c_uint = 0;
pub const _SIDD_UNIT_MASK: ::std::os::raw::c_uint = 64;
pub const _CMP_EQ_OQ: ::std::os::raw::c_uint = 0;
pub const _CMP_LT_OS: ::std::os::raw::c_uint = 1;
pub const _CMP_LE_OS: ::std::os::raw::c_uint = 2;
pub const _CMP_UNORD_Q: ::std::os::raw::c_uint = 3;
pub const _CMP_NEQ_UQ: ::std::os::raw::c_uint = 4;
pub const _CMP_NLT_US: ::std::os::raw::c_uint = 5;
pub const _CMP_NLE_US: ::std::os::raw::c_uint = 6;
pub const _CMP_ORD_Q: ::std::os::raw::c_uint = 7;
pub const _CMP_EQ_UQ: ::std::os::raw::c_uint = 8;
pub const _CMP_NGE_US: ::std::os::raw::c_uint = 9;
pub const _CMP_NGT_US: ::std::os::raw::c_uint = 10;
pub const _CMP_FALSE_OQ: ::std::os::raw::c_uint = 11;
pub const _CMP_NEQ_OQ: ::std::os::raw::c_uint = 12;
pub const _CMP_GE_OS: ::std::os::raw::c_uint = 13;
pub const _CMP_GT_OS: ::std::os::raw::c_uint = 14;
pub const _CMP_TRUE_UQ: ::std::os::raw::c_uint = 15;
pub const _CMP_EQ_OS: ::std::os::raw::c_uint = 16;
pub const _CMP_LT_OQ: ::std::os::raw::c_uint = 17;
pub const _CMP_LE_OQ: ::std::os::raw::c_uint = 18;
pub const _CMP_UNORD_S: ::std::os::raw::c_uint = 19;
pub const _CMP_NEQ_US: ::std::os::raw::c_uint = 20;
pub const _CMP_NLT_UQ: ::std::os::raw::c_uint = 21;
pub const _CMP_NLE_UQ: ::std::os::raw::c_uint = 22;
pub const _CMP_ORD_S: ::std::os::raw::c_uint = 23;
pub const _CMP_EQ_US: ::std::os::raw::c_uint = 24;
pub const _CMP_NGE_UQ: ::std::os::raw::c_uint = 25;
pub const _CMP_NGT_UQ: ::std::os::raw::c_uint = 26;
pub const _CMP_FALSE_OS: ::std::os::raw::c_uint = 27;
pub const _CMP_NEQ_OS: ::std::os::raw::c_uint = 28;
pub const _CMP_GE_OQ: ::std::os::raw::c_uint = 29;
pub const _CMP_GT_OQ: ::std::os::raw::c_uint = 30;
pub const _CMP_TRUE_US: ::std::os::raw::c_uint = 31;
pub const _XBEGIN_STARTED: ::std::os::raw::c_int = -1;
pub const _XABORT_EXPLICIT: ::std::os::raw::c_uint = 1;
pub const _XABORT_RETRY: ::std::os::raw::c_uint = 2;
pub const _XABORT_CONFLICT: ::std::os::raw::c_uint = 4;
pub const _XABORT_CAPACITY: ::std::os::raw::c_uint = 8;
pub const _XABORT_DEBUG: ::std::os::raw::c_uint = 16;
pub const _XABORT_NESTED: ::std::os::raw::c_uint = 32;
pub const JL_GC_N_POOLS: ::std::os::raw::c_uint = 41;
pub const JL_MAX_BT_SIZE: ::std::os::raw::c_uint = 80000;
pub const JL_GC_STATE_WAITING: ::std::os::raw::c_uint = 1;
pub const JL_GC_STATE_SAFE: ::std::os::raw::c_uint = 2;
pub const JL_CPU_WAKE_NOOP: ::std::os::raw::c_uint = 1;
pub const jl_setjmp_name: &'static [u8; 12usize] = b"__sigsetjmp\x00";
pub const JL_LOG_NONE: ::std::os::raw::c_uint = 0;
pub const JL_LOG_USER: ::std::os::raw::c_uint = 1;
pub const JL_LOG_ALL: ::std::os::raw::c_uint = 2;
pub const JL_OPTIONS_CHECK_BOUNDS_DEFAULT: ::std::os::raw::c_uint = 0;
pub const JL_OPTIONS_CHECK_BOUNDS_ON: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_CHECK_BOUNDS_OFF: ::std::os::raw::c_uint = 2;
pub const JL_OPTIONS_COMPILE_DEFAULT: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_COMPILE_OFF: ::std::os::raw::c_uint = 0;
pub const JL_OPTIONS_COMPILE_ON: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_COMPILE_ALL: ::std::os::raw::c_uint = 2;
pub const JL_OPTIONS_COMPILE_MIN: ::std::os::raw::c_uint = 3;
pub const JL_OPTIONS_COLOR_ON: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_COLOR_OFF: ::std::os::raw::c_uint = 2;
pub const JL_OPTIONS_HISTORYFILE_ON: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_HISTORYFILE_OFF: ::std::os::raw::c_uint = 0;
pub const JL_OPTIONS_STARTUPFILE_ON: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_STARTUPFILE_OFF: ::std::os::raw::c_uint = 2;
pub const JL_OPTIONS_DEPWARN_OFF: ::std::os::raw::c_uint = 0;
pub const JL_OPTIONS_DEPWARN_ON: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_DEPWARN_ERROR: ::std::os::raw::c_uint = 2;
pub const JL_OPTIONS_FAST_MATH_ON: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_FAST_MATH_OFF: ::std::os::raw::c_uint = 2;
pub const JL_OPTIONS_FAST_MATH_DEFAULT: ::std::os::raw::c_uint = 0;
pub const JL_OPTIONS_HANDLE_SIGNALS_ON: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_HANDLE_SIGNALS_OFF: ::std::os::raw::c_uint = 0;
pub const JL_OPTIONS_USE_PRECOMPILED_YES: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_USE_PRECOMPILED_NO: ::std::os::raw::c_uint = 0;
pub const JL_OPTIONS_USE_COMPILECACHE_YES: ::std::os::raw::c_uint = 1;
pub const JL_OPTIONS_USE_COMPILECACHE_NO: ::std::os::raw::c_uint = 0;
pub const JULIA_VERSION_STRING: &'static [u8; 6usize] = b"0.5.0\x00";
pub const JULIA_VERSION_MAJOR: ::std::os::raw::c_uint = 0;
pub const JULIA_VERSION_MINOR: ::std::os::raw::c_uint = 5;
pub const JULIA_VERSION_PATCH: ::std::os::raw::c_uint = 0;
pub const JULIA_VERSION_IS_RELEASE: ::std::os::raw::c_uint = 1;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_1 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_1>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_1>() , 4usize);
}
impl Clone for _bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
pub type div_t = _bindgen_ty_1;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_2 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_2>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_2>() , 8usize);
}
impl Clone for _bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
pub type ldiv_t = _bindgen_ty_2;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_3 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_3>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_3>() , 8usize);
}
impl Clone for _bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type lldiv_t = _bindgen_ty_3;
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_4 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_4>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_4>() , 4usize);
}
impl Clone for _bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
pub type __fsid_t = _bindgen_ty_4;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_5 {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_5>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_5>() , 8usize);
}
impl Clone for _bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
pub type __sigset_t = _bindgen_ty_5;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize);
    assert_eq!(::std::mem::align_of::<timespec>() , 8usize);
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize);
    assert_eq!(::std::mem::align_of::<timeval>() , 8usize);
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6 {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6>() , 8usize);
}
impl Clone for _bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
pub type fd_set = _bindgen_ty_6;
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<pthread_attr_t>() , 56usize);
    assert_eq!(::std::mem::align_of::<pthread_attr_t>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(::std::mem::size_of::<__pthread_internal_list>() , 16usize);
    assert_eq!(::std::mem::align_of::<__pthread_internal_list>() , 8usize);
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
pub union _bindgen_ty_7 {
    pub __data: _bindgen_ty_7___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_7___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_7___pthread_mutex_s() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_7___pthread_mutex_s>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_7___pthread_mutex_s>() ,
               8usize);
}
impl Clone for _bindgen_ty_7___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_7>() , 40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_7>() , 8usize);
}
pub type pthread_mutex_t = _bindgen_ty_7;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_8 {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_8() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_8>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_8>() , 4usize);
}
impl Clone for _bindgen_ty_8 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_mutexattr_t = _bindgen_ty_8;
#[repr(C)]
pub union _bindgen_ty_9 {
    pub __data: _bindgen_ty_9__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_9__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_9__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9__bindgen_ty_1>() ,
               48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_9__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_9() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9>() , 48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9>() , 8usize);
}
pub type pthread_cond_t = _bindgen_ty_9;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_10 {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_10() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10>() , 4usize);
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_condattr_t = _bindgen_ty_10;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
pub union _bindgen_ty_11 {
    pub __data: _bindgen_ty_11__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11__bindgen_ty_1>() ,
               56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_11__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_11() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11>() , 56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11>() , 8usize);
}
pub type pthread_rwlock_t = _bindgen_ty_11;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_12 {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_12() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12>() , 8usize);
}
impl Clone for _bindgen_ty_12 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_rwlockattr_t = _bindgen_ty_12;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_13 {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_13() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13>() , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13>() , 8usize);
}
impl Clone for _bindgen_ty_13 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_barrier_t = _bindgen_ty_13;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_14 {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14>() , 4usize);
}
impl Clone for _bindgen_ty_14 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_barrierattr_t = _bindgen_ty_14;
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(::std::mem::size_of::<random_data>() , 48usize);
    assert_eq!(::std::mem::align_of::<random_data>() , 8usize);
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(::std::mem::size_of::<drand48_data>() , 24usize);
    assert_eq!(::std::mem::align_of::<drand48_data>() , 8usize);
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *const ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn __assert_fail(__assertion: *const ::std::os::raw::c_char,
                         __file: *const ::std::os::raw::c_char,
                         __line: ::std::os::raw::c_uint,
                         __function: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __assert_perror_fail(__errnum: ::std::os::raw::c_int,
                                __file: *const ::std::os::raw::c_char,
                                __line: ::std::os::raw::c_uint,
                                __function: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __assert(__assertion: *const ::std::os::raw::c_char,
                    __file: *const ::std::os::raw::c_char,
                    __line: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_15 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl Clone for _bindgen_ty_15 {
    fn clone(&self) -> Self { *self }
}
pub type max_align_t = _bindgen_ty_15;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn expl(__x: f64) -> f64;
}
extern "C" {
    pub fn __expl(__x: f64) -> f64;
}
extern "C" {
    pub fn frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn logl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logl(__x: f64) -> f64;
}
extern "C" {
    pub fn log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn __floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn __significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn __truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    #[link_name = "signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_16 = _bindgen_ty_16::FP_NAN;
pub const FP_INFINITE: _bindgen_ty_16 = _bindgen_ty_16::FP_INFINITE;
pub const FP_ZERO: _bindgen_ty_16 = _bindgen_ty_16::FP_ZERO;
pub const FP_SUBNORMAL: _bindgen_ty_16 = _bindgen_ty_16::FP_SUBNORMAL;
pub const FP_NORMAL: _bindgen_ty_16 = _bindgen_ty_16::FP_NORMAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_16 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
pub const _IEEE_: _bindgen_ty_17 = _bindgen_ty_17::_IEEE_;
pub const _SVID_: _bindgen_ty_17 = _bindgen_ty_17::_SVID_;
pub const _XOPEN_: _bindgen_ty_17 = _bindgen_ty_17::_XOPEN_;
pub const _POSIX_: _bindgen_ty_17 = _bindgen_ty_17::_POSIX_;
pub const _ISOC_: _bindgen_ty_17 = _bindgen_ty_17::_ISOC_;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_17 {
    _IEEE_ = -1,
    _SVID_ = 0,
    _XOPEN_ = 1,
    _POSIX_ = 2,
    _ISOC_ = 3,
}
pub use self::_bindgen_ty_17 as _LIB_VERSION_TYPE;
extern "C" {
    #[link_name = "_LIB_VERSION"]
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(::std::mem::size_of::<exception>() , 40usize);
    assert_eq!(::std::mem::align_of::<exception>() , 8usize);
}
impl Clone for exception {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn matherr(__exc: *mut exception) -> ::std::os::raw::c_int;
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_18 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_18() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18>() , 8usize);
}
impl Clone for _bindgen_ty_18 {
    fn clone(&self) -> Self { *self }
}
pub type imaxdiv_t = _bindgen_ty_18;
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
}
pub type bool_t = ::std::os::raw::c_int;
pub type byte_t = ::std::os::raw::c_uchar;
pub type uint_t = u64;
pub type int_t = i64;
pub const T_INT8: _bindgen_ty_19 = _bindgen_ty_19::T_INT8;
pub const T_UINT8: _bindgen_ty_19 = _bindgen_ty_19::T_UINT8;
pub const T_INT16: _bindgen_ty_19 = _bindgen_ty_19::T_INT16;
pub const T_UINT16: _bindgen_ty_19 = _bindgen_ty_19::T_UINT16;
pub const T_INT32: _bindgen_ty_19 = _bindgen_ty_19::T_INT32;
pub const T_UINT32: _bindgen_ty_19 = _bindgen_ty_19::T_UINT32;
pub const T_INT64: _bindgen_ty_19 = _bindgen_ty_19::T_INT64;
pub const T_UINT64: _bindgen_ty_19 = _bindgen_ty_19::T_UINT64;
pub const T_FLOAT: _bindgen_ty_19 = _bindgen_ty_19::T_FLOAT;
pub const T_DOUBLE: _bindgen_ty_19 = _bindgen_ty_19::T_DOUBLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_19 {
    T_INT8 = 0,
    T_UINT8 = 1,
    T_INT16 = 2,
    T_UINT16 = 3,
    T_INT32 = 4,
    T_UINT32 = 5,
    T_INT64 = 6,
    T_UINT64 = 7,
    T_FLOAT = 8,
    T_DOUBLE = 9,
}
pub use self::_bindgen_ty_19 as numerictype_t;
extern "C" {
    pub fn uint2str(dest: *mut ::std::os::raw::c_char, len: usize, num: u64,
                    base: u32) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn str2int(str: *mut ::std::os::raw::c_char, len: usize,
                   res: *mut i64, base: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_base(c: ::std::os::raw::c_char,
                        base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn conv_to_double(data: *mut ::std::os::raw::c_void,
                          tag: numerictype_t) -> f64;
}
extern "C" {
    pub fn conv_to_int64(data: *mut ::std::os::raw::c_void,
                         tag: numerictype_t) -> i64;
}
extern "C" {
    pub fn conv_to_uint64(data: *mut ::std::os::raw::c_void,
                          tag: numerictype_t) -> u64;
}
extern "C" {
    pub fn conv_to_int32(data: *mut ::std::os::raw::c_void,
                         tag: numerictype_t) -> i32;
}
extern "C" {
    pub fn conv_to_uint32(data: *mut ::std::os::raw::c_void,
                          tag: numerictype_t) -> u32;
}
extern "C" {
    pub fn cmp_same_lt(a: *mut ::std::os::raw::c_void,
                       b: *mut ::std::os::raw::c_void, tag: numerictype_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmp_same_eq(a: *mut ::std::os::raw::c_void,
                       b: *mut ::std::os::raw::c_void, tag: numerictype_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmp_lt(a: *mut ::std::os::raw::c_void, atag: numerictype_t,
                  b: *mut ::std::os::raw::c_void, btag: numerictype_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmp_eq(a: *mut ::std::os::raw::c_void, atag: numerictype_t,
                  b: *mut ::std::os::raw::c_void, btag: numerictype_t,
                  equalnans: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u8_toucs(dest: *mut u32, sz: usize,
                    src: *const ::std::os::raw::c_char, srcsz: usize)
     -> usize;
}
extern "C" {
    pub fn u8_toutf8(dest: *mut ::std::os::raw::c_char, sz: usize,
                     src: *const u32, srcsz: usize) -> usize;
}
extern "C" {
    pub fn u8_wc_toutf8(dest: *mut ::std::os::raw::c_char, ch: u32) -> usize;
}
extern "C" {
    pub fn u8_offset(str: *const ::std::os::raw::c_char, charnum: usize)
     -> usize;
}
extern "C" {
    pub fn u8_charnum(str: *const ::std::os::raw::c_char, offset: usize)
     -> usize;
}
extern "C" {
    pub fn u8_nextchar(s: *const ::std::os::raw::c_char, i: *mut usize)
     -> u32;
}
extern "C" {
    pub fn u8_nextmemchar(s: *const ::std::os::raw::c_char, i: *mut usize)
     -> u32;
}
extern "C" {
    pub fn u8_inc(s: *const ::std::os::raw::c_char, i: *mut usize);
}
extern "C" {
    pub fn u8_dec(s: *const ::std::os::raw::c_char, i: *mut usize);
}
extern "C" {
    pub fn u8_seqlen(s: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn u8_charlen(ch: u32) -> usize;
}
extern "C" {
    pub fn read_escape_control_char(c: ::std::os::raw::c_char)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn u8_read_escape_sequence(src: *const ::std::os::raw::c_char,
                                   ssz: usize, dest: *mut u32) -> usize;
}
extern "C" {
    pub fn u8_escape_wchar(buf: *mut ::std::os::raw::c_char, sz: usize,
                           ch: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u8_escape(buf: *mut ::std::os::raw::c_char, sz: usize,
                     src: *const ::std::os::raw::c_char, pi: *mut usize,
                     end: usize, escape_quotes: ::std::os::raw::c_int,
                     ascii: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn octal_digit(c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hex_digit(c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u8_memchr(s: *const ::std::os::raw::c_char, ch: u32, sz: usize,
                     charn: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn u8_memrchr(s: *const ::std::os::raw::c_char, ch: u32, sz: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn u8_strwidth(s: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn u8_vprintf(fmt: *const ::std::os::raw::c_char,
                      ap: *mut __va_list_tag) -> usize;
}
extern "C" {
    pub fn u8_printf(fmt: *const ::std::os::raw::c_char, ...) -> usize;
}
extern "C" {
    pub fn u8_isvalid(str: *const ::std::os::raw::c_char, length: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::std::mem::size_of::<_IO_FILE>() , 216usize);
    assert_eq!(::std::mem::align_of::<_IO_FILE>() , 8usize);
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_20 {
    pub __count: ::std::os::raw::c_int,
    pub __value: _bindgen_ty_20__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_20__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_20__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_20__bindgen_ty_1>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_20__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_20__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_20() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_20>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_20>() , 4usize);
}
impl Clone for _bindgen_ty_20 {
    fn clone(&self) -> Self { *self }
}
pub type __mbstate_t = _bindgen_ty_20;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_21 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_21() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_21>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_21>() , 8usize);
}
impl Clone for _bindgen_ty_21 {
    fn clone(&self) -> Self { *self }
}
pub type _G_fpos_t = _bindgen_ty_21;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_22 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_22() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_22>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_22>() , 8usize);
}
impl Clone for _bindgen_ty_22 {
    fn clone(&self) -> Self { *self }
}
pub type _G_fpos64_t = _bindgen_ty_22;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t([u8; 0]);
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::std::mem::size_of::<_IO_marker>() , 24usize);
    assert_eq!(::std::mem::align_of::<_IO_marker>() , 8usize);
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus([u8; 0]);
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: usize) -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type cookie_read_function_t = __io_read_fn;
pub type cookie_write_function_t = __io_write_fn;
pub type cookie_seek_function_t = __io_seek_fn;
pub type cookie_close_function_t = __io_close_fn;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_23 {
    pub read: __io_read_fn,
    pub write: __io_write_fn,
    pub seek: __io_seek_fn,
    pub close: __io_close_fn,
}
#[test]
fn bindgen_test_layout__bindgen_ty_23() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_23>() , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_23>() , 8usize);
}
impl Clone for _bindgen_ty_23 {
    fn clone(&self) -> Self { *self }
}
pub type _IO_cookie_io_functions_t = _bindgen_ty_23;
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_file([u8; 0]);
extern "C" {
    pub fn _IO_cookie_init(__cfile: *mut _IO_cookie_file,
                           __read_write: ::std::os::raw::c_int,
                           __cookie: *mut ::std::os::raw::c_void,
                           __fns: _IO_cookie_io_functions_t);
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: *mut __va_list_tag,
                       arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                     __format: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_sscanf"]
    pub fn sscanf1(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vfscanf"]
    pub fn vfscanf1(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vsscanf"]
    pub fn vsscanf1(__s: *const ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __n: usize, __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: usize, __n: usize, __stream: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(::std::mem::size_of::<stat>() , 144usize);
    assert_eq!(::std::mem::align_of::<stat>() , 8usize);
}
impl Clone for stat {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(__fd: ::std::os::raw::c_int,
                   __file: *const ::std::os::raw::c_char, __buf: *mut stat,
                   __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(__fd: ::std::os::raw::c_int,
                    __file: *const ::std::os::raw::c_char, __mode: __mode_t,
                    __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(__fd: ::std::os::raw::c_int,
                   __path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(__path: *const ::std::os::raw::c_char, __mode: __mode_t,
                 __dev: __dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(__fd: ::std::os::raw::c_int,
                   __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                   __dev: __dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(__fd: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(__fd: ::std::os::raw::c_int,
                     __path: *const ::std::os::raw::c_char,
                     __times: *mut timespec, __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstat(__ver: ::std::os::raw::c_int,
                    __fildes: ::std::os::raw::c_int, __stat_buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xstat(__ver: ::std::os::raw::c_int,
                   __filename: *const ::std::os::raw::c_char,
                   __stat_buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __lxstat(__ver: ::std::os::raw::c_int,
                    __filename: *const ::std::os::raw::c_char,
                    __stat_buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstatat(__ver: ::std::os::raw::c_int,
                      __fildes: ::std::os::raw::c_int,
                      __filename: *const ::std::os::raw::c_char,
                      __stat_buf: *mut stat, __flag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknod(__ver: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                    __dev: *mut __dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknodat(__ver: ::std::os::raw::c_int,
                      __fd: ::std::os::raw::c_int,
                      __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                      __dev: *mut __dev_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(::std::mem::size_of::<flock>() , 32usize);
    assert_eq!(::std::mem::align_of::<flock>() , 8usize);
}
impl Clone for flock {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn fcntl(__fd: ::std::os::raw::c_int,
                 __cmd: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(__file: *const ::std::os::raw::c_char,
                __oflag: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(__fd: ::std::os::raw::c_int,
                  __file: *const ::std::os::raw::c_char,
                  __oflag: ::std::os::raw::c_int, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(__fd: ::std::os::raw::c_int, __cmd: ::std::os::raw::c_int,
                 __len: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(__fd: ::std::os::raw::c_int, __offset: off_t,
                         __len: off_t, __advise: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(__fd: ::std::os::raw::c_int, __offset: off_t,
                           __len: off_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(::std::mem::size_of::<dirent>() , 280usize);
    assert_eq!(::std::mem::align_of::<dirent>() , 8usize);
}
pub const DT_UNKNOWN: _bindgen_ty_24 = _bindgen_ty_24::DT_UNKNOWN;
pub const DT_FIFO: _bindgen_ty_24 = _bindgen_ty_24::DT_FIFO;
pub const DT_CHR: _bindgen_ty_24 = _bindgen_ty_24::DT_CHR;
pub const DT_DIR: _bindgen_ty_24 = _bindgen_ty_24::DT_DIR;
pub const DT_BLK: _bindgen_ty_24 = _bindgen_ty_24::DT_BLK;
pub const DT_REG: _bindgen_ty_24 = _bindgen_ty_24::DT_REG;
pub const DT_LNK: _bindgen_ty_24 = _bindgen_ty_24::DT_LNK;
pub const DT_SOCK: _bindgen_ty_24 = _bindgen_ty_24::DT_SOCK;
pub const DT_WHT: _bindgen_ty_24 = _bindgen_ty_24::DT_WHT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_24 {
    DT_UNKNOWN = 0,
    DT_FIFO = 1,
    DT_CHR = 2,
    DT_DIR = 4,
    DT_BLK = 6,
    DT_REG = 8,
    DT_LNK = 10,
    DT_SOCK = 12,
    DT_WHT = 14,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream([u8; 0]);
pub type DIR = __dirstream;
extern "C" {
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir_r(__dirp: *mut DIR, __entry: *mut dirent,
                     __result: *mut *mut dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir(__dir: *const ::std::os::raw::c_char,
                   __namelist: *mut *mut *mut dirent,
                   __selector:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const dirent)
                                                 -> ::std::os::raw::c_int>,
                   __cmp:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut *const dirent,
                                                                  arg2:
                                                                      *mut *const dirent)
                                                 -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alphasort(__e1: *mut *const dirent, __e2: *mut *const dirent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentries(__fd: ::std::os::raw::c_int,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: usize,
                         __basep: *mut __off_t) -> __ssize_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(::std::mem::size_of::<iovec>() , 16usize);
    assert_eq!(::std::mem::align_of::<iovec>() , 8usize);
}
impl Clone for iovec {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn readv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                 __count: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn writev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn preadv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int, __offset: __off_t) -> isize;
}
extern "C" {
    pub fn pwritev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                   __count: ::std::os::raw::c_int, __offset: __off_t)
     -> isize;
}
pub type socklen_t = __socklen_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __socket_type {
    SOCK_STREAM = 1,
    SOCK_DGRAM = 2,
    SOCK_RAW = 3,
    SOCK_RDM = 4,
    SOCK_SEQPACKET = 5,
    SOCK_DCCP = 6,
    SOCK_PACKET = 10,
    SOCK_CLOEXEC = 524288,
    SOCK_NONBLOCK = 2048,
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(::std::mem::size_of::<sockaddr>() , 16usize);
    assert_eq!(::std::mem::align_of::<sockaddr>() , 2usize);
}
impl Clone for sockaddr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(::std::mem::size_of::<sockaddr_storage>() , 128usize);
    assert_eq!(::std::mem::align_of::<sockaddr_storage>() , 8usize);
}
pub const MSG_OOB: _bindgen_ty_25 = _bindgen_ty_25::MSG_OOB;
pub const MSG_PEEK: _bindgen_ty_25 = _bindgen_ty_25::MSG_PEEK;
pub const MSG_DONTROUTE: _bindgen_ty_25 = _bindgen_ty_25::MSG_DONTROUTE;
pub const MSG_CTRUNC: _bindgen_ty_25 = _bindgen_ty_25::MSG_CTRUNC;
pub const MSG_PROXY: _bindgen_ty_25 = _bindgen_ty_25::MSG_PROXY;
pub const MSG_TRUNC: _bindgen_ty_25 = _bindgen_ty_25::MSG_TRUNC;
pub const MSG_DONTWAIT: _bindgen_ty_25 = _bindgen_ty_25::MSG_DONTWAIT;
pub const MSG_EOR: _bindgen_ty_25 = _bindgen_ty_25::MSG_EOR;
pub const MSG_WAITALL: _bindgen_ty_25 = _bindgen_ty_25::MSG_WAITALL;
pub const MSG_FIN: _bindgen_ty_25 = _bindgen_ty_25::MSG_FIN;
pub const MSG_SYN: _bindgen_ty_25 = _bindgen_ty_25::MSG_SYN;
pub const MSG_CONFIRM: _bindgen_ty_25 = _bindgen_ty_25::MSG_CONFIRM;
pub const MSG_RST: _bindgen_ty_25 = _bindgen_ty_25::MSG_RST;
pub const MSG_ERRQUEUE: _bindgen_ty_25 = _bindgen_ty_25::MSG_ERRQUEUE;
pub const MSG_NOSIGNAL: _bindgen_ty_25 = _bindgen_ty_25::MSG_NOSIGNAL;
pub const MSG_MORE: _bindgen_ty_25 = _bindgen_ty_25::MSG_MORE;
pub const MSG_WAITFORONE: _bindgen_ty_25 = _bindgen_ty_25::MSG_WAITFORONE;
pub const MSG_BATCH: _bindgen_ty_25 = _bindgen_ty_25::MSG_BATCH;
pub const MSG_FASTOPEN: _bindgen_ty_25 = _bindgen_ty_25::MSG_FASTOPEN;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_25 = _bindgen_ty_25::MSG_CMSG_CLOEXEC;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_25 {
    MSG_OOB = 1,
    MSG_PEEK = 2,
    MSG_DONTROUTE = 4,
    MSG_CTRUNC = 8,
    MSG_PROXY = 16,
    MSG_TRUNC = 32,
    MSG_DONTWAIT = 64,
    MSG_EOR = 128,
    MSG_WAITALL = 256,
    MSG_FIN = 512,
    MSG_SYN = 1024,
    MSG_CONFIRM = 2048,
    MSG_RST = 4096,
    MSG_ERRQUEUE = 8192,
    MSG_NOSIGNAL = 16384,
    MSG_MORE = 32768,
    MSG_WAITFORONE = 65536,
    MSG_BATCH = 262144,
    MSG_FASTOPEN = 536870912,
    MSG_CMSG_CLOEXEC = 1073741824,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(::std::mem::size_of::<msghdr>() , 56usize);
    assert_eq!(::std::mem::align_of::<msghdr>() , 8usize);
}
impl Clone for msghdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(::std::mem::size_of::<cmsghdr>() , 16usize);
    assert_eq!(::std::mem::align_of::<cmsghdr>() , 8usize);
}
impl Clone for cmsghdr {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr)
     -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_26 = _bindgen_ty_26::SCM_RIGHTS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_26 { SCM_RIGHTS = 1, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(::std::mem::size_of::<linger>() , 8usize);
    assert_eq!(::std::mem::align_of::<linger>() , 4usize);
}
impl Clone for linger {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(::std::mem::size_of::<osockaddr>() , 16usize);
    assert_eq!(::std::mem::align_of::<osockaddr>() , 2usize);
}
impl Clone for osockaddr {
    fn clone(&self) -> Self { *self }
}
pub const SHUT_RD: _bindgen_ty_27 = _bindgen_ty_27::SHUT_RD;
pub const SHUT_WR: _bindgen_ty_27 = _bindgen_ty_27::SHUT_WR;
pub const SHUT_RDWR: _bindgen_ty_27 = _bindgen_ty_27::SHUT_RDWR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_27 { SHUT_RD = 0, SHUT_WR = 1, SHUT_RDWR = 2, }
extern "C" {
    pub fn socket(__domain: ::std::os::raw::c_int,
                  __type: ::std::os::raw::c_int,
                  __protocol: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(__domain: ::std::os::raw::c_int,
                      __type: ::std::os::raw::c_int,
                      __protocol: ::std::os::raw::c_int,
                      __fds: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                __len: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                   __len: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(__fd: ::std::os::raw::c_int,
                __buf: *const ::std::os::raw::c_void, __n: usize,
                __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn recv(__fd: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_void, __n: usize,
                __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn sendto(__fd: ::std::os::raw::c_int,
                  __buf: *const ::std::os::raw::c_void, __n: usize,
                  __flags: ::std::os::raw::c_int, __addr: *const sockaddr,
                  __addr_len: socklen_t) -> isize;
}
extern "C" {
    pub fn recvfrom(__fd: ::std::os::raw::c_int,
                    __buf: *mut ::std::os::raw::c_void, __n: usize,
                    __flags: ::std::os::raw::c_int, __addr: *mut sockaddr,
                    __addr_len: *mut socklen_t) -> isize;
}
extern "C" {
    pub fn sendmsg(__fd: ::std::os::raw::c_int, __message: *const msghdr,
                   __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn recvmsg(__fd: ::std::os::raw::c_int, __message: *mut msghdr,
                   __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn getsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *mut ::std::os::raw::c_void,
                      __optlen: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *const ::std::os::raw::c_void,
                      __optlen: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                  __addr_len: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(__fd: ::std::os::raw::c_int, __how: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(__fd: ::std::os::raw::c_int,
                    __fdtype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(::std::mem::size_of::<in_addr>() , 4usize);
    assert_eq!(::std::mem::align_of::<in_addr>() , 4usize);
}
impl Clone for in_addr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(::std::mem::size_of::<ip_opts>() , 44usize);
    assert_eq!(::std::mem::align_of::<ip_opts>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(::std::mem::size_of::<ip_mreqn>() , 12usize);
    assert_eq!(::std::mem::align_of::<ip_mreqn>() , 4usize);
}
impl Clone for ip_mreqn {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(::std::mem::size_of::<in_pktinfo>() , 12usize);
    assert_eq!(::std::mem::align_of::<in_pktinfo>() , 4usize);
}
impl Clone for in_pktinfo {
    fn clone(&self) -> Self { *self }
}
pub const IPPROTO_IP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_IP;
pub const IPPROTO_ICMP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_ICMP;
pub const IPPROTO_IGMP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_IGMP;
pub const IPPROTO_IPIP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_IPIP;
pub const IPPROTO_TCP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_TCP;
pub const IPPROTO_EGP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_EGP;
pub const IPPROTO_PUP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_PUP;
pub const IPPROTO_UDP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_UDP;
pub const IPPROTO_IDP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_IDP;
pub const IPPROTO_TP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_TP;
pub const IPPROTO_DCCP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_DCCP;
pub const IPPROTO_IPV6: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_IPV6;
pub const IPPROTO_RSVP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_RSVP;
pub const IPPROTO_GRE: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_GRE;
pub const IPPROTO_ESP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_ESP;
pub const IPPROTO_AH: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_AH;
pub const IPPROTO_MTP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_MTP;
pub const IPPROTO_BEETPH: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_BEETPH;
pub const IPPROTO_ENCAP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_ENCAP;
pub const IPPROTO_PIM: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_PIM;
pub const IPPROTO_COMP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_COMP;
pub const IPPROTO_SCTP: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_SCTP;
pub const IPPROTO_UDPLITE: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_UDPLITE;
pub const IPPROTO_MPLS: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_MPLS;
pub const IPPROTO_RAW: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_RAW;
pub const IPPROTO_MAX: _bindgen_ty_28 = _bindgen_ty_28::IPPROTO_MAX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_28 {
    IPPROTO_IP = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_IPIP = 4,
    IPPROTO_TCP = 6,
    IPPROTO_EGP = 8,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_TP = 29,
    IPPROTO_DCCP = 33,
    IPPROTO_IPV6 = 41,
    IPPROTO_RSVP = 46,
    IPPROTO_GRE = 47,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_MTP = 92,
    IPPROTO_BEETPH = 94,
    IPPROTO_ENCAP = 98,
    IPPROTO_PIM = 103,
    IPPROTO_COMP = 108,
    IPPROTO_SCTP = 132,
    IPPROTO_UDPLITE = 136,
    IPPROTO_MPLS = 137,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
}
pub const IPPROTO_HOPOPTS: _bindgen_ty_29 = _bindgen_ty_29::IPPROTO_HOPOPTS;
pub const IPPROTO_ROUTING: _bindgen_ty_29 = _bindgen_ty_29::IPPROTO_ROUTING;
pub const IPPROTO_FRAGMENT: _bindgen_ty_29 = _bindgen_ty_29::IPPROTO_FRAGMENT;
pub const IPPROTO_ICMPV6: _bindgen_ty_29 = _bindgen_ty_29::IPPROTO_ICMPV6;
pub const IPPROTO_NONE: _bindgen_ty_29 = _bindgen_ty_29::IPPROTO_NONE;
pub const IPPROTO_DSTOPTS: _bindgen_ty_29 = _bindgen_ty_29::IPPROTO_DSTOPTS;
pub const IPPROTO_MH: _bindgen_ty_29 = _bindgen_ty_29::IPPROTO_MH;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_29 {
    IPPROTO_HOPOPTS = 0,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,
    IPPROTO_MH = 135,
}
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_ECHO;
pub const IPPORT_DISCARD: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_DISCARD;
pub const IPPORT_SYSTAT: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_SYSTAT;
pub const IPPORT_DAYTIME: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_DAYTIME;
pub const IPPORT_NETSTAT: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_NETSTAT;
pub const IPPORT_FTP: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_FTP;
pub const IPPORT_TELNET: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_TELNET;
pub const IPPORT_SMTP: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_SMTP;
pub const IPPORT_TIMESERVER: _bindgen_ty_30 =
    _bindgen_ty_30::IPPORT_TIMESERVER;
pub const IPPORT_NAMESERVER: _bindgen_ty_30 =
    _bindgen_ty_30::IPPORT_NAMESERVER;
pub const IPPORT_WHOIS: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_WHOIS;
pub const IPPORT_MTP: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_MTP;
pub const IPPORT_TFTP: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_TFTP;
pub const IPPORT_RJE: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_RJE;
pub const IPPORT_FINGER: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_FINGER;
pub const IPPORT_TTYLINK: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_TTYLINK;
pub const IPPORT_SUPDUP: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_SUPDUP;
pub const IPPORT_EXECSERVER: _bindgen_ty_30 =
    _bindgen_ty_30::IPPORT_EXECSERVER;
pub const IPPORT_LOGINSERVER: _bindgen_ty_30 =
    _bindgen_ty_30::IPPORT_LOGINSERVER;
pub const IPPORT_CMDSERVER: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_CMDSERVER;
pub const IPPORT_EFSSERVER: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_EFSSERVER;
pub const IPPORT_BIFFUDP: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_EXECSERVER;
pub const IPPORT_WHOSERVER: _bindgen_ty_30 =
    _bindgen_ty_30::IPPORT_LOGINSERVER;
pub const IPPORT_ROUTESERVER: _bindgen_ty_30 =
    _bindgen_ty_30::IPPORT_EFSSERVER;
pub const IPPORT_RESERVED: _bindgen_ty_30 = _bindgen_ty_30::IPPORT_RESERVED;
pub const IPPORT_USERRESERVED: _bindgen_ty_30 =
    _bindgen_ty_30::IPPORT_USERRESERVED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_30 {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,
    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,
    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,
    IPPORT_RESERVED = 1024,
    IPPORT_USERRESERVED = 5000,
}
#[repr(C)]
#[derive(Copy)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<in6_addr__bindgen_ty_1>() , 16usize);
    assert_eq!(::std::mem::align_of::<in6_addr__bindgen_ty_1>() , 4usize);
}
impl Clone for in6_addr__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(::std::mem::size_of::<in6_addr>() , 16usize);
    assert_eq!(::std::mem::align_of::<in6_addr>() , 4usize);
}
impl Clone for in6_addr {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "in6addr_any"]
    pub static in6addr_any: in6_addr;
}
extern "C" {
    #[link_name = "in6addr_loopback"]
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(::std::mem::size_of::<sockaddr_in>() , 16usize);
    assert_eq!(::std::mem::align_of::<sockaddr_in>() , 4usize);
}
impl Clone for sockaddr_in {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(::std::mem::size_of::<sockaddr_in6>() , 28usize);
    assert_eq!(::std::mem::align_of::<sockaddr_in6>() , 4usize);
}
impl Clone for sockaddr_in6 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(::std::mem::size_of::<ip_mreq>() , 8usize);
    assert_eq!(::std::mem::align_of::<ip_mreq>() , 4usize);
}
impl Clone for ip_mreq {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(::std::mem::size_of::<ip_mreq_source>() , 12usize);
    assert_eq!(::std::mem::align_of::<ip_mreq_source>() , 4usize);
}
impl Clone for ip_mreq_source {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(::std::mem::size_of::<ipv6_mreq>() , 20usize);
    assert_eq!(::std::mem::align_of::<ipv6_mreq>() , 4usize);
}
impl Clone for ipv6_mreq {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(::std::mem::size_of::<group_req>() , 136usize);
    assert_eq!(::std::mem::align_of::<group_req>() , 8usize);
}
#[repr(C)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(::std::mem::size_of::<group_source_req>() , 264usize);
    assert_eq!(::std::mem::align_of::<group_source_req>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(::std::mem::size_of::<ip_msfilter>() , 20usize);
    assert_eq!(::std::mem::align_of::<ip_msfilter>() , 4usize);
}
impl Clone for ip_msfilter {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(::std::mem::size_of::<group_filter>() , 272usize);
    assert_eq!(::std::mem::align_of::<group_filter>() , 8usize);
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(__sockfd: ::std::os::raw::c_int,
                        __sock_in: *mut sockaddr_in) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(__sockfd: ::std::os::raw::c_int,
                         __sock_in: *mut sockaddr_in6)
     -> ::std::os::raw::c_int;
}
pub type tcp_seq = u_int32_t;
#[repr(C)]
#[derive(Copy)]
pub struct tcphdr {
    pub __bindgen_anon_1: tcphdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union tcphdr__bindgen_ty_1 {
    pub __bindgen_anon_1: tcphdr__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: tcphdr__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tcphdr__bindgen_ty_1__bindgen_ty_1 {
    pub th_sport: u_int16_t,
    pub th_dport: u_int16_t,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bitfield_1: u8,
    pub th_flags: u_int8_t,
    pub th_win: u_int16_t,
    pub th_sum: u_int16_t,
    pub th_urp: u_int16_t,
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<tcphdr__bindgen_ty_1__bindgen_ty_1>() ,
               20usize);
    assert_eq!(::std::mem::align_of::<tcphdr__bindgen_ty_1__bindgen_ty_1>() ,
               4usize);
}
impl Clone for tcphdr__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl tcphdr__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn th_x2(&self) -> u_int8_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (15usize as u8)) >>
                                       0u32) as u8)
        }
    }
    #[inline]
    pub fn set_th_x2(&mut self, val: u_int8_t) {
        self._bitfield_1 &= !(15usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 0u32) & (15usize as u8);
    }
    #[inline]
    pub fn th_off(&self) -> u_int8_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (240usize as u8)) >>
                                       4u32) as u8)
        }
    }
    #[inline]
    pub fn set_th_off(&mut self, val: u_int8_t) {
        self._bitfield_1 &= !(240usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 4u32) & (240usize as u8);
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tcphdr__bindgen_ty_1__bindgen_ty_2 {
    pub source: u_int16_t,
    pub dest: u_int16_t,
    pub seq: u_int32_t,
    pub ack_seq: u_int32_t,
    pub _bitfield_1: u16,
    pub window: u_int16_t,
    pub check: u_int16_t,
    pub urg_ptr: u_int16_t,
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<tcphdr__bindgen_ty_1__bindgen_ty_2>() ,
               20usize);
    assert_eq!(::std::mem::align_of::<tcphdr__bindgen_ty_1__bindgen_ty_2>() ,
               4usize);
}
impl Clone for tcphdr__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
impl tcphdr__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn res1(&self) -> u_int16_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (15usize as u16)) >>
                                       0u32) as u16)
        }
    }
    #[inline]
    pub fn set_res1(&mut self, val: u_int16_t) {
        self._bitfield_1 &= !(15usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 0u32) & (15usize as u16);
    }
    #[inline]
    pub fn doff(&self) -> u_int16_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (240usize as u16)) >>
                                       4u32) as u16)
        }
    }
    #[inline]
    pub fn set_doff(&mut self, val: u_int16_t) {
        self._bitfield_1 &= !(240usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 4u32) & (240usize as u16);
    }
    #[inline]
    pub fn fin(&self) -> u_int16_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (256usize as u16)) >>
                                       8u32) as u16)
        }
    }
    #[inline]
    pub fn set_fin(&mut self, val: u_int16_t) {
        self._bitfield_1 &= !(256usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 8u32) & (256usize as u16);
    }
    #[inline]
    pub fn syn(&self) -> u_int16_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (512usize as u16)) >>
                                       9u32) as u16)
        }
    }
    #[inline]
    pub fn set_syn(&mut self, val: u_int16_t) {
        self._bitfield_1 &= !(512usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 9u32) & (512usize as u16);
    }
    #[inline]
    pub fn rst(&self) -> u_int16_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (1024usize as u16)) >>
                                       10u32) as u16)
        }
    }
    #[inline]
    pub fn set_rst(&mut self, val: u_int16_t) {
        self._bitfield_1 &= !(1024usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 10u32) & (1024usize as u16);
    }
    #[inline]
    pub fn psh(&self) -> u_int16_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (2048usize as u16)) >>
                                       11u32) as u16)
        }
    }
    #[inline]
    pub fn set_psh(&mut self, val: u_int16_t) {
        self._bitfield_1 &= !(2048usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 11u32) & (2048usize as u16);
    }
    #[inline]
    pub fn ack(&self) -> u_int16_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (4096usize as u16)) >>
                                       12u32) as u16)
        }
    }
    #[inline]
    pub fn set_ack(&mut self, val: u_int16_t) {
        self._bitfield_1 &= !(4096usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 12u32) & (4096usize as u16);
    }
    #[inline]
    pub fn urg(&self) -> u_int16_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (8192usize as u16)) >>
                                       13u32) as u16)
        }
    }
    #[inline]
    pub fn set_urg(&mut self, val: u_int16_t) {
        self._bitfield_1 &= !(8192usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 13u32) & (8192usize as u16);
    }
    #[inline]
    pub fn res2(&self) -> u_int16_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (49152usize as u16)) >>
                                       14u32) as u16)
        }
    }
    #[inline]
    pub fn set_res2(&mut self, val: u_int16_t) {
        self._bitfield_1 &= !(49152usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 14u32) & (49152usize as u16);
    }
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<tcphdr__bindgen_ty_1>() , 20usize);
    assert_eq!(::std::mem::align_of::<tcphdr__bindgen_ty_1>() , 4usize);
}
impl Clone for tcphdr__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_tcphdr() {
    assert_eq!(::std::mem::size_of::<tcphdr>() , 20usize);
    assert_eq!(::std::mem::align_of::<tcphdr>() , 4usize);
}
impl Clone for tcphdr {
    fn clone(&self) -> Self { *self }
}
pub const TCP_ESTABLISHED: _bindgen_ty_31 = _bindgen_ty_31::TCP_ESTABLISHED;
pub const TCP_SYN_SENT: _bindgen_ty_31 = _bindgen_ty_31::TCP_SYN_SENT;
pub const TCP_SYN_RECV: _bindgen_ty_31 = _bindgen_ty_31::TCP_SYN_RECV;
pub const TCP_FIN_WAIT1: _bindgen_ty_31 = _bindgen_ty_31::TCP_FIN_WAIT1;
pub const TCP_FIN_WAIT2: _bindgen_ty_31 = _bindgen_ty_31::TCP_FIN_WAIT2;
pub const TCP_TIME_WAIT: _bindgen_ty_31 = _bindgen_ty_31::TCP_TIME_WAIT;
pub const TCP_CLOSE: _bindgen_ty_31 = _bindgen_ty_31::TCP_CLOSE;
pub const TCP_CLOSE_WAIT: _bindgen_ty_31 = _bindgen_ty_31::TCP_CLOSE_WAIT;
pub const TCP_LAST_ACK: _bindgen_ty_31 = _bindgen_ty_31::TCP_LAST_ACK;
pub const TCP_LISTEN: _bindgen_ty_31 = _bindgen_ty_31::TCP_LISTEN;
pub const TCP_CLOSING: _bindgen_ty_31 = _bindgen_ty_31::TCP_CLOSING;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_31 {
    TCP_ESTABLISHED = 1,
    TCP_SYN_SENT = 2,
    TCP_SYN_RECV = 3,
    TCP_FIN_WAIT1 = 4,
    TCP_FIN_WAIT2 = 5,
    TCP_TIME_WAIT = 6,
    TCP_CLOSE = 7,
    TCP_CLOSE_WAIT = 8,
    TCP_LAST_ACK = 9,
    TCP_LISTEN = 10,
    TCP_CLOSING = 11,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum tcp_ca_state {
    TCP_CA_Open = 0,
    TCP_CA_Disorder = 1,
    TCP_CA_CWR = 2,
    TCP_CA_Recovery = 3,
    TCP_CA_Loss = 4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tcp_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_ca_state: u_int8_t,
    pub tcpi_retransmits: u_int8_t,
    pub tcpi_probes: u_int8_t,
    pub tcpi_backoff: u_int8_t,
    pub tcpi_options: u_int8_t,
    pub _bitfield_1: u8,
    pub tcpi_rto: u_int32_t,
    pub tcpi_ato: u_int32_t,
    pub tcpi_snd_mss: u_int32_t,
    pub tcpi_rcv_mss: u_int32_t,
    pub tcpi_unacked: u_int32_t,
    pub tcpi_sacked: u_int32_t,
    pub tcpi_lost: u_int32_t,
    pub tcpi_retrans: u_int32_t,
    pub tcpi_fackets: u_int32_t,
    pub tcpi_last_data_sent: u_int32_t,
    pub tcpi_last_ack_sent: u_int32_t,
    pub tcpi_last_data_recv: u_int32_t,
    pub tcpi_last_ack_recv: u_int32_t,
    pub tcpi_pmtu: u_int32_t,
    pub tcpi_rcv_ssthresh: u_int32_t,
    pub tcpi_rtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_advmss: u_int32_t,
    pub tcpi_reordering: u_int32_t,
    pub tcpi_rcv_rtt: u_int32_t,
    pub tcpi_rcv_space: u_int32_t,
    pub tcpi_total_retrans: u_int32_t,
}
#[test]
fn bindgen_test_layout_tcp_info() {
    assert_eq!(::std::mem::size_of::<tcp_info>() , 104usize);
    assert_eq!(::std::mem::align_of::<tcp_info>() , 4usize);
}
impl Clone for tcp_info {
    fn clone(&self) -> Self { *self }
}
impl tcp_info {
    #[inline]
    pub fn tcpi_snd_wscale(&self) -> u_int8_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (15usize as u8)) >>
                                       0u32) as u8)
        }
    }
    #[inline]
    pub fn set_tcpi_snd_wscale(&mut self, val: u_int8_t) {
        self._bitfield_1 &= !(15usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 0u32) & (15usize as u8);
    }
    #[inline]
    pub fn tcpi_rcv_wscale(&self) -> u_int8_t {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (240usize as u8)) >>
                                       4u32) as u8)
        }
    }
    #[inline]
    pub fn set_tcpi_rcv_wscale(&mut self, val: u_int8_t) {
        self._bitfield_1 &= !(240usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 4u32) & (240usize as u8);
    }
}
#[repr(C)]
pub struct tcp_md5sig {
    pub tcpm_addr: sockaddr_storage,
    pub __tcpm_pad1: u_int16_t,
    pub tcpm_keylen: u_int16_t,
    pub __tcpm_pad2: u_int32_t,
    pub tcpm_key: [u_int8_t; 80usize],
}
#[test]
fn bindgen_test_layout_tcp_md5sig() {
    assert_eq!(::std::mem::size_of::<tcp_md5sig>() , 216usize);
    assert_eq!(::std::mem::align_of::<tcp_md5sig>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tcp_repair_opt {
    pub opt_code: u_int32_t,
    pub opt_val: u_int32_t,
}
#[test]
fn bindgen_test_layout_tcp_repair_opt() {
    assert_eq!(::std::mem::size_of::<tcp_repair_opt>() , 8usize);
    assert_eq!(::std::mem::align_of::<tcp_repair_opt>() , 4usize);
}
impl Clone for tcp_repair_opt {
    fn clone(&self) -> Self { *self }
}
pub const TCP_NO_QUEUE: _bindgen_ty_32 = _bindgen_ty_32::TCP_NO_QUEUE;
pub const TCP_RECV_QUEUE: _bindgen_ty_32 = _bindgen_ty_32::TCP_RECV_QUEUE;
pub const TCP_SEND_QUEUE: _bindgen_ty_32 = _bindgen_ty_32::TCP_SEND_QUEUE;
pub const TCP_QUEUES_NR: _bindgen_ty_32 = _bindgen_ty_32::TCP_QUEUES_NR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_32 {
    TCP_NO_QUEUE = 0,
    TCP_RECV_QUEUE = 1,
    TCP_SEND_QUEUE = 2,
    TCP_QUEUES_NR = 3,
}
#[repr(C)]
pub struct tcp_cookie_transactions {
    pub tcpct_flags: u_int16_t,
    pub __tcpct_pad1: u_int8_t,
    pub tcpct_cookie_desired: u_int8_t,
    pub tcpct_s_data_desired: u_int16_t,
    pub tcpct_used: u_int16_t,
    pub tcpct_value: [u_int8_t; 536usize],
}
#[test]
fn bindgen_test_layout_tcp_cookie_transactions() {
    assert_eq!(::std::mem::size_of::<tcp_cookie_transactions>() , 544usize);
    assert_eq!(::std::mem::align_of::<tcp_cookie_transactions>() , 2usize);
}
extern "C" {
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(__af: ::std::os::raw::c_int,
                     __cp: *const ::std::os::raw::c_char,
                     __buf: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_ntop(__af: ::std::os::raw::c_int,
                     __cp: *const ::std::os::raw::c_void,
                     __buf: *mut ::std::os::raw::c_char, __len: socklen_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(__cp: *const ::std::os::raw::c_char, __inp: *mut in_addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(__net: in_addr_t, __buf: *mut ::std::os::raw::c_char,
                     __len: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_ntop(__af: ::std::os::raw::c_int,
                         __cp: *const ::std::os::raw::c_void,
                         __bits: ::std::os::raw::c_int,
                         __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(__af: ::std::os::raw::c_int,
                         __cp: *const ::std::os::raw::c_char,
                         __buf: *mut ::std::os::raw::c_void, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_nsap_addr(__cp: *const ::std::os::raw::c_char,
                          __buf: *mut ::std::os::raw::c_uchar,
                          __len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(__len: ::std::os::raw::c_int,
                          __cp: *const ::std::os::raw::c_uchar,
                          __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rpcent() {
    assert_eq!(::std::mem::size_of::<rpcent>() , 24usize);
    assert_eq!(::std::mem::align_of::<rpcent>() , 8usize);
}
impl Clone for rpcent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbyname_r(__name: *const ::std::os::raw::c_char,
                          __result_buf: *mut rpcent,
                          __buffer: *mut ::std::os::raw::c_char,
                          __buflen: usize, __result: *mut *mut rpcent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcbynumber_r(__number: ::std::os::raw::c_int,
                            __result_buf: *mut rpcent,
                            __buffer: *mut ::std::os::raw::c_char,
                            __buflen: usize, __result: *mut *mut rpcent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcent_r(__result_buf: *mut rpcent,
                       __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                       __result: *mut *mut rpcent) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[test]
fn bindgen_test_layout_netent() {
    assert_eq!(::std::mem::size_of::<netent>() , 24usize);
    assert_eq!(::std::mem::align_of::<netent>() , 8usize);
}
impl Clone for netent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn herror(__str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(__err_num: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hostent() {
    assert_eq!(::std::mem::size_of::<hostent>() , 32usize);
    assert_eq!(::std::mem::align_of::<hostent>() , 8usize);
}
impl Clone for hostent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn gethostbyaddr(__addr: *const ::std::os::raw::c_void,
                         __len: __socklen_t, __type: ::std::os::raw::c_int)
     -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char)
     -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname2(__name: *const ::std::os::raw::c_char,
                          __af: ::std::os::raw::c_int) -> *mut hostent;
}
extern "C" {
    pub fn gethostent_r(__result_buf: *mut hostent,
                        __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                        __result: *mut *mut hostent,
                        __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr_r(__addr: *const ::std::os::raw::c_void,
                           __len: __socklen_t, __type: ::std::os::raw::c_int,
                           __result_buf: *mut hostent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: usize, __result: *mut *mut hostent,
                           __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname_r(__name: *const ::std::os::raw::c_char,
                           __result_buf: *mut hostent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: usize, __result: *mut *mut hostent,
                           __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname2_r(__name: *const ::std::os::raw::c_char,
                            __af: ::std::os::raw::c_int,
                            __result_buf: *mut hostent,
                            __buf: *mut ::std::os::raw::c_char,
                            __buflen: usize, __result: *mut *mut hostent,
                            __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getnetbyaddr(__net: u32, __type: ::std::os::raw::c_int)
     -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent_r(__result_buf: *mut netent,
                       __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                       __result: *mut *mut netent,
                       __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr_r(__net: u32, __type: ::std::os::raw::c_int,
                          __result_buf: *mut netent,
                          __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                          __result: *mut *mut netent,
                          __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyname_r(__name: *const ::std::os::raw::c_char,
                          __result_buf: *mut netent,
                          __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                          __result: *mut *mut netent,
                          __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_servent() {
    assert_eq!(::std::mem::size_of::<servent>() , 32usize);
    assert_eq!(::std::mem::align_of::<servent>() , 8usize);
}
impl Clone for servent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn getservbyname(__name: *const ::std::os::raw::c_char,
                         __proto: *const ::std::os::raw::c_char)
     -> *mut servent;
}
extern "C" {
    pub fn getservbyport(__port: ::std::os::raw::c_int,
                         __proto: *const ::std::os::raw::c_char)
     -> *mut servent;
}
extern "C" {
    pub fn getservent_r(__result_buf: *mut servent,
                        __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                        __result: *mut *mut servent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyname_r(__name: *const ::std::os::raw::c_char,
                           __proto: *const ::std::os::raw::c_char,
                           __result_buf: *mut servent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: usize, __result: *mut *mut servent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyport_r(__port: ::std::os::raw::c_int,
                           __proto: *const ::std::os::raw::c_char,
                           __result_buf: *mut servent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: usize, __result: *mut *mut servent)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_protoent() {
    assert_eq!(::std::mem::size_of::<protoent>() , 24usize);
    assert_eq!(::std::mem::align_of::<protoent>() , 8usize);
}
impl Clone for protoent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char)
     -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent_r(__result_buf: *mut protoent,
                         __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                         __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobyname_r(__name: *const ::std::os::raw::c_char,
                            __result_buf: *mut protoent,
                            __buf: *mut ::std::os::raw::c_char,
                            __buflen: usize, __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobynumber_r(__proto: ::std::os::raw::c_int,
                              __result_buf: *mut protoent,
                              __buf: *mut ::std::os::raw::c_char,
                              __buflen: usize, __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn getnetgrent(__hostp: *mut *mut ::std::os::raw::c_char,
                       __userp: *mut *mut ::std::os::raw::c_char,
                       __domainp: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innetgr(__netgroup: *const ::std::os::raw::c_char,
                   __host: *const ::std::os::raw::c_char,
                   __user: *const ::std::os::raw::c_char,
                   __domain: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent_r(__hostp: *mut *mut ::std::os::raw::c_char,
                         __userp: *mut *mut ::std::os::raw::c_char,
                         __domainp: *mut *mut ::std::os::raw::c_char,
                         __buffer: *mut ::std::os::raw::c_char,
                         __buflen: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(__ahost: *mut *mut ::std::os::raw::c_char,
                __rport: ::std::os::raw::c_ushort,
                __locuser: *const ::std::os::raw::c_char,
                __remuser: *const ::std::os::raw::c_char,
                __cmd: *const ::std::os::raw::c_char,
                __fd2p: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(__ahost: *mut *mut ::std::os::raw::c_char,
                   __rport: ::std::os::raw::c_ushort,
                   __locuser: *const ::std::os::raw::c_char,
                   __remuser: *const ::std::os::raw::c_char,
                   __cmd: *const ::std::os::raw::c_char,
                   __fd2p: *mut ::std::os::raw::c_int, __af: sa_family_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec(__ahost: *mut *mut ::std::os::raw::c_char,
                 __rport: ::std::os::raw::c_int,
                 __name: *const ::std::os::raw::c_char,
                 __pass: *const ::std::os::raw::c_char,
                 __cmd: *const ::std::os::raw::c_char,
                 __fd2p: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec_af(__ahost: *mut *mut ::std::os::raw::c_char,
                    __rport: ::std::os::raw::c_int,
                    __name: *const ::std::os::raw::c_char,
                    __pass: *const ::std::os::raw::c_char,
                    __cmd: *const ::std::os::raw::c_char,
                    __fd2p: *mut ::std::os::raw::c_int, __af: sa_family_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(__rhost: *const ::std::os::raw::c_char,
                   __suser: ::std::os::raw::c_int,
                   __remuser: *const ::std::os::raw::c_char,
                   __locuser: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok_af(__rhost: *const ::std::os::raw::c_char,
                      __suser: ::std::os::raw::c_int,
                      __remuser: *const ::std::os::raw::c_char,
                      __locuser: *const ::std::os::raw::c_char,
                      __af: sa_family_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(__raddr: u32, __suser: ::std::os::raw::c_int,
                    __remuser: *const ::std::os::raw::c_char,
                    __locuser: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_af(__raddr: *const ::std::os::raw::c_void,
                       __suser: ::std::os::raw::c_int,
                       __remuser: *const ::std::os::raw::c_char,
                       __locuser: *const ::std::os::raw::c_char,
                       __af: sa_family_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(__alport: *mut ::std::os::raw::c_int,
                        __af: sa_family_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
#[test]
fn bindgen_test_layout_addrinfo() {
    assert_eq!(::std::mem::size_of::<addrinfo>() , 48usize);
    assert_eq!(::std::mem::align_of::<addrinfo>() , 8usize);
}
impl Clone for addrinfo {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn getaddrinfo(__name: *const ::std::os::raw::c_char,
                       __service: *const ::std::os::raw::c_char,
                       __req: *const addrinfo, __pai: *mut *mut addrinfo)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeaddrinfo(__ai: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getnameinfo(__sa: *const sockaddr, __salen: socklen_t,
                       __host: *mut ::std::os::raw::c_char,
                       __hostlen: socklen_t,
                       __serv: *mut ::std::os::raw::c_char,
                       __servlen: socklen_t, __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_uint;
pub type tcflag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_line: cc_t,
    pub c_cc: [cc_t; 32usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
#[test]
fn bindgen_test_layout_termios() {
    assert_eq!(::std::mem::size_of::<termios>() , 60usize);
    assert_eq!(::std::mem::align_of::<termios>() , 4usize);
}
impl Clone for termios {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn cfgetospeed(__termios_p: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfgetispeed(__termios_p: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfsetospeed(__termios_p: *mut termios, __speed: speed_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetispeed(__termios_p: *mut termios, __speed: speed_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetspeed(__termios_p: *mut termios, __speed: speed_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetattr(__fd: ::std::os::raw::c_int, __termios_p: *mut termios)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsetattr(__fd: ::std::os::raw::c_int,
                     __optional_actions: ::std::os::raw::c_int,
                     __termios_p: *const termios) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfmakeraw(__termios_p: *mut termios);
}
extern "C" {
    pub fn tcsendbreak(__fd: ::std::os::raw::c_int,
                       __duration: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcdrain(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflush(__fd: ::std::os::raw::c_int,
                   __queue_selector: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflow(__fd: ::std::os::raw::c_int,
                  __action: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetsid(__fd: ::std::os::raw::c_int) -> __pid_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_passwd() {
    assert_eq!(::std::mem::size_of::<passwd>() , 48usize);
    assert_eq!(::std::mem::align_of::<passwd>() , 8usize);
}
impl Clone for passwd {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn fgetpwent(__stream: *mut FILE) -> *mut passwd;
}
extern "C" {
    pub fn putpwent(__p: *const passwd, __f: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid(__uid: __uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(__name: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwent_r(__resultbuf: *mut passwd,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid_r(__uid: __uid_t, __resultbuf: *mut passwd,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(__name: *const ::std::os::raw::c_char,
                      __resultbuf: *mut passwd,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpwent_r(__stream: *mut FILE, __resultbuf: *mut passwd,
                       __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                       __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_33 {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_33() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_33>() , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_33>() , 8usize);
}
impl Clone for _bindgen_ty_33 {
    fn clone(&self) -> Self { *self }
}
pub type sem_t = _bindgen_ty_33;
extern "C" {
    pub fn sem_init(__sem: *mut sem_t, __pshared: ::std::os::raw::c_int,
                    __value: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_destroy(__sem: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_open(__name: *const ::std::os::raw::c_char,
                    __oflag: ::std::os::raw::c_int, ...) -> *mut sem_t;
}
extern "C" {
    pub fn sem_close(__sem: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_unlink(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_wait(__sem: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_timedwait(__sem: *mut sem_t, __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_trywait(__sem: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_post(__sem: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_getvalue(__sem: *mut sem_t, __sval: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(::std::mem::size_of::<sched_param>() , 4usize);
    assert_eq!(::std::mem::align_of::<sched_param>() , 4usize);
}
impl Clone for sched_param {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sched_param() {
    assert_eq!(::std::mem::size_of::<__sched_param>() , 4usize);
    assert_eq!(::std::mem::align_of::<__sched_param>() , 4usize);
}
impl Clone for __sched_param {
    fn clone(&self) -> Self { *self }
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_34 {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_34() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_34>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_34>() , 8usize);
}
impl Clone for _bindgen_ty_34 {
    fn clone(&self) -> Self { *self }
}
pub type cpu_set_t = _bindgen_ty_34;
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(__pid: __pid_t, __policy: ::std::os::raw::c_int,
                              __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(::std::mem::size_of::<tm>() , 56usize);
    assert_eq!(::std::mem::align_of::<tm>() , 8usize);
}
impl Clone for tm {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(::std::mem::size_of::<itimerspec>() , 32usize);
    assert_eq!(::std::mem::align_of::<itimerspec>() , 8usize);
}
impl Clone for itimerspec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>()
               , 8usize);
}
impl Clone for sigevent__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigevent__bindgen_ty_1>() , 48usize);
    assert_eq!(::std::mem::align_of::<sigevent__bindgen_ty_1>() , 8usize);
}
impl Clone for sigevent__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(::std::mem::size_of::<sigevent>() , 64usize);
    assert_eq!(::std::mem::align_of::<sigevent>() , 8usize);
}
impl Clone for sigevent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                    __format: *const ::std::os::raw::c_char, __tp: *const tm)
     -> usize;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_struct___locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct___locale_data([u8; 0]);
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(::std::mem::size_of::<__locale_struct>() , 232usize);
    assert_eq!(::std::mem::align_of::<__locale_struct>() , 8usize);
}
impl Clone for __locale_struct {
    fn clone(&self) -> Self { *self }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const tm, __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_CREATE_JOINABLE;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_CREATE_DETACHED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_35 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1,
}
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_ADAPTIVE_NP;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_TIMED_NP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_36 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
}
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_37 =
    _bindgen_ty_37::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_37 =
    _bindgen_ty_37::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_37 =
    _bindgen_ty_37::PTHREAD_MUTEX_ROBUST;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_37 =
    _bindgen_ty_37::PTHREAD_MUTEX_ROBUST;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_37 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_ROBUST = 1,
}
pub const PTHREAD_PRIO_NONE: _bindgen_ty_38 =
    _bindgen_ty_38::PTHREAD_PRIO_NONE;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_38 =
    _bindgen_ty_38::PTHREAD_PRIO_INHERIT;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_38 =
    _bindgen_ty_38::PTHREAD_PRIO_PROTECT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_38 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2,
}
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_39 =
    _bindgen_ty_39::PTHREAD_RWLOCK_PREFER_READER_NP;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_39 =
    _bindgen_ty_39::PTHREAD_RWLOCK_PREFER_WRITER_NP;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_39 =
    _bindgen_ty_39::PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_39 =
    _bindgen_ty_39::PTHREAD_RWLOCK_PREFER_READER_NP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_39 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
}
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_40 =
    _bindgen_ty_40::PTHREAD_INHERIT_SCHED;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_40 =
    _bindgen_ty_40::PTHREAD_EXPLICIT_SCHED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_40 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1,
}
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_41 =
    _bindgen_ty_41::PTHREAD_SCOPE_SYSTEM;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_41 =
    _bindgen_ty_41::PTHREAD_SCOPE_PROCESS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_41 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1,
}
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_42 =
    _bindgen_ty_42::PTHREAD_PROCESS_PRIVATE;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_42 =
    _bindgen_ty_42::PTHREAD_PROCESS_SHARED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_42 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    assert_eq!(::std::mem::size_of::<_pthread_cleanup_buffer>() , 32usize);
    assert_eq!(::std::mem::align_of::<_pthread_cleanup_buffer>() , 8usize);
}
impl Clone for _pthread_cleanup_buffer {
    fn clone(&self) -> Self { *self }
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_43 =
    _bindgen_ty_43::PTHREAD_CANCEL_ENABLE;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_43 =
    _bindgen_ty_43::PTHREAD_CANCEL_DISABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_43 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1,
}
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_44 =
    _bindgen_ty_44::PTHREAD_CANCEL_DEFERRED;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_44 =
    _bindgen_ty_44::PTHREAD_CANCEL_ASYNCHRONOUS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_44 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1,
}
extern "C" {
    pub fn pthread_create(__newthread: *mut pthread_t,
                          __attr: *const pthread_attr_t,
                          __start_routine:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut ::std::os::raw::c_void)
                                                        ->
                                                            *mut ::std::os::raw::c_void>,
                          __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(__th: pthread_t,
                        __thread_return: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(__attr: *const pthread_attr_t,
                                       __detachstate:
                                           *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(__attr: *mut pthread_attr_t,
                                       __detachstate: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(__attr: *const pthread_attr_t,
                                     __guardsize: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(__attr: *mut pthread_attr_t,
                                     __guardsize: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(__attr: *const pthread_attr_t,
                                      __param: *mut sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(__attr: *mut pthread_attr_t,
                                      __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(__attr: *const pthread_attr_t,
                                       __policy: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(__attr: *mut pthread_attr_t,
                                       __policy: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(__attr: *const pthread_attr_t,
                                        __inherit: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(__attr: *mut pthread_attr_t,
                                        __inherit: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(__attr: *const pthread_attr_t,
                                 __scope: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t,
                                 __scope: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(__attr: *const pthread_attr_t,
                                     __stackaddr:
                                         *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(__attr: *mut pthread_attr_t,
                                     __stackaddr: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(__attr: *const pthread_attr_t,
                                     __stacksize: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(__attr: *mut pthread_attr_t,
                                     __stacksize: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(__attr: *const pthread_attr_t,
                                 __stackaddr:
                                     *mut *mut ::std::os::raw::c_void,
                                 __stacksize: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(__attr: *mut pthread_attr_t,
                                 __stackaddr: *mut ::std::os::raw::c_void,
                                 __stacksize: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(__target_thread: pthread_t,
                                 __policy: ::std::os::raw::c_int,
                                 __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(__target_thread: pthread_t,
                                 __policy: *mut ::std::os::raw::c_int,
                                 __param: *mut sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(__target_thread: pthread_t,
                                __prio: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(__once_control: *mut pthread_once_t,
                        __init_routine:
                            ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(__state: ::std::os::raw::c_int,
                                  __oldstate: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(__type: ::std::os::raw::c_int,
                                 __oldtype: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_45 {
    pub __cancel_jmp_buf: [_bindgen_ty_45__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_45__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_45__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_45__bindgen_ty_1>() ,
               72usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_45__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_45__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_45() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_45>() , 104usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_45>() , 8usize);
}
impl Clone for _bindgen_ty_45 {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_unwind_buf_t = _bindgen_ty_45;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    assert_eq!(::std::mem::size_of::<__pthread_cleanup_frame>() , 24usize);
    assert_eq!(::std::mem::align_of::<__pthread_cleanup_frame>() , 8usize);
}
impl Clone for __pthread_cleanup_frame {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(::std::mem::size_of::<__jmp_buf_tag>() , 200usize);
    assert_eq!(::std::mem::align_of::<__jmp_buf_tag>() , 8usize);
}
impl Clone for __jmp_buf_tag {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __sigsetjmp(__env: *mut __jmp_buf_tag,
                       __savemask: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(__mutex: *mut pthread_mutex_t,
                              __mutexattr: *const pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(__mutex: *mut pthread_mutex_t,
                                   __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(__mutex: *const pthread_mutex_t,
                                        __prioceiling:
                                            *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(__mutex: *mut pthread_mutex_t,
                                        __prioceiling: ::std::os::raw::c_int,
                                        __old_ceiling:
                                            *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(__attr: *const pthread_mutexattr_t,
                                        __pshared: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(__attr: *mut pthread_mutexattr_t,
                                        __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(__attr: *const pthread_mutexattr_t,
                                     __kind: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(__attr: *mut pthread_mutexattr_t,
                                     __kind: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(__attr: *const pthread_mutexattr_t,
                                         __protocol:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(__attr: *mut pthread_mutexattr_t,
                                         __protocol: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(__attr:
                                                *const pthread_mutexattr_t,
                                            __prioceiling:
                                                *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(__attr: *mut pthread_mutexattr_t,
                                            __prioceiling:
                                                ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(__attr: *const pthread_mutexattr_t,
                                       __robustness:
                                           *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(__attr: *mut pthread_mutexattr_t,
                                       __robustness: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(__rwlock: *mut pthread_rwlock_t,
                               __attr: *const pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(__attr: *const pthread_rwlockattr_t,
                                         __pshared:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(__attr: *mut pthread_rwlockattr_t,
                                         __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(__attr: *const pthread_rwlockattr_t,
                                         __pref: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(__attr: *mut pthread_rwlockattr_t,
                                         __pref: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(__cond: *mut pthread_cond_t,
                             __cond_attr: *const pthread_condattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(__cond: *mut pthread_cond_t,
                             __mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(__cond: *mut pthread_cond_t,
                                  __mutex: *mut pthread_mutex_t,
                                  __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(__attr: *const pthread_condattr_t,
                                       __pshared: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(__attr: *mut pthread_condattr_t,
                                       __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(__attr: *const pthread_condattr_t,
                                     __clock_id: *mut __clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(__attr: *mut pthread_condattr_t,
                                     __clock_id: __clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(__lock: *mut pthread_spinlock_t,
                             __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(__barrier: *mut pthread_barrier_t,
                                __attr: *const pthread_barrierattr_t,
                                __count: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(__attr:
                                              *const pthread_barrierattr_t,
                                          __pshared:
                                              *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(__attr: *mut pthread_barrierattr_t,
                                          __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(__key: *mut pthread_key_t,
                              __destr_function:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(__key: pthread_key_t,
                               __pointer: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(__thread_id: pthread_t,
                                 __clock_id: *mut __clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(__prepare:
                              ::std::option::Option<unsafe extern "C" fn()>,
                          __parent:
                              ::std::option::Option<unsafe extern "C" fn()>,
                          __child:
                              ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigismember(arg1: *const __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(::std::mem::size_of::<sigval>() , 8usize);
    assert_eq!(::std::mem::align_of::<sigval>() , 8usize);
}
impl Clone for sigval {
    fn clone(&self) -> Self { *self }
}
pub type sigval_t = sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_46 {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: _bindgen_ty_46__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_46__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: _bindgen_ty_46__bindgen_ty_1__bindgen_ty_1,
    pub _timer: _bindgen_ty_46__bindgen_ty_1__bindgen_ty_2,
    pub _rt: _bindgen_ty_46__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: _bindgen_ty_46__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: _bindgen_ty_46__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: _bindgen_ty_46__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: _bindgen_ty_46__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_46__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_46__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_1>()
               , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_1>()
               , 4usize);
}
impl Clone for _bindgen_ty_46__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_46__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_46__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_2>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_2>()
               , 8usize);
}
impl Clone for _bindgen_ty_46__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_46__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_46__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_3>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_3>()
               , 8usize);
}
impl Clone for _bindgen_ty_46__bindgen_ty_1__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_46__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_46__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_4>()
               , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_4>()
               , 8usize);
}
impl Clone for _bindgen_ty_46__bindgen_ty_1__bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_46__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub si_addr_bnd: _bindgen_ty_46__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_46__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__bindgen_ty_46__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
               , 8usize);
}
impl Clone for _bindgen_ty_46__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_46__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_5>()
               , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_5>()
               , 8usize);
}
impl Clone for _bindgen_ty_46__bindgen_ty_1__bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_46__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_46__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_6>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_6>()
               , 8usize);
}
impl Clone for _bindgen_ty_46__bindgen_ty_1__bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_46__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_46__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_7>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_46__bindgen_ty_1__bindgen_ty_7>()
               , 8usize);
}
impl Clone for _bindgen_ty_46__bindgen_ty_1__bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_46__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_46__bindgen_ty_1>() ,
               112usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_46__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_46__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_46() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_46>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_46>() , 8usize);
}
impl Clone for _bindgen_ty_46 {
    fn clone(&self) -> Self { *self }
}
pub type siginfo_t = _bindgen_ty_46;
pub const SI_ASYNCNL: _bindgen_ty_47 = _bindgen_ty_47::SI_ASYNCNL;
pub const SI_TKILL: _bindgen_ty_47 = _bindgen_ty_47::SI_TKILL;
pub const SI_SIGIO: _bindgen_ty_47 = _bindgen_ty_47::SI_SIGIO;
pub const SI_ASYNCIO: _bindgen_ty_47 = _bindgen_ty_47::SI_ASYNCIO;
pub const SI_MESGQ: _bindgen_ty_47 = _bindgen_ty_47::SI_MESGQ;
pub const SI_TIMER: _bindgen_ty_47 = _bindgen_ty_47::SI_TIMER;
pub const SI_QUEUE: _bindgen_ty_47 = _bindgen_ty_47::SI_QUEUE;
pub const SI_USER: _bindgen_ty_47 = _bindgen_ty_47::SI_USER;
pub const SI_KERNEL: _bindgen_ty_47 = _bindgen_ty_47::SI_KERNEL;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_47 {
    SI_ASYNCNL = -60,
    SI_TKILL = -6,
    SI_SIGIO = -5,
    SI_ASYNCIO = -4,
    SI_MESGQ = -3,
    SI_TIMER = -2,
    SI_QUEUE = -1,
    SI_USER = 0,
    SI_KERNEL = 128,
}
pub const ILL_ILLOPC: _bindgen_ty_48 = _bindgen_ty_48::ILL_ILLOPC;
pub const ILL_ILLOPN: _bindgen_ty_48 = _bindgen_ty_48::ILL_ILLOPN;
pub const ILL_ILLADR: _bindgen_ty_48 = _bindgen_ty_48::ILL_ILLADR;
pub const ILL_ILLTRP: _bindgen_ty_48 = _bindgen_ty_48::ILL_ILLTRP;
pub const ILL_PRVOPC: _bindgen_ty_48 = _bindgen_ty_48::ILL_PRVOPC;
pub const ILL_PRVREG: _bindgen_ty_48 = _bindgen_ty_48::ILL_PRVREG;
pub const ILL_COPROC: _bindgen_ty_48 = _bindgen_ty_48::ILL_COPROC;
pub const ILL_BADSTK: _bindgen_ty_48 = _bindgen_ty_48::ILL_BADSTK;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_48 {
    ILL_ILLOPC = 1,
    ILL_ILLOPN = 2,
    ILL_ILLADR = 3,
    ILL_ILLTRP = 4,
    ILL_PRVOPC = 5,
    ILL_PRVREG = 6,
    ILL_COPROC = 7,
    ILL_BADSTK = 8,
}
pub const FPE_INTDIV: _bindgen_ty_49 = _bindgen_ty_49::FPE_INTDIV;
pub const FPE_INTOVF: _bindgen_ty_49 = _bindgen_ty_49::FPE_INTOVF;
pub const FPE_FLTDIV: _bindgen_ty_49 = _bindgen_ty_49::FPE_FLTDIV;
pub const FPE_FLTOVF: _bindgen_ty_49 = _bindgen_ty_49::FPE_FLTOVF;
pub const FPE_FLTUND: _bindgen_ty_49 = _bindgen_ty_49::FPE_FLTUND;
pub const FPE_FLTRES: _bindgen_ty_49 = _bindgen_ty_49::FPE_FLTRES;
pub const FPE_FLTINV: _bindgen_ty_49 = _bindgen_ty_49::FPE_FLTINV;
pub const FPE_FLTSUB: _bindgen_ty_49 = _bindgen_ty_49::FPE_FLTSUB;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_49 {
    FPE_INTDIV = 1,
    FPE_INTOVF = 2,
    FPE_FLTDIV = 3,
    FPE_FLTOVF = 4,
    FPE_FLTUND = 5,
    FPE_FLTRES = 6,
    FPE_FLTINV = 7,
    FPE_FLTSUB = 8,
}
pub const SEGV_MAPERR: _bindgen_ty_50 = _bindgen_ty_50::SEGV_MAPERR;
pub const SEGV_ACCERR: _bindgen_ty_50 = _bindgen_ty_50::SEGV_ACCERR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_50 { SEGV_MAPERR = 1, SEGV_ACCERR = 2, }
pub const BUS_ADRALN: _bindgen_ty_51 = _bindgen_ty_51::BUS_ADRALN;
pub const BUS_ADRERR: _bindgen_ty_51 = _bindgen_ty_51::BUS_ADRERR;
pub const BUS_OBJERR: _bindgen_ty_51 = _bindgen_ty_51::BUS_OBJERR;
pub const BUS_MCEERR_AR: _bindgen_ty_51 = _bindgen_ty_51::BUS_MCEERR_AR;
pub const BUS_MCEERR_AO: _bindgen_ty_51 = _bindgen_ty_51::BUS_MCEERR_AO;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_51 {
    BUS_ADRALN = 1,
    BUS_ADRERR = 2,
    BUS_OBJERR = 3,
    BUS_MCEERR_AR = 4,
    BUS_MCEERR_AO = 5,
}
pub const CLD_EXITED: _bindgen_ty_52 = _bindgen_ty_52::CLD_EXITED;
pub const CLD_KILLED: _bindgen_ty_52 = _bindgen_ty_52::CLD_KILLED;
pub const CLD_DUMPED: _bindgen_ty_52 = _bindgen_ty_52::CLD_DUMPED;
pub const CLD_TRAPPED: _bindgen_ty_52 = _bindgen_ty_52::CLD_TRAPPED;
pub const CLD_STOPPED: _bindgen_ty_52 = _bindgen_ty_52::CLD_STOPPED;
pub const CLD_CONTINUED: _bindgen_ty_52 = _bindgen_ty_52::CLD_CONTINUED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_52 {
    CLD_EXITED = 1,
    CLD_KILLED = 2,
    CLD_DUMPED = 3,
    CLD_TRAPPED = 4,
    CLD_STOPPED = 5,
    CLD_CONTINUED = 6,
}
pub const POLL_IN: _bindgen_ty_53 = _bindgen_ty_53::POLL_IN;
pub const POLL_OUT: _bindgen_ty_53 = _bindgen_ty_53::POLL_OUT;
pub const POLL_MSG: _bindgen_ty_53 = _bindgen_ty_53::POLL_MSG;
pub const POLL_ERR: _bindgen_ty_53 = _bindgen_ty_53::POLL_ERR;
pub const POLL_PRI: _bindgen_ty_53 = _bindgen_ty_53::POLL_PRI;
pub const POLL_HUP: _bindgen_ty_53 = _bindgen_ty_53::POLL_HUP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_53 {
    POLL_IN = 1,
    POLL_OUT = 2,
    POLL_MSG = 3,
    POLL_ERR = 4,
    POLL_PRI = 5,
    POLL_HUP = 6,
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_54 = _bindgen_ty_54::SIGEV_SIGNAL;
pub const SIGEV_NONE: _bindgen_ty_54 = _bindgen_ty_54::SIGEV_NONE;
pub const SIGEV_THREAD: _bindgen_ty_54 = _bindgen_ty_54::SIGEV_THREAD;
pub const SIGEV_THREAD_ID: _bindgen_ty_54 = _bindgen_ty_54::SIGEV_THREAD_ID;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_54 {
    SIGEV_SIGNAL = 0,
    SIGEV_NONE = 1,
    SIGEV_THREAD = 2,
    SIGEV_THREAD_ID = 4,
}
pub type __sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int,
                         __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int,
                   __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t,
                    __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(__set: *const sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     ::std::os::raw::c_int,
                                                                 arg2:
                                                                     *mut siginfo_t,
                                                                 arg3:
                                                                     *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigaction__bindgen_ty_1>() , 8usize);
    assert_eq!(::std::mem::align_of::<sigaction__bindgen_ty_1>() , 8usize);
}
impl Clone for sigaction__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(::std::mem::size_of::<sigaction>() , 152usize);
    assert_eq!(::std::mem::align_of::<sigaction>() , 8usize);
}
impl Clone for sigaction {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn sigprocmask(__how: ::std::os::raw::c_int, __set: *const sigset_t,
                       __oset: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(__sig: ::std::os::raw::c_int, __act: *const sigaction,
                     __oact: *mut sigaction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(__set: *const sigset_t, __sig: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(__set: *const sigset_t, __info: *mut siginfo_t,
                        __timeout: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(__pid: __pid_t, __sig: ::std::os::raw::c_int,
                    __val: sigval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_sys_siglist"]
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    #[link_name = "sys_siglist"]
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    assert_eq!(::std::mem::size_of::<_fpx_sw_bytes>() , 48usize);
    assert_eq!(::std::mem::align_of::<_fpx_sw_bytes>() , 8usize);
}
impl Clone for _fpx_sw_bytes {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    assert_eq!(::std::mem::size_of::<_fpreg>() , 10usize);
    assert_eq!(::std::mem::align_of::<_fpreg>() , 2usize);
}
impl Clone for _fpreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    assert_eq!(::std::mem::size_of::<_fpxreg>() , 16usize);
    assert_eq!(::std::mem::align_of::<_fpxreg>() , 2usize);
}
impl Clone for _fpxreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    assert_eq!(::std::mem::size_of::<_xmmreg>() , 16usize);
    assert_eq!(::std::mem::align_of::<_xmmreg>() , 4usize);
}
impl Clone for _xmmreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    assert_eq!(::std::mem::size_of::<_fpstate>() , 512usize);
    assert_eq!(::std::mem::align_of::<_fpstate>() , 8usize);
}
impl Clone for _fpstate {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigcontext__bindgen_ty_1>() , 8usize);
    assert_eq!(::std::mem::align_of::<sigcontext__bindgen_ty_1>() , 8usize);
}
impl Clone for sigcontext__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigcontext() {
    assert_eq!(::std::mem::size_of::<sigcontext>() , 256usize);
    assert_eq!(::std::mem::align_of::<sigcontext>() , 8usize);
}
impl Clone for sigcontext {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    assert_eq!(::std::mem::size_of::<_xsave_hdr>() , 64usize);
    assert_eq!(::std::mem::align_of::<_xsave_hdr>() , 8usize);
}
impl Clone for _xsave_hdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    assert_eq!(::std::mem::size_of::<_ymmh_state>() , 256usize);
    assert_eq!(::std::mem::align_of::<_ymmh_state>() , 4usize);
}
#[repr(C)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    assert_eq!(::std::mem::size_of::<_xstate>() , 832usize);
    assert_eq!(::std::mem::align_of::<_xstate>() , 8usize);
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(__sig: ::std::os::raw::c_int,
                        __interrupt: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(::std::mem::size_of::<sigstack>() , 16usize);
    assert_eq!(::std::mem::align_of::<sigstack>() , 8usize);
}
impl Clone for sigstack {
    fn clone(&self) -> Self { *self }
}
pub const SS_ONSTACK: _bindgen_ty_55 = _bindgen_ty_55::SS_ONSTACK;
pub const SS_DISABLE: _bindgen_ty_55 = _bindgen_ty_55::SS_DISABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_55 { SS_ONSTACK = 1, SS_DISABLE = 2, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_sigaltstack() {
    assert_eq!(::std::mem::size_of::<sigaltstack>() , 24usize);
    assert_eq!(::std::mem::align_of::<sigaltstack>() , 8usize);
}
impl Clone for sigaltstack {
    fn clone(&self) -> Self { *self }
}
pub type stack_t = sigaltstack;
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    assert_eq!(::std::mem::size_of::<_libc_fpxreg>() , 16usize);
    assert_eq!(::std::mem::align_of::<_libc_fpxreg>() , 2usize);
}
impl Clone for _libc_fpxreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    assert_eq!(::std::mem::size_of::<_libc_xmmreg>() , 16usize);
    assert_eq!(::std::mem::align_of::<_libc_xmmreg>() , 4usize);
}
impl Clone for _libc_xmmreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    assert_eq!(::std::mem::size_of::<_libc_fpstate>() , 512usize);
    assert_eq!(::std::mem::align_of::<_libc_fpstate>() , 8usize);
}
impl Clone for _libc_fpstate {
    fn clone(&self) -> Self { *self }
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_56 {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_56() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_56>() , 256usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_56>() , 8usize);
}
impl Clone for _bindgen_ty_56 {
    fn clone(&self) -> Self { *self }
}
pub type mcontext_t = _bindgen_ty_56;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ucontext {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: _libc_fpstate,
}
#[test]
fn bindgen_test_layout_ucontext() {
    assert_eq!(::std::mem::size_of::<ucontext>() , 936usize);
    assert_eq!(::std::mem::align_of::<ucontext>() , 8usize);
}
impl Clone for ucontext {
    fn clone(&self) -> Self { *self }
}
pub type ucontext_t = ucontext;
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(__ss: *const sigaltstack, __oss: *mut sigaltstack)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(__how: ::std::os::raw::c_int,
                           __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(__threadid: pthread_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv__work {
    pub work: ::std::option::Option<unsafe extern "C" fn(w: *mut uv__work)>,
    pub done: ::std::option::Option<unsafe extern "C" fn(w: *mut uv__work,
                                                         status:
                                                             ::std::os::raw::c_int)>,
    pub loop_: *mut uv__work_uv_loop_s,
    pub wq: [*mut ::std::os::raw::c_void; 2usize],
}
#[repr(C)]
pub struct uv__work_uv_loop_s {
    pub data: *mut ::std::os::raw::c_void,
    pub active_handles: ::std::os::raw::c_uint,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub active_reqs: [*mut ::std::os::raw::c_void; 2usize],
    pub stop_flag: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_ulong,
    pub backend_fd: ::std::os::raw::c_int,
    pub pending_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub watcher_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub watchers: *mut *mut uv__io_t,
    pub nwatchers: ::std::os::raw::c_uint,
    pub nfds: ::std::os::raw::c_uint,
    pub wq: [*mut ::std::os::raw::c_void; 2usize],
    pub wq_mutex: uv_mutex_t,
    pub wq_async: uv_async_t,
    pub cloexec_lock: uv_rwlock_t,
    pub closing_handles: *mut uv_handle_t,
    pub process_handles: [*mut ::std::os::raw::c_void; 2usize],
    pub prepare_handles: [*mut ::std::os::raw::c_void; 2usize],
    pub check_handles: [*mut ::std::os::raw::c_void; 2usize],
    pub idle_handles: [*mut ::std::os::raw::c_void; 2usize],
    pub async_handles: [*mut ::std::os::raw::c_void; 2usize],
    pub async_watcher: uv__async,
    pub timer_heap: uv__work_uv_loop_s__bindgen_ty_1,
    pub timer_counter: u64,
    pub time: u64,
    pub signal_pipefd: [::std::os::raw::c_int; 2usize],
    pub signal_io_watcher: uv__io_t,
    pub child_watcher: uv_signal_t,
    pub emfile_fd: ::std::os::raw::c_int,
    pub inotify_read_watcher: uv__io_t,
    pub inotify_watchers: *mut ::std::os::raw::c_void,
    pub inotify_fd: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv__work_uv_loop_s__bindgen_ty_1 {
    pub min: *mut ::std::os::raw::c_void,
    pub nelts: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_uv__work_uv_loop_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv__work_uv_loop_s__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<uv__work_uv_loop_s__bindgen_ty_1>() ,
               8usize);
}
impl Clone for uv__work_uv_loop_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv__work_uv_loop_s() {
    assert_eq!(::std::mem::size_of::<uv__work_uv_loop_s>() , 848usize);
    assert_eq!(::std::mem::align_of::<uv__work_uv_loop_s>() , 8usize);
}
#[test]
fn bindgen_test_layout_uv__work() {
    assert_eq!(::std::mem::size_of::<uv__work>() , 40usize);
    assert_eq!(::std::mem::align_of::<uv__work>() , 8usize);
}
impl Clone for uv__work {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv__io_s {
    pub cb: uv__io_cb,
    pub pending_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub watcher_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub pevents: ::std::os::raw::c_uint,
    pub events: ::std::os::raw::c_uint,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_uv__io_s() {
    assert_eq!(::std::mem::size_of::<uv__io_s>() , 56usize);
    assert_eq!(::std::mem::align_of::<uv__io_s>() , 8usize);
}
impl Clone for uv__io_s {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv__async {
    pub cb: uv__async_cb,
    pub io_watcher: uv__io_t,
    pub wfd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_uv__async() {
    assert_eq!(::std::mem::size_of::<uv__async>() , 72usize);
    assert_eq!(::std::mem::align_of::<uv__async>() , 8usize);
}
impl Clone for uv__async {
    fn clone(&self) -> Self { *self }
}
pub type uv__io_cb =
    ::std::option::Option<unsafe extern "C" fn(loop_: *mut uv__work_uv_loop_s,
                                               w: *mut uv__io_s,
                                               events:
                                                   ::std::os::raw::c_uint)>;
pub type uv__io_t = uv__io_s;
pub type uv__async_cb =
    ::std::option::Option<unsafe extern "C" fn(loop_: *mut uv__work_uv_loop_s,
                                               w: *mut uv__async,
                                               nevents:
                                                   ::std::os::raw::c_uint)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_buf_t {
    pub base: *mut ::std::os::raw::c_char,
    pub len: usize,
}
#[test]
fn bindgen_test_layout_uv_buf_t() {
    assert_eq!(::std::mem::size_of::<uv_buf_t>() , 16usize);
    assert_eq!(::std::mem::align_of::<uv_buf_t>() , 8usize);
}
impl Clone for uv_buf_t {
    fn clone(&self) -> Self { *self }
}
pub type uv_file = ::std::os::raw::c_int;
pub type uv_os_sock_t = ::std::os::raw::c_int;
pub type uv_os_fd_t = ::std::os::raw::c_int;
pub type uv_once_t = pthread_once_t;
pub type uv_thread_t = pthread_t;
pub type uv_mutex_t = pthread_mutex_t;
pub type uv_rwlock_t = pthread_rwlock_t;
pub type uv_sem_t = sem_t;
pub type uv_cond_t = pthread_cond_t;
pub type uv_key_t = pthread_key_t;
pub type uv_barrier_t = pthread_barrier_t;
pub type uv_gid_t = gid_t;
pub type uv_uid_t = uid_t;
pub type uv__dirent_t = dirent;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_57 {
    pub handle: *mut ::std::os::raw::c_void,
    pub errmsg: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__bindgen_ty_57() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_57>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_57>() , 8usize);
}
impl Clone for _bindgen_ty_57 {
    fn clone(&self) -> Self { *self }
}
pub type uv_lib_t = _bindgen_ty_57;
pub const UV_E2BIG: _bindgen_ty_58 = _bindgen_ty_58::UV_E2BIG;
pub const UV_EACCES: _bindgen_ty_58 = _bindgen_ty_58::UV_EACCES;
pub const UV_EADDRINUSE: _bindgen_ty_58 = _bindgen_ty_58::UV_EADDRINUSE;
pub const UV_EADDRNOTAVAIL: _bindgen_ty_58 = _bindgen_ty_58::UV_EADDRNOTAVAIL;
pub const UV_EAFNOSUPPORT: _bindgen_ty_58 = _bindgen_ty_58::UV_EAFNOSUPPORT;
pub const UV_EAGAIN: _bindgen_ty_58 = _bindgen_ty_58::UV_EAGAIN;
pub const UV_EAI_ADDRFAMILY: _bindgen_ty_58 =
    _bindgen_ty_58::UV_EAI_ADDRFAMILY;
pub const UV_EAI_AGAIN: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_AGAIN;
pub const UV_EAI_BADFLAGS: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_BADFLAGS;
pub const UV_EAI_BADHINTS: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_BADHINTS;
pub const UV_EAI_CANCELED: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_CANCELED;
pub const UV_EAI_FAIL: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_FAIL;
pub const UV_EAI_FAMILY: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_FAMILY;
pub const UV_EAI_MEMORY: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_MEMORY;
pub const UV_EAI_NODATA: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_NODATA;
pub const UV_EAI_NONAME: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_NONAME;
pub const UV_EAI_OVERFLOW: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_OVERFLOW;
pub const UV_EAI_PROTOCOL: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_PROTOCOL;
pub const UV_EAI_SERVICE: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_SERVICE;
pub const UV_EAI_SOCKTYPE: _bindgen_ty_58 = _bindgen_ty_58::UV_EAI_SOCKTYPE;
pub const UV_EALREADY: _bindgen_ty_58 = _bindgen_ty_58::UV_EALREADY;
pub const UV_EBADF: _bindgen_ty_58 = _bindgen_ty_58::UV_EBADF;
pub const UV_EBUSY: _bindgen_ty_58 = _bindgen_ty_58::UV_EBUSY;
pub const UV_ECANCELED: _bindgen_ty_58 = _bindgen_ty_58::UV_ECANCELED;
pub const UV_ECHARSET: _bindgen_ty_58 = _bindgen_ty_58::UV_ECHARSET;
pub const UV_ECONNABORTED: _bindgen_ty_58 = _bindgen_ty_58::UV_ECONNABORTED;
pub const UV_ECONNREFUSED: _bindgen_ty_58 = _bindgen_ty_58::UV_ECONNREFUSED;
pub const UV_ECONNRESET: _bindgen_ty_58 = _bindgen_ty_58::UV_ECONNRESET;
pub const UV_EDESTADDRREQ: _bindgen_ty_58 = _bindgen_ty_58::UV_EDESTADDRREQ;
pub const UV_EEXIST: _bindgen_ty_58 = _bindgen_ty_58::UV_EEXIST;
pub const UV_EFAULT: _bindgen_ty_58 = _bindgen_ty_58::UV_EFAULT;
pub const UV_EFBIG: _bindgen_ty_58 = _bindgen_ty_58::UV_EFBIG;
pub const UV_EHOSTUNREACH: _bindgen_ty_58 = _bindgen_ty_58::UV_EHOSTUNREACH;
pub const UV_EINTR: _bindgen_ty_58 = _bindgen_ty_58::UV_EINTR;
pub const UV_EINVAL: _bindgen_ty_58 = _bindgen_ty_58::UV_EINVAL;
pub const UV_EIO: _bindgen_ty_58 = _bindgen_ty_58::UV_EIO;
pub const UV_EISCONN: _bindgen_ty_58 = _bindgen_ty_58::UV_EISCONN;
pub const UV_EISDIR: _bindgen_ty_58 = _bindgen_ty_58::UV_EISDIR;
pub const UV_ELOOP: _bindgen_ty_58 = _bindgen_ty_58::UV_ELOOP;
pub const UV_EMFILE: _bindgen_ty_58 = _bindgen_ty_58::UV_EMFILE;
pub const UV_EMSGSIZE: _bindgen_ty_58 = _bindgen_ty_58::UV_EMSGSIZE;
pub const UV_ENAMETOOLONG: _bindgen_ty_58 = _bindgen_ty_58::UV_ENAMETOOLONG;
pub const UV_ENETDOWN: _bindgen_ty_58 = _bindgen_ty_58::UV_ENETDOWN;
pub const UV_ENETUNREACH: _bindgen_ty_58 = _bindgen_ty_58::UV_ENETUNREACH;
pub const UV_ENFILE: _bindgen_ty_58 = _bindgen_ty_58::UV_ENFILE;
pub const UV_ENOBUFS: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOBUFS;
pub const UV_ENODEV: _bindgen_ty_58 = _bindgen_ty_58::UV_ENODEV;
pub const UV_ENOENT: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOENT;
pub const UV_ENOMEM: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOMEM;
pub const UV_ENONET: _bindgen_ty_58 = _bindgen_ty_58::UV_ENONET;
pub const UV_ENOPROTOOPT: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOPROTOOPT;
pub const UV_ENOSPC: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOSPC;
pub const UV_ENOSYS: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOSYS;
pub const UV_ENOTCONN: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOTCONN;
pub const UV_ENOTDIR: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOTDIR;
pub const UV_ENOTEMPTY: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOTEMPTY;
pub const UV_ENOTSOCK: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOTSOCK;
pub const UV_ENOTSUP: _bindgen_ty_58 = _bindgen_ty_58::UV_ENOTSUP;
pub const UV_EPERM: _bindgen_ty_58 = _bindgen_ty_58::UV_EPERM;
pub const UV_EPIPE: _bindgen_ty_58 = _bindgen_ty_58::UV_EPIPE;
pub const UV_EPROTO: _bindgen_ty_58 = _bindgen_ty_58::UV_EPROTO;
pub const UV_EPROTONOSUPPORT: _bindgen_ty_58 =
    _bindgen_ty_58::UV_EPROTONOSUPPORT;
pub const UV_EPROTOTYPE: _bindgen_ty_58 = _bindgen_ty_58::UV_EPROTOTYPE;
pub const UV_ERANGE: _bindgen_ty_58 = _bindgen_ty_58::UV_ERANGE;
pub const UV_EROFS: _bindgen_ty_58 = _bindgen_ty_58::UV_EROFS;
pub const UV_ESHUTDOWN: _bindgen_ty_58 = _bindgen_ty_58::UV_ESHUTDOWN;
pub const UV_ESPIPE: _bindgen_ty_58 = _bindgen_ty_58::UV_ESPIPE;
pub const UV_ESRCH: _bindgen_ty_58 = _bindgen_ty_58::UV_ESRCH;
pub const UV_ETIMEDOUT: _bindgen_ty_58 = _bindgen_ty_58::UV_ETIMEDOUT;
pub const UV_ETXTBSY: _bindgen_ty_58 = _bindgen_ty_58::UV_ETXTBSY;
pub const UV_EXDEV: _bindgen_ty_58 = _bindgen_ty_58::UV_EXDEV;
pub const UV_UNKNOWN: _bindgen_ty_58 = _bindgen_ty_58::UV_UNKNOWN;
pub const UV_EOF: _bindgen_ty_58 = _bindgen_ty_58::UV_EOF;
pub const UV_ENXIO: _bindgen_ty_58 = _bindgen_ty_58::UV_ENXIO;
pub const UV_EMLINK: _bindgen_ty_58 = _bindgen_ty_58::UV_EMLINK;
pub const UV_EHOSTDOWN: _bindgen_ty_58 = _bindgen_ty_58::UV_EHOSTDOWN;
pub const UV_ERRNO_MAX: _bindgen_ty_58 = _bindgen_ty_58::UV_ERRNO_MAX;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_58 {
    UV_E2BIG = -7,
    UV_EACCES = -13,
    UV_EADDRINUSE = -98,
    UV_EADDRNOTAVAIL = -99,
    UV_EAFNOSUPPORT = -97,
    UV_EAGAIN = -11,
    UV_EAI_ADDRFAMILY = -3000,
    UV_EAI_AGAIN = -3001,
    UV_EAI_BADFLAGS = -3002,
    UV_EAI_BADHINTS = -3013,
    UV_EAI_CANCELED = -3003,
    UV_EAI_FAIL = -3004,
    UV_EAI_FAMILY = -3005,
    UV_EAI_MEMORY = -3006,
    UV_EAI_NODATA = -3007,
    UV_EAI_NONAME = -3008,
    UV_EAI_OVERFLOW = -3009,
    UV_EAI_PROTOCOL = -3014,
    UV_EAI_SERVICE = -3010,
    UV_EAI_SOCKTYPE = -3011,
    UV_EALREADY = -114,
    UV_EBADF = -9,
    UV_EBUSY = -16,
    UV_ECANCELED = -125,
    UV_ECHARSET = -4080,
    UV_ECONNABORTED = -103,
    UV_ECONNREFUSED = -111,
    UV_ECONNRESET = -104,
    UV_EDESTADDRREQ = -89,
    UV_EEXIST = -17,
    UV_EFAULT = -14,
    UV_EFBIG = -27,
    UV_EHOSTUNREACH = -113,
    UV_EINTR = -4,
    UV_EINVAL = -22,
    UV_EIO = -5,
    UV_EISCONN = -106,
    UV_EISDIR = -21,
    UV_ELOOP = -40,
    UV_EMFILE = -24,
    UV_EMSGSIZE = -90,
    UV_ENAMETOOLONG = -36,
    UV_ENETDOWN = -100,
    UV_ENETUNREACH = -101,
    UV_ENFILE = -23,
    UV_ENOBUFS = -105,
    UV_ENODEV = -19,
    UV_ENOENT = -2,
    UV_ENOMEM = -12,
    UV_ENONET = -64,
    UV_ENOPROTOOPT = -92,
    UV_ENOSPC = -28,
    UV_ENOSYS = -38,
    UV_ENOTCONN = -107,
    UV_ENOTDIR = -20,
    UV_ENOTEMPTY = -39,
    UV_ENOTSOCK = -88,
    UV_ENOTSUP = -95,
    UV_EPERM = -1,
    UV_EPIPE = -32,
    UV_EPROTO = -71,
    UV_EPROTONOSUPPORT = -93,
    UV_EPROTOTYPE = -91,
    UV_ERANGE = -34,
    UV_EROFS = -30,
    UV_ESHUTDOWN = -108,
    UV_ESPIPE = -29,
    UV_ESRCH = -3,
    UV_ETIMEDOUT = -110,
    UV_ETXTBSY = -26,
    UV_EXDEV = -18,
    UV_UNKNOWN = -4094,
    UV_EOF = -4095,
    UV_ENXIO = -6,
    UV_EMLINK = -31,
    UV_EHOSTDOWN = -112,
    UV_ERRNO_MAX = -4096,
}
pub use self::_bindgen_ty_58 as uv_errno_t;
pub const UV_UNKNOWN_HANDLE: _bindgen_ty_59 =
    _bindgen_ty_59::UV_UNKNOWN_HANDLE;
pub const UV_ASYNC: _bindgen_ty_59 = _bindgen_ty_59::UV_ASYNC;
pub const UV_CHECK: _bindgen_ty_59 = _bindgen_ty_59::UV_CHECK;
pub const UV_FS_EVENT: _bindgen_ty_59 = _bindgen_ty_59::UV_FS_EVENT;
pub const UV_FS_POLL: _bindgen_ty_59 = _bindgen_ty_59::UV_FS_POLL;
pub const UV_HANDLE: _bindgen_ty_59 = _bindgen_ty_59::UV_HANDLE;
pub const UV_IDLE: _bindgen_ty_59 = _bindgen_ty_59::UV_IDLE;
pub const UV_NAMED_PIPE: _bindgen_ty_59 = _bindgen_ty_59::UV_NAMED_PIPE;
pub const UV_POLL: _bindgen_ty_59 = _bindgen_ty_59::UV_POLL;
pub const UV_PREPARE: _bindgen_ty_59 = _bindgen_ty_59::UV_PREPARE;
pub const UV_PROCESS: _bindgen_ty_59 = _bindgen_ty_59::UV_PROCESS;
pub const UV_STREAM: _bindgen_ty_59 = _bindgen_ty_59::UV_STREAM;
pub const UV_TCP: _bindgen_ty_59 = _bindgen_ty_59::UV_TCP;
pub const UV_TIMER: _bindgen_ty_59 = _bindgen_ty_59::UV_TIMER;
pub const UV_TTY: _bindgen_ty_59 = _bindgen_ty_59::UV_TTY;
pub const UV_UDP: _bindgen_ty_59 = _bindgen_ty_59::UV_UDP;
pub const UV_SIGNAL: _bindgen_ty_59 = _bindgen_ty_59::UV_SIGNAL;
pub const UV_FILE: _bindgen_ty_59 = _bindgen_ty_59::UV_FILE;
pub const UV_HANDLE_TYPE_MAX: _bindgen_ty_59 =
    _bindgen_ty_59::UV_HANDLE_TYPE_MAX;
pub const UV_RAW_FD: _bindgen_ty_59 = _bindgen_ty_59::UV_RAW_FD;
pub const UV_RAW_HANDLE: _bindgen_ty_59 = _bindgen_ty_59::UV_RAW_HANDLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_59 {
    UV_UNKNOWN_HANDLE = 0,
    UV_ASYNC = 1,
    UV_CHECK = 2,
    UV_FS_EVENT = 3,
    UV_FS_POLL = 4,
    UV_HANDLE = 5,
    UV_IDLE = 6,
    UV_NAMED_PIPE = 7,
    UV_POLL = 8,
    UV_PREPARE = 9,
    UV_PROCESS = 10,
    UV_STREAM = 11,
    UV_TCP = 12,
    UV_TIMER = 13,
    UV_TTY = 14,
    UV_UDP = 15,
    UV_SIGNAL = 16,
    UV_FILE = 17,
    UV_HANDLE_TYPE_MAX = 18,
    UV_RAW_FD = 19,
    UV_RAW_HANDLE = 20,
}
pub use self::_bindgen_ty_59 as uv_handle_type;
pub const UV_UNKNOWN_REQ: _bindgen_ty_60 = _bindgen_ty_60::UV_UNKNOWN_REQ;
pub const UV_REQ: _bindgen_ty_60 = _bindgen_ty_60::UV_REQ;
pub const UV_CONNECT: _bindgen_ty_60 = _bindgen_ty_60::UV_CONNECT;
pub const UV_WRITE: _bindgen_ty_60 = _bindgen_ty_60::UV_WRITE;
pub const UV_SHUTDOWN: _bindgen_ty_60 = _bindgen_ty_60::UV_SHUTDOWN;
pub const UV_UDP_SEND: _bindgen_ty_60 = _bindgen_ty_60::UV_UDP_SEND;
pub const UV_FS: _bindgen_ty_60 = _bindgen_ty_60::UV_FS;
pub const UV_WORK: _bindgen_ty_60 = _bindgen_ty_60::UV_WORK;
pub const UV_GETADDRINFO: _bindgen_ty_60 = _bindgen_ty_60::UV_GETADDRINFO;
pub const UV_GETNAMEINFO: _bindgen_ty_60 = _bindgen_ty_60::UV_GETNAMEINFO;
pub const UV_REQ_TYPE_MAX: _bindgen_ty_60 = _bindgen_ty_60::UV_REQ_TYPE_MAX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_60 {
    UV_UNKNOWN_REQ = 0,
    UV_REQ = 1,
    UV_CONNECT = 2,
    UV_WRITE = 3,
    UV_SHUTDOWN = 4,
    UV_UDP_SEND = 5,
    UV_FS = 6,
    UV_WORK = 7,
    UV_GETADDRINFO = 8,
    UV_GETNAMEINFO = 9,
    UV_REQ_TYPE_MAX = 10,
}
pub use self::_bindgen_ty_60 as uv_req_type;
pub type uv_loop_t = uv__work_uv_loop_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_handle_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_handle_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_handle_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_handle_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_handle_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_handle_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_handle_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_handle_s() {
    assert_eq!(::std::mem::size_of::<uv_handle_s>() , 96usize);
    assert_eq!(::std::mem::align_of::<uv_handle_s>() , 8usize);
}
impl Clone for uv_handle_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_handle_t = uv_handle_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_stream_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_stream_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub write_queue_size: usize,
    pub alloc_cb: uv_alloc_cb,
    pub read_cb: uv_read_cb,
    pub connect_req: *mut uv_connect_t,
    pub shutdown_req: *mut uv_shutdown_t,
    pub io_watcher: uv__io_t,
    pub write_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub write_completed_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub connection_cb: uv_connection_cb,
    pub delayed_error: ::std::os::raw::c_int,
    pub accepted_fd: ::std::os::raw::c_int,
    pub queued_fds: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_stream_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_stream_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_stream_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_stream_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_stream_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_stream_s() {
    assert_eq!(::std::mem::size_of::<uv_stream_s>() , 248usize);
    assert_eq!(::std::mem::align_of::<uv_stream_s>() , 8usize);
}
impl Clone for uv_stream_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_stream_t = uv_stream_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_tcp_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_tcp_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub write_queue_size: usize,
    pub alloc_cb: uv_alloc_cb,
    pub read_cb: uv_read_cb,
    pub connect_req: *mut uv_connect_t,
    pub shutdown_req: *mut uv_shutdown_t,
    pub io_watcher: uv__io_t,
    pub write_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub write_completed_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub connection_cb: uv_connection_cb,
    pub delayed_error: ::std::os::raw::c_int,
    pub accepted_fd: ::std::os::raw::c_int,
    pub queued_fds: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_tcp_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_tcp_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_tcp_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_tcp_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_tcp_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_tcp_s() {
    assert_eq!(::std::mem::size_of::<uv_tcp_s>() , 248usize);
    assert_eq!(::std::mem::align_of::<uv_tcp_s>() , 8usize);
}
impl Clone for uv_tcp_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_tcp_t = uv_tcp_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_udp_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_udp_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub send_queue_size: usize,
    pub send_queue_count: usize,
    pub alloc_cb: uv_alloc_cb,
    pub recv_cb: uv_udp_recv_cb,
    pub io_watcher: uv__io_t,
    pub write_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub write_completed_queue: [*mut ::std::os::raw::c_void; 2usize],
}
#[repr(C)]
#[derive(Copy)]
pub union uv_udp_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_udp_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_udp_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_udp_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_udp_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_udp_s() {
    assert_eq!(::std::mem::size_of::<uv_udp_s>() , 216usize);
    assert_eq!(::std::mem::align_of::<uv_udp_s>() , 8usize);
}
impl Clone for uv_udp_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_udp_t = uv_udp_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_pipe_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_pipe_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub write_queue_size: usize,
    pub alloc_cb: uv_alloc_cb,
    pub read_cb: uv_read_cb,
    pub connect_req: *mut uv_connect_t,
    pub shutdown_req: *mut uv_shutdown_t,
    pub io_watcher: uv__io_t,
    pub write_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub write_completed_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub connection_cb: uv_connection_cb,
    pub delayed_error: ::std::os::raw::c_int,
    pub accepted_fd: ::std::os::raw::c_int,
    pub queued_fds: *mut ::std::os::raw::c_void,
    pub pipe_fname: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_pipe_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_pipe_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_pipe_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_pipe_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_pipe_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_pipe_s() {
    assert_eq!(::std::mem::size_of::<uv_pipe_s>() , 256usize);
    assert_eq!(::std::mem::align_of::<uv_pipe_s>() , 8usize);
}
impl Clone for uv_pipe_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_pipe_t = uv_pipe_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_tty_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_tty_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub write_queue_size: usize,
    pub alloc_cb: uv_alloc_cb,
    pub read_cb: uv_read_cb,
    pub connect_req: *mut uv_connect_t,
    pub shutdown_req: *mut uv_shutdown_t,
    pub io_watcher: uv__io_t,
    pub write_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub write_completed_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub connection_cb: uv_connection_cb,
    pub delayed_error: ::std::os::raw::c_int,
    pub accepted_fd: ::std::os::raw::c_int,
    pub queued_fds: *mut ::std::os::raw::c_void,
    pub orig_termios: termios,
    pub mode: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_tty_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_tty_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_tty_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_tty_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_tty_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_tty_s() {
    assert_eq!(::std::mem::size_of::<uv_tty_s>() , 312usize);
    assert_eq!(::std::mem::align_of::<uv_tty_s>() , 8usize);
}
impl Clone for uv_tty_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_tty_t = uv_tty_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_poll_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_poll_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub poll_cb: uv_poll_cb,
    pub io_watcher: uv__io_t,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_poll_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_poll_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_poll_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_poll_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_poll_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_poll_s() {
    assert_eq!(::std::mem::size_of::<uv_poll_s>() , 160usize);
    assert_eq!(::std::mem::align_of::<uv_poll_s>() , 8usize);
}
impl Clone for uv_poll_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_poll_t = uv_poll_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_timer_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_timer_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub timer_cb: uv_timer_cb,
    pub heap_node: [*mut ::std::os::raw::c_void; 3usize],
    pub timeout: u64,
    pub repeat: u64,
    pub start_id: u64,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_timer_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_timer_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_timer_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_timer_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_timer_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_timer_s() {
    assert_eq!(::std::mem::size_of::<uv_timer_s>() , 152usize);
    assert_eq!(::std::mem::align_of::<uv_timer_s>() , 8usize);
}
impl Clone for uv_timer_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_timer_t = uv_timer_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_prepare_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_prepare_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub prepare_cb: uv_prepare_cb,
    pub queue: [*mut ::std::os::raw::c_void; 2usize],
}
#[repr(C)]
#[derive(Copy)]
pub union uv_prepare_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_prepare_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_prepare_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_prepare_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_prepare_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_prepare_s() {
    assert_eq!(::std::mem::size_of::<uv_prepare_s>() , 120usize);
    assert_eq!(::std::mem::align_of::<uv_prepare_s>() , 8usize);
}
impl Clone for uv_prepare_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_prepare_t = uv_prepare_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_check_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_check_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub check_cb: uv_check_cb,
    pub queue: [*mut ::std::os::raw::c_void; 2usize],
}
#[repr(C)]
#[derive(Copy)]
pub union uv_check_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_check_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_check_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_check_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_check_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_check_s() {
    assert_eq!(::std::mem::size_of::<uv_check_s>() , 120usize);
    assert_eq!(::std::mem::align_of::<uv_check_s>() , 8usize);
}
impl Clone for uv_check_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_check_t = uv_check_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_idle_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_idle_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub idle_cb: uv_idle_cb,
    pub queue: [*mut ::std::os::raw::c_void; 2usize],
}
#[repr(C)]
#[derive(Copy)]
pub union uv_idle_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_idle_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_idle_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_idle_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_idle_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_idle_s() {
    assert_eq!(::std::mem::size_of::<uv_idle_s>() , 120usize);
    assert_eq!(::std::mem::align_of::<uv_idle_s>() , 8usize);
}
impl Clone for uv_idle_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_idle_t = uv_idle_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_async_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_async_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub async_cb: uv_async_cb,
    pub queue: [*mut ::std::os::raw::c_void; 2usize],
    pub pending: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_async_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_async_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_async_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_async_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_async_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_async_s() {
    assert_eq!(::std::mem::size_of::<uv_async_s>() , 128usize);
    assert_eq!(::std::mem::align_of::<uv_async_s>() , 8usize);
}
impl Clone for uv_async_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_async_t = uv_async_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_process_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_process_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub exit_cb: uv_exit_cb,
    pub pid: ::std::os::raw::c_int,
    pub queue: [*mut ::std::os::raw::c_void; 2usize],
    pub status: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_process_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_process_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_process_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_process_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_process_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_process_s() {
    assert_eq!(::std::mem::size_of::<uv_process_s>() , 136usize);
    assert_eq!(::std::mem::align_of::<uv_process_s>() , 8usize);
}
impl Clone for uv_process_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_process_t = uv_process_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_fs_event_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_fs_event_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub path: *mut ::std::os::raw::c_char,
    pub cb: uv_fs_event_cb,
    pub watchers: [*mut ::std::os::raw::c_void; 2usize],
    pub wd: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_fs_event_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_fs_event_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_fs_event_s__bindgen_ty_1>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<uv_fs_event_s__bindgen_ty_1>() ,
               8usize);
}
impl Clone for uv_fs_event_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_fs_event_s() {
    assert_eq!(::std::mem::size_of::<uv_fs_event_s>() , 136usize);
    assert_eq!(::std::mem::align_of::<uv_fs_event_s>() , 8usize);
}
impl Clone for uv_fs_event_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_fs_event_t = uv_fs_event_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_fs_poll_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_fs_poll_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub poll_ctx: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_fs_poll_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_fs_poll_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_fs_poll_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_fs_poll_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_fs_poll_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_fs_poll_s() {
    assert_eq!(::std::mem::size_of::<uv_fs_poll_s>() , 104usize);
    assert_eq!(::std::mem::align_of::<uv_fs_poll_s>() , 8usize);
}
impl Clone for uv_fs_poll_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_fs_poll_t = uv_fs_poll_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_signal_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub u: uv_signal_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub signal_cb: uv_signal_cb,
    pub signum: ::std::os::raw::c_int,
    pub tree_entry: uv_signal_s__bindgen_ty_2,
    pub caught_signals: ::std::os::raw::c_uint,
    pub dispatched_signals: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_signal_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_signal_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_signal_s__bindgen_ty_1>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_signal_s__bindgen_ty_1>() , 8usize);
}
impl Clone for uv_signal_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_signal_s__bindgen_ty_2 {
    pub rbe_left: *mut uv_signal_s,
    pub rbe_right: *mut uv_signal_s,
    pub rbe_parent: *mut uv_signal_s,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_uv_signal_s__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<uv_signal_s__bindgen_ty_2>() , 32usize);
    assert_eq!(::std::mem::align_of::<uv_signal_s__bindgen_ty_2>() , 8usize);
}
impl Clone for uv_signal_s__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_signal_s() {
    assert_eq!(::std::mem::size_of::<uv_signal_s>() , 152usize);
    assert_eq!(::std::mem::align_of::<uv_signal_s>() , 8usize);
}
impl Clone for uv_signal_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_signal_t = uv_signal_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_req_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub active_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_uv_req_s() {
    assert_eq!(::std::mem::size_of::<uv_req_s>() , 64usize);
    assert_eq!(::std::mem::align_of::<uv_req_s>() , 8usize);
}
impl Clone for uv_req_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_req_t = uv_req_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_getaddrinfo_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub active_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
    pub loop_: *mut uv_loop_t,
    pub work_req: uv__work,
    pub cb: uv_getaddrinfo_cb,
    pub hints: *mut addrinfo,
    pub hostname: *mut ::std::os::raw::c_char,
    pub service: *mut ::std::os::raw::c_char,
    pub addrinfo: *mut addrinfo,
    pub retcode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_uv_getaddrinfo_s() {
    assert_eq!(::std::mem::size_of::<uv_getaddrinfo_s>() , 160usize);
    assert_eq!(::std::mem::align_of::<uv_getaddrinfo_s>() , 8usize);
}
impl Clone for uv_getaddrinfo_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_getaddrinfo_t = uv_getaddrinfo_s;
#[repr(C)]
pub struct uv_getnameinfo_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub active_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
    pub loop_: *mut uv_loop_t,
    pub work_req: uv__work,
    pub getnameinfo_cb: uv_getnameinfo_cb,
    pub storage: sockaddr_storage,
    pub flags: ::std::os::raw::c_int,
    pub host: [::std::os::raw::c_char; 1025usize],
    pub service: [::std::os::raw::c_char; 32usize],
    pub retcode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_uv_getnameinfo_s() {
    assert_eq!(::std::mem::size_of::<uv_getnameinfo_s>() , 1320usize);
    assert_eq!(::std::mem::align_of::<uv_getnameinfo_s>() , 8usize);
}
pub type uv_getnameinfo_t = uv_getnameinfo_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_shutdown_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub active_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
    pub handle: *mut uv_stream_t,
    pub cb: uv_shutdown_cb,
}
#[test]
fn bindgen_test_layout_uv_shutdown_s() {
    assert_eq!(::std::mem::size_of::<uv_shutdown_s>() , 80usize);
    assert_eq!(::std::mem::align_of::<uv_shutdown_s>() , 8usize);
}
impl Clone for uv_shutdown_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_shutdown_t = uv_shutdown_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_write_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub active_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
    pub cb: uv_write_cb,
    pub send_handle: *mut uv_stream_t,
    pub handle: *mut uv_stream_t,
    pub queue: [*mut ::std::os::raw::c_void; 2usize],
    pub write_index: ::std::os::raw::c_uint,
    pub bufs: *mut uv_buf_t,
    pub nbufs: ::std::os::raw::c_uint,
    pub error: ::std::os::raw::c_int,
    pub bufsml: [uv_buf_t; 4usize],
}
#[test]
fn bindgen_test_layout_uv_write_s() {
    assert_eq!(::std::mem::size_of::<uv_write_s>() , 192usize);
    assert_eq!(::std::mem::align_of::<uv_write_s>() , 8usize);
}
impl Clone for uv_write_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_write_t = uv_write_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_connect_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub active_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
    pub cb: uv_connect_cb,
    pub handle: *mut uv_stream_t,
    pub queue: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_uv_connect_s() {
    assert_eq!(::std::mem::size_of::<uv_connect_s>() , 96usize);
    assert_eq!(::std::mem::align_of::<uv_connect_s>() , 8usize);
}
impl Clone for uv_connect_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_connect_t = uv_connect_s;
#[repr(C)]
pub struct uv_udp_send_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub active_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
    pub handle: *mut uv_udp_t,
    pub cb: uv_udp_send_cb,
    pub queue: [*mut ::std::os::raw::c_void; 2usize],
    pub addr: sockaddr_storage,
    pub nbufs: ::std::os::raw::c_uint,
    pub bufs: *mut uv_buf_t,
    pub status: isize,
    pub send_cb: uv_udp_send_cb,
    pub bufsml: [uv_buf_t; 4usize],
}
#[test]
fn bindgen_test_layout_uv_udp_send_s() {
    assert_eq!(::std::mem::size_of::<uv_udp_send_s>() , 320usize);
    assert_eq!(::std::mem::align_of::<uv_udp_send_s>() , 8usize);
}
pub type uv_udp_send_t = uv_udp_send_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_fs_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub active_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
    pub fs_type: uv_fs_type,
    pub loop_: *mut uv_loop_t,
    pub cb: uv_fs_cb,
    pub result: isize,
    pub ptr: *mut ::std::os::raw::c_void,
    pub path: *const ::std::os::raw::c_char,
    pub statbuf: uv_stat_t,
    pub new_path: *const ::std::os::raw::c_char,
    pub file: uv_file,
    pub flags: ::std::os::raw::c_int,
    pub mode: mode_t,
    pub nbufs: ::std::os::raw::c_uint,
    pub bufs: *mut uv_buf_t,
    pub off: off_t,
    pub uid: uv_uid_t,
    pub gid: uv_gid_t,
    pub atime: f64,
    pub mtime: f64,
    pub work_req: uv__work,
    pub bufsml: [uv_buf_t; 4usize],
}
#[test]
fn bindgen_test_layout_uv_fs_s() {
    assert_eq!(::std::mem::size_of::<uv_fs_s>() , 440usize);
    assert_eq!(::std::mem::align_of::<uv_fs_s>() , 8usize);
}
impl Clone for uv_fs_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_fs_t = uv_fs_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_work_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub active_queue: [*mut ::std::os::raw::c_void; 2usize],
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
    pub loop_: *mut uv_loop_t,
    pub work_cb: uv_work_cb,
    pub after_work_cb: uv_after_work_cb,
    pub work_req: uv__work,
}
#[test]
fn bindgen_test_layout_uv_work_s() {
    assert_eq!(::std::mem::size_of::<uv_work_s>() , 128usize);
    assert_eq!(::std::mem::align_of::<uv_work_s>() , 8usize);
}
impl Clone for uv_work_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_work_t = uv_work_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_cpu_info_s {
    pub model: *mut ::std::os::raw::c_char,
    pub speed: ::std::os::raw::c_int,
    pub cpu_times: uv_cpu_info_s_uv_cpu_times_s,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_cpu_info_s_uv_cpu_times_s {
    pub user: u64,
    pub nice: u64,
    pub sys: u64,
    pub idle: u64,
    pub irq: u64,
}
#[test]
fn bindgen_test_layout_uv_cpu_info_s_uv_cpu_times_s() {
    assert_eq!(::std::mem::size_of::<uv_cpu_info_s_uv_cpu_times_s>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<uv_cpu_info_s_uv_cpu_times_s>() ,
               8usize);
}
impl Clone for uv_cpu_info_s_uv_cpu_times_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_cpu_info_s() {
    assert_eq!(::std::mem::size_of::<uv_cpu_info_s>() , 56usize);
    assert_eq!(::std::mem::align_of::<uv_cpu_info_s>() , 8usize);
}
impl Clone for uv_cpu_info_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_cpu_info_t = uv_cpu_info_s;
#[repr(C)]
#[derive(Copy)]
pub struct uv_interface_address_s {
    pub name: *mut ::std::os::raw::c_char,
    pub phys_addr: [::std::os::raw::c_char; 6usize],
    pub is_internal: ::std::os::raw::c_int,
    pub address: uv_interface_address_s__bindgen_ty_1,
    pub netmask: uv_interface_address_s__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_interface_address_s__bindgen_ty_1 {
    pub address4: sockaddr_in,
    pub address6: sockaddr_in6,
}
#[test]
fn bindgen_test_layout_uv_interface_address_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_interface_address_s__bindgen_ty_1>() ,
               28usize);
    assert_eq!(::std::mem::align_of::<uv_interface_address_s__bindgen_ty_1>()
               , 4usize);
}
impl Clone for uv_interface_address_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union uv_interface_address_s__bindgen_ty_2 {
    pub netmask4: sockaddr_in,
    pub netmask6: sockaddr_in6,
}
#[test]
fn bindgen_test_layout_uv_interface_address_s__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<uv_interface_address_s__bindgen_ty_2>() ,
               28usize);
    assert_eq!(::std::mem::align_of::<uv_interface_address_s__bindgen_ty_2>()
               , 4usize);
}
impl Clone for uv_interface_address_s__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_interface_address_s() {
    assert_eq!(::std::mem::size_of::<uv_interface_address_s>() , 80usize);
    assert_eq!(::std::mem::align_of::<uv_interface_address_s>() , 8usize);
}
impl Clone for uv_interface_address_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_interface_address_t = uv_interface_address_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_dirent_s {
    pub name: *const ::std::os::raw::c_char,
    pub type_: uv_dirent_type_t,
}
#[test]
fn bindgen_test_layout_uv_dirent_s() {
    assert_eq!(::std::mem::size_of::<uv_dirent_s>() , 16usize);
    assert_eq!(::std::mem::align_of::<uv_dirent_s>() , 8usize);
}
impl Clone for uv_dirent_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_dirent_t = uv_dirent_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_passwd_s {
    pub username: *mut ::std::os::raw::c_char,
    pub uid: ::std::os::raw::c_long,
    pub gid: ::std::os::raw::c_long,
    pub shell: *mut ::std::os::raw::c_char,
    pub homedir: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_uv_passwd_s() {
    assert_eq!(::std::mem::size_of::<uv_passwd_s>() , 40usize);
    assert_eq!(::std::mem::align_of::<uv_passwd_s>() , 8usize);
}
impl Clone for uv_passwd_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_passwd_t = uv_passwd_s;
pub const UV_LOOP_BLOCK_SIGNAL: _bindgen_ty_61 =
    _bindgen_ty_61::UV_LOOP_BLOCK_SIGNAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_61 { UV_LOOP_BLOCK_SIGNAL = 0, }
pub use self::_bindgen_ty_61 as uv_loop_option;
pub const UV_RUN_DEFAULT: _bindgen_ty_62 = _bindgen_ty_62::UV_RUN_DEFAULT;
pub const UV_RUN_ONCE: _bindgen_ty_62 = _bindgen_ty_62::UV_RUN_ONCE;
pub const UV_RUN_NOWAIT: _bindgen_ty_62 = _bindgen_ty_62::UV_RUN_NOWAIT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_62 {
    UV_RUN_DEFAULT = 0,
    UV_RUN_ONCE = 1,
    UV_RUN_NOWAIT = 2,
}
pub use self::_bindgen_ty_62 as uv_run_mode;
extern "C" {
    pub fn uv_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn uv_version_string() -> *const ::std::os::raw::c_char;
}
pub type uv_malloc_func =
    ::std::option::Option<unsafe extern "C" fn(size: usize)
                              -> *mut ::std::os::raw::c_void>;
pub type uv_realloc_func =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *mut ::std::os::raw::c_void,
                                               size: usize)
                              -> *mut ::std::os::raw::c_void>;
pub type uv_calloc_func =
    ::std::option::Option<unsafe extern "C" fn(count: usize, size: usize)
                              -> *mut ::std::os::raw::c_void>;
pub type uv_free_func =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn uv_replace_allocator(malloc_func: uv_malloc_func,
                                realloc_func: uv_realloc_func,
                                calloc_func: uv_calloc_func,
                                free_func: uv_free_func)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_default_loop() -> *mut uv_loop_t;
}
extern "C" {
    pub fn uv_loop_init(loop_: *mut uv_loop_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_loop_close(loop_: *mut uv_loop_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_loop_new() -> *mut uv_loop_t;
}
extern "C" {
    pub fn uv_loop_delete(arg1: *mut uv_loop_t);
}
extern "C" {
    pub fn uv_loop_size() -> usize;
}
extern "C" {
    pub fn uv_loop_alive(loop_: *const uv_loop_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_loop_configure(loop_: *mut uv_loop_t,
                             option: uv_loop_option, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_run(arg1: *mut uv_loop_t, mode: uv_run_mode)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_stop(arg1: *mut uv_loop_t);
}
extern "C" {
    pub fn uv_ref(arg1: *mut uv_handle_t);
}
extern "C" {
    pub fn uv_unref(arg1: *mut uv_handle_t);
}
extern "C" {
    pub fn uv_has_ref(arg1: *const uv_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_update_time(arg1: *mut uv_loop_t);
}
extern "C" {
    pub fn uv_now(arg1: *const uv_loop_t) -> u64;
}
extern "C" {
    pub fn uv_backend_fd(arg1: *const uv_loop_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_backend_timeout(arg1: *const uv_loop_t)
     -> ::std::os::raw::c_int;
}
pub type uv_alloc_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_handle_t,
                                               suggested_size: usize,
                                               buf: *mut uv_buf_t)>;
pub type uv_read_cb =
    ::std::option::Option<unsafe extern "C" fn(stream: *mut uv_stream_t,
                                               nread: isize,
                                               buf: *const uv_buf_t)>;
pub type uv_write_cb =
    ::std::option::Option<unsafe extern "C" fn(req: *mut uv_write_t,
                                               status:
                                                   ::std::os::raw::c_int)>;
pub type uv_connect_cb =
    ::std::option::Option<unsafe extern "C" fn(req: *mut uv_connect_t,
                                               status:
                                                   ::std::os::raw::c_int)>;
pub type uv_shutdown_cb =
    ::std::option::Option<unsafe extern "C" fn(req: *mut uv_shutdown_t,
                                               status:
                                                   ::std::os::raw::c_int)>;
pub type uv_connection_cb =
    ::std::option::Option<unsafe extern "C" fn(server: *mut uv_stream_t,
                                               status:
                                                   ::std::os::raw::c_int)>;
pub type uv_close_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_handle_t)>;
pub type uv_poll_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_poll_t,
                                               status: ::std::os::raw::c_int,
                                               events:
                                                   ::std::os::raw::c_int)>;
pub type uv_timer_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_timer_t)>;
pub type uv_async_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_async_t)>;
pub type uv_prepare_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_prepare_t)>;
pub type uv_check_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_check_t)>;
pub type uv_idle_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_idle_t)>;
pub type uv_exit_cb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut uv_process_t,
                                               exit_status: i64,
                                               term_signal:
                                                   ::std::os::raw::c_int)>;
pub type uv_walk_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_handle_t,
                                               arg:
                                                   *mut ::std::os::raw::c_void)>;
pub type uv_fs_cb =
    ::std::option::Option<unsafe extern "C" fn(req: *mut uv_fs_t)>;
pub type uv_work_cb =
    ::std::option::Option<unsafe extern "C" fn(req: *mut uv_work_t)>;
pub type uv_after_work_cb =
    ::std::option::Option<unsafe extern "C" fn(req: *mut uv_work_t,
                                               status:
                                                   ::std::os::raw::c_int)>;
pub type uv_getaddrinfo_cb =
    ::std::option::Option<unsafe extern "C" fn(req: *mut uv_getaddrinfo_t,
                                               status: ::std::os::raw::c_int,
                                               res: *mut addrinfo)>;
pub type uv_getnameinfo_cb =
    ::std::option::Option<unsafe extern "C" fn(req: *mut uv_getnameinfo_t,
                                               status: ::std::os::raw::c_int,
                                               hostname:
                                                   *const ::std::os::raw::c_char,
                                               service:
                                                   *const ::std::os::raw::c_char)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_63 {
    pub tv_sec: ::std::os::raw::c_long,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_63() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_63>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_63>() , 8usize);
}
impl Clone for _bindgen_ty_63 {
    fn clone(&self) -> Self { *self }
}
pub type uv_timespec_t = _bindgen_ty_63;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_64 {
    pub st_dev: u64,
    pub st_mode: u64,
    pub st_nlink: u64,
    pub st_uid: u64,
    pub st_gid: u64,
    pub st_rdev: u64,
    pub st_ino: u64,
    pub st_size: u64,
    pub st_blksize: u64,
    pub st_blocks: u64,
    pub st_flags: u64,
    pub st_gen: u64,
    pub st_atim: uv_timespec_t,
    pub st_mtim: uv_timespec_t,
    pub st_ctim: uv_timespec_t,
    pub st_birthtim: uv_timespec_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_64() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_64>() , 160usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_64>() , 8usize);
}
impl Clone for _bindgen_ty_64 {
    fn clone(&self) -> Self { *self }
}
pub type uv_stat_t = _bindgen_ty_64;
pub type uv_fs_event_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_fs_event_t,
                                               filename:
                                                   *const ::std::os::raw::c_char,
                                               events: ::std::os::raw::c_int,
                                               status:
                                                   ::std::os::raw::c_int)>;
pub type uv_fs_poll_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_fs_poll_t,
                                               status: ::std::os::raw::c_int,
                                               prev: *const uv_stat_t,
                                               curr: *const uv_stat_t)>;
pub type uv_signal_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_signal_t,
                                               signum:
                                                   ::std::os::raw::c_int)>;
pub const UV_LEAVE_GROUP: _bindgen_ty_65 = _bindgen_ty_65::UV_LEAVE_GROUP;
pub const UV_JOIN_GROUP: _bindgen_ty_65 = _bindgen_ty_65::UV_JOIN_GROUP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_65 { UV_LEAVE_GROUP = 0, UV_JOIN_GROUP = 1, }
pub use self::_bindgen_ty_65 as uv_membership;
extern "C" {
    pub fn uv_strerror(err: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uv_err_name(err: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uv_shutdown(req: *mut uv_shutdown_t, handle: *mut uv_stream_t,
                       cb: uv_shutdown_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_handle_size(type_: uv_handle_type) -> usize;
}
extern "C" {
    pub fn uv_req_size(type_: uv_req_type) -> usize;
}
extern "C" {
    pub fn uv_is_active(handle: *const uv_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_walk(loop_: *mut uv_loop_t, walk_cb: uv_walk_cb,
                   arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn uv_print_all_handles(loop_: *mut uv_loop_t, stream: *mut FILE);
}
extern "C" {
    pub fn uv_print_active_handles(loop_: *mut uv_loop_t, stream: *mut FILE);
}
extern "C" {
    pub fn uv_close(handle: *mut uv_handle_t, close_cb: uv_close_cb);
}
extern "C" {
    pub fn uv_send_buffer_size(handle: *mut uv_handle_t,
                               value: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_recv_buffer_size(handle: *mut uv_handle_t,
                               value: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fileno(handle: *const uv_handle_t, fd: *mut uv_os_fd_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_buf_init(base: *mut ::std::os::raw::c_char,
                       len: ::std::os::raw::c_uint) -> uv_buf_t;
}
extern "C" {
    pub fn uv_listen(stream: *mut uv_stream_t, backlog: ::std::os::raw::c_int,
                     cb: uv_connection_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_accept(server: *mut uv_stream_t, client: *mut uv_stream_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_read_start(arg1: *mut uv_stream_t, alloc_cb: uv_alloc_cb,
                         read_cb: uv_read_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_read_stop(arg1: *mut uv_stream_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_write(req: *mut uv_write_t, handle: *mut uv_stream_t,
                    bufs: *mut uv_buf_t, nbufs: ::std::os::raw::c_uint,
                    cb: uv_write_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_write2(req: *mut uv_write_t, handle: *mut uv_stream_t,
                     bufs: *mut uv_buf_t, nbufs: ::std::os::raw::c_uint,
                     send_handle: *mut uv_stream_t, cb: uv_write_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_try_write(handle: *mut uv_stream_t, bufs: *mut uv_buf_t,
                        nbufs: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_is_readable(handle: *const uv_stream_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_is_writable(handle: *const uv_stream_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_stream_set_blocking(handle: *mut uv_stream_t,
                                  blocking: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_is_closing(handle: *const uv_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tcp_init(arg1: *mut uv_loop_t, handle: *mut uv_tcp_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tcp_init_ex(arg1: *mut uv_loop_t, handle: *mut uv_tcp_t,
                          flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tcp_open(handle: *mut uv_tcp_t, sock: uv_os_sock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tcp_nodelay(handle: *mut uv_tcp_t,
                          enable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tcp_keepalive(handle: *mut uv_tcp_t,
                            enable: ::std::os::raw::c_int,
                            delay: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tcp_simultaneous_accepts(handle: *mut uv_tcp_t,
                                       enable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum uv_tcp_flags { UV_TCP_IPV6ONLY = 1, }
extern "C" {
    pub fn uv_tcp_bind(handle: *mut uv_tcp_t, addr: *const sockaddr,
                       flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tcp_getsockname(handle: *const uv_tcp_t, name: *mut sockaddr,
                              namelen: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tcp_getpeername(handle: *const uv_tcp_t, name: *mut sockaddr,
                              namelen: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tcp_connect(req: *mut uv_connect_t, handle: *mut uv_tcp_t,
                          addr: *const sockaddr, cb: uv_connect_cb)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum uv_udp_flags {
    UV_UDP_IPV6ONLY = 1,
    UV_UDP_PARTIAL = 2,
    UV_UDP_REUSEADDR = 4,
}
pub type uv_udp_send_cb =
    ::std::option::Option<unsafe extern "C" fn(req: *mut uv_udp_send_t,
                                               status:
                                                   ::std::os::raw::c_int)>;
pub type uv_udp_recv_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_udp_t,
                                               nread: isize,
                                               buf: *const uv_buf_t,
                                               addr: *const sockaddr,
                                               flags:
                                                   ::std::os::raw::c_uint)>;
extern "C" {
    pub fn uv_udp_init(arg1: *mut uv_loop_t, handle: *mut uv_udp_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_init_ex(arg1: *mut uv_loop_t, handle: *mut uv_udp_t,
                          flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_open(handle: *mut uv_udp_t, sock: uv_os_sock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_bind(handle: *mut uv_udp_t, addr: *const sockaddr,
                       flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_getsockname(handle: *const uv_udp_t, name: *mut sockaddr,
                              namelen: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_set_membership(handle: *mut uv_udp_t,
                                 multicast_addr:
                                     *const ::std::os::raw::c_char,
                                 interface_addr:
                                     *const ::std::os::raw::c_char,
                                 membership: uv_membership)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_set_multicast_loop(handle: *mut uv_udp_t,
                                     on: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_set_multicast_ttl(handle: *mut uv_udp_t,
                                    ttl: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_set_multicast_interface(handle: *mut uv_udp_t,
                                          interface_addr:
                                              *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_set_broadcast(handle: *mut uv_udp_t,
                                on: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_set_ttl(handle: *mut uv_udp_t, ttl: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_send(req: *mut uv_udp_send_t, handle: *mut uv_udp_t,
                       bufs: *mut uv_buf_t, nbufs: ::std::os::raw::c_uint,
                       addr: *const sockaddr, send_cb: uv_udp_send_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_try_send(handle: *mut uv_udp_t, bufs: *mut uv_buf_t,
                           nbufs: ::std::os::raw::c_uint,
                           addr: *const sockaddr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_recv_start(handle: *mut uv_udp_t, alloc_cb: uv_alloc_cb,
                             recv_cb: uv_udp_recv_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_udp_recv_stop(handle: *mut uv_udp_t) -> ::std::os::raw::c_int;
}
pub const UV_TTY_MODE_NORMAL: _bindgen_ty_66 =
    _bindgen_ty_66::UV_TTY_MODE_NORMAL;
pub const UV_TTY_MODE_RAW: _bindgen_ty_66 = _bindgen_ty_66::UV_TTY_MODE_RAW;
pub const UV_TTY_MODE_IO: _bindgen_ty_66 = _bindgen_ty_66::UV_TTY_MODE_IO;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_66 {
    UV_TTY_MODE_NORMAL = 0,
    UV_TTY_MODE_RAW = 1,
    UV_TTY_MODE_IO = 2,
}
pub use self::_bindgen_ty_66 as uv_tty_mode_t;
extern "C" {
    pub fn uv_tty_init(arg1: *mut uv_loop_t, arg2: *mut uv_tty_t, fd: uv_file,
                       readable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tty_set_mode(arg1: *mut uv_tty_t, mode: uv_tty_mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tty_reset_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_tty_get_winsize(arg1: *mut uv_tty_t,
                              width: *mut ::std::os::raw::c_int,
                              height: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_guess_handle(file: uv_file) -> uv_handle_type;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum uv_pipe_flags {
    UV_PIPE_IPC = 1,
    UV_PIPE_SPAWN_SAFE = 2,
    UV_PIPE_READABLE = 4,
    UV_PIPE_WRITABLE = 8,
}
extern "C" {
    pub fn uv_pipe_init(arg1: *mut uv_loop_t, handle: *mut uv_pipe_t,
                        flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_pipe_link(read: *mut uv_pipe_t, write: *mut uv_pipe_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_pipe_close_sync(pipe: *mut uv_pipe_t);
}
extern "C" {
    pub fn uv_pipe_open(arg1: *mut uv_pipe_t, file: uv_file)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_pipe_bind(handle: *mut uv_pipe_t,
                        name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_pipe_connect(req: *mut uv_connect_t, handle: *mut uv_pipe_t,
                           name: *const ::std::os::raw::c_char,
                           cb: uv_connect_cb);
}
extern "C" {
    pub fn uv_pipe_getsockname(handle: *const uv_pipe_t,
                               buffer: *mut ::std::os::raw::c_char,
                               size: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_pipe_getpeername(handle: *const uv_pipe_t,
                               buffer: *mut ::std::os::raw::c_char,
                               size: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_pipe_pending_instances(handle: *mut uv_pipe_t,
                                     count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uv_pipe_pending_count(handle: *mut uv_pipe_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_pipe_pending_type(handle: *mut uv_pipe_t) -> uv_handle_type;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum uv_poll_event {
    UV_READABLE = 1,
    UV_WRITABLE = 2,
    UV_DISCONNECT = 4,
}
extern "C" {
    pub fn uv_poll_init(loop_: *mut uv_loop_t, handle: *mut uv_poll_t,
                        fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_poll_init_socket(loop_: *mut uv_loop_t, handle: *mut uv_poll_t,
                               socket: uv_os_sock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_poll_start(handle: *mut uv_poll_t,
                         events: ::std::os::raw::c_int, cb: uv_poll_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_poll_stop(handle: *mut uv_poll_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_prepare_init(arg1: *mut uv_loop_t, prepare: *mut uv_prepare_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_prepare_start(prepare: *mut uv_prepare_t, cb: uv_prepare_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_prepare_stop(prepare: *mut uv_prepare_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_check_init(arg1: *mut uv_loop_t, check: *mut uv_check_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_check_start(check: *mut uv_check_t, cb: uv_check_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_check_stop(check: *mut uv_check_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_idle_init(arg1: *mut uv_loop_t, idle: *mut uv_idle_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_idle_start(idle: *mut uv_idle_t, cb: uv_idle_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_idle_stop(idle: *mut uv_idle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_async_init(arg1: *mut uv_loop_t, async: *mut uv_async_t,
                         async_cb: uv_async_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_async_send(async: *mut uv_async_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_timer_init(arg1: *mut uv_loop_t, handle: *mut uv_timer_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_timer_start(handle: *mut uv_timer_t, cb: uv_timer_cb,
                          timeout: u64, repeat: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_timer_stop(handle: *mut uv_timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_timer_again(handle: *mut uv_timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_timer_set_repeat(handle: *mut uv_timer_t, repeat: u64);
}
extern "C" {
    pub fn uv_timer_get_repeat(handle: *const uv_timer_t) -> u64;
}
extern "C" {
    pub fn uv_getaddrinfo(loop_: *mut uv_loop_t, req: *mut uv_getaddrinfo_t,
                          getaddrinfo_cb: uv_getaddrinfo_cb,
                          node: *const ::std::os::raw::c_char,
                          service: *const ::std::os::raw::c_char,
                          hints: *const addrinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_freeaddrinfo(ai: *mut addrinfo);
}
extern "C" {
    pub fn uv_getnameinfo(loop_: *mut uv_loop_t, req: *mut uv_getnameinfo_t,
                          getnameinfo_cb: uv_getnameinfo_cb,
                          addr: *const sockaddr, flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy)]
pub struct uv_stdio_container_s {
    pub type_: uv_handle_type,
    pub data: uv_stdio_container_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union uv_stdio_container_s__bindgen_ty_1 {
    pub stream: *mut uv_stream_t,
    pub fd: uv_file,
    pub os_handle: uv_os_fd_t,
}
#[test]
fn bindgen_test_layout_uv_stdio_container_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<uv_stdio_container_s__bindgen_ty_1>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<uv_stdio_container_s__bindgen_ty_1>() ,
               8usize);
}
impl Clone for uv_stdio_container_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_uv_stdio_container_s() {
    assert_eq!(::std::mem::size_of::<uv_stdio_container_s>() , 16usize);
    assert_eq!(::std::mem::align_of::<uv_stdio_container_s>() , 8usize);
}
impl Clone for uv_stdio_container_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_stdio_container_t = uv_stdio_container_s;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uv_process_options_s {
    pub exit_cb: uv_exit_cb,
    pub file: *const ::std::os::raw::c_char,
    pub args: *mut *mut ::std::os::raw::c_char,
    pub env: *mut *mut ::std::os::raw::c_char,
    pub cwd: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_uint,
    pub stdio_count: ::std::os::raw::c_int,
    pub stdio: *mut uv_stdio_container_t,
    pub uid: uv_uid_t,
    pub gid: uv_gid_t,
}
#[test]
fn bindgen_test_layout_uv_process_options_s() {
    assert_eq!(::std::mem::size_of::<uv_process_options_s>() , 64usize);
    assert_eq!(::std::mem::align_of::<uv_process_options_s>() , 8usize);
}
impl Clone for uv_process_options_s {
    fn clone(&self) -> Self { *self }
}
pub type uv_process_options_t = uv_process_options_s;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum uv_process_flags {
    UV_PROCESS_SETUID = 1,
    UV_PROCESS_SETGID = 2,
    UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS = 4,
    UV_PROCESS_DETACHED = 8,
    UV_PROCESS_WINDOWS_HIDE = 16,
    UV_PROCESS_RESET_SIGPIPE = 32,
}
extern "C" {
    pub fn uv_spawn(loop_: *mut uv_loop_t, handle: *mut uv_process_t,
                    options: *const uv_process_options_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_process_kill(arg1: *mut uv_process_t,
                           signum: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_kill(pid: ::std::os::raw::c_int, signum: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_queue_work(loop_: *mut uv_loop_t, req: *mut uv_work_t,
                         work_cb: uv_work_cb, after_work_cb: uv_after_work_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_cancel(req: *mut uv_req_t) -> ::std::os::raw::c_int;
}
pub const UV_DIRENT_UNKNOWN: _bindgen_ty_67 =
    _bindgen_ty_67::UV_DIRENT_UNKNOWN;
pub const UV_DIRENT_FILE: _bindgen_ty_67 = _bindgen_ty_67::UV_DIRENT_FILE;
pub const UV_DIRENT_DIR: _bindgen_ty_67 = _bindgen_ty_67::UV_DIRENT_DIR;
pub const UV_DIRENT_LINK: _bindgen_ty_67 = _bindgen_ty_67::UV_DIRENT_LINK;
pub const UV_DIRENT_FIFO: _bindgen_ty_67 = _bindgen_ty_67::UV_DIRENT_FIFO;
pub const UV_DIRENT_SOCKET: _bindgen_ty_67 = _bindgen_ty_67::UV_DIRENT_SOCKET;
pub const UV_DIRENT_CHAR: _bindgen_ty_67 = _bindgen_ty_67::UV_DIRENT_CHAR;
pub const UV_DIRENT_BLOCK: _bindgen_ty_67 = _bindgen_ty_67::UV_DIRENT_BLOCK;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_67 {
    UV_DIRENT_UNKNOWN = 0,
    UV_DIRENT_FILE = 1,
    UV_DIRENT_DIR = 2,
    UV_DIRENT_LINK = 3,
    UV_DIRENT_FIFO = 4,
    UV_DIRENT_SOCKET = 5,
    UV_DIRENT_CHAR = 6,
    UV_DIRENT_BLOCK = 7,
}
pub use self::_bindgen_ty_67 as uv_dirent_type_t;
extern "C" {
    pub fn uv_setup_args(argc: ::std::os::raw::c_int,
                         argv: *mut *mut ::std::os::raw::c_char)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uv_get_process_title(buffer: *mut ::std::os::raw::c_char,
                                size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_set_process_title(title: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_resident_set_memory(rss: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_uptime(uptime: *mut f64) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_68 {
    pub tv_sec: ::std::os::raw::c_long,
    pub tv_usec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_68() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_68>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_68>() , 8usize);
}
impl Clone for _bindgen_ty_68 {
    fn clone(&self) -> Self { *self }
}
pub type uv_timeval_t = _bindgen_ty_68;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_69 {
    pub ru_utime: uv_timeval_t,
    pub ru_stime: uv_timeval_t,
    pub ru_maxrss: u64,
    pub ru_ixrss: u64,
    pub ru_idrss: u64,
    pub ru_isrss: u64,
    pub ru_minflt: u64,
    pub ru_majflt: u64,
    pub ru_nswap: u64,
    pub ru_inblock: u64,
    pub ru_oublock: u64,
    pub ru_msgsnd: u64,
    pub ru_msgrcv: u64,
    pub ru_nsignals: u64,
    pub ru_nvcsw: u64,
    pub ru_nivcsw: u64,
}
#[test]
fn bindgen_test_layout__bindgen_ty_69() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_69>() , 144usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_69>() , 8usize);
}
impl Clone for _bindgen_ty_69 {
    fn clone(&self) -> Self { *self }
}
pub type uv_rusage_t = _bindgen_ty_69;
extern "C" {
    pub fn uv_getrusage(rusage: *mut uv_rusage_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_os_homedir(buffer: *mut ::std::os::raw::c_char,
                         size: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_os_tmpdir(buffer: *mut ::std::os::raw::c_char, size: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_os_get_passwd(pwd: *mut uv_passwd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_os_free_passwd(pwd: *mut uv_passwd_t);
}
extern "C" {
    pub fn uv_cpu_info(cpu_infos: *mut *mut uv_cpu_info_t,
                       count: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_free_cpu_info(cpu_infos: *mut uv_cpu_info_t,
                            count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uv_interface_addresses(addresses: *mut *mut uv_interface_address_t,
                                  count: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_free_interface_addresses(addresses: *mut uv_interface_address_t,
                                       count: ::std::os::raw::c_int);
}
pub const UV_FS_UNKNOWN: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_UNKNOWN;
pub const UV_FS_CUSTOM: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_CUSTOM;
pub const UV_FS_OPEN: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_OPEN;
pub const UV_FS_CLOSE: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_CLOSE;
pub const UV_FS_READ: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_READ;
pub const UV_FS_WRITE: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_WRITE;
pub const UV_FS_SENDFILE: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_SENDFILE;
pub const UV_FS_STAT: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_STAT;
pub const UV_FS_LSTAT: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_LSTAT;
pub const UV_FS_FSTAT: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_FSTAT;
pub const UV_FS_FTRUNCATE: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_FTRUNCATE;
pub const UV_FS_UTIME: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_UTIME;
pub const UV_FS_FUTIME: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_FUTIME;
pub const UV_FS_ACCESS: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_ACCESS;
pub const UV_FS_CHMOD: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_CHMOD;
pub const UV_FS_FCHMOD: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_FCHMOD;
pub const UV_FS_FSYNC: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_FSYNC;
pub const UV_FS_FDATASYNC: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_FDATASYNC;
pub const UV_FS_UNLINK: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_UNLINK;
pub const UV_FS_RMDIR: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_RMDIR;
pub const UV_FS_MKDIR: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_MKDIR;
pub const UV_FS_MKDTEMP: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_MKDTEMP;
pub const UV_FS_RENAME: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_RENAME;
pub const UV_FS_SCANDIR: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_SCANDIR;
pub const UV_FS_LINK: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_LINK;
pub const UV_FS_SYMLINK: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_SYMLINK;
pub const UV_FS_READLINK: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_READLINK;
pub const UV_FS_CHOWN: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_CHOWN;
pub const UV_FS_FCHOWN: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_FCHOWN;
pub const UV_FS_REALPATH: _bindgen_ty_70 = _bindgen_ty_70::UV_FS_REALPATH;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_70 {
    UV_FS_UNKNOWN = -1,
    UV_FS_CUSTOM = 0,
    UV_FS_OPEN = 1,
    UV_FS_CLOSE = 2,
    UV_FS_READ = 3,
    UV_FS_WRITE = 4,
    UV_FS_SENDFILE = 5,
    UV_FS_STAT = 6,
    UV_FS_LSTAT = 7,
    UV_FS_FSTAT = 8,
    UV_FS_FTRUNCATE = 9,
    UV_FS_UTIME = 10,
    UV_FS_FUTIME = 11,
    UV_FS_ACCESS = 12,
    UV_FS_CHMOD = 13,
    UV_FS_FCHMOD = 14,
    UV_FS_FSYNC = 15,
    UV_FS_FDATASYNC = 16,
    UV_FS_UNLINK = 17,
    UV_FS_RMDIR = 18,
    UV_FS_MKDIR = 19,
    UV_FS_MKDTEMP = 20,
    UV_FS_RENAME = 21,
    UV_FS_SCANDIR = 22,
    UV_FS_LINK = 23,
    UV_FS_SYMLINK = 24,
    UV_FS_READLINK = 25,
    UV_FS_CHOWN = 26,
    UV_FS_FCHOWN = 27,
    UV_FS_REALPATH = 28,
}
pub use self::_bindgen_ty_70 as uv_fs_type;
extern "C" {
    pub fn uv_fs_req_cleanup(req: *mut uv_fs_t);
}
extern "C" {
    pub fn uv_fs_close(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                       file: uv_file, cb: uv_fs_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_open(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                      path: *const ::std::os::raw::c_char,
                      flags: ::std::os::raw::c_int,
                      mode: ::std::os::raw::c_int, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_read(loop_: *mut uv_loop_t, req: *mut uv_fs_t, file: uv_file,
                      bufs: *mut uv_buf_t, nbufs: ::std::os::raw::c_uint,
                      offset: i64, cb: uv_fs_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_unlink(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                        path: *const ::std::os::raw::c_char, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_write(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                       file: uv_file, bufs: *mut uv_buf_t,
                       nbufs: ::std::os::raw::c_uint, offset: i64,
                       cb: uv_fs_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_mkdir(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                       path: *const ::std::os::raw::c_char,
                       mode: ::std::os::raw::c_int, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_mkdtemp(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                         tpl: *const ::std::os::raw::c_char, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_rmdir(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                       path: *const ::std::os::raw::c_char, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_scandir(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                         path: *const ::std::os::raw::c_char,
                         flags: ::std::os::raw::c_int, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_scandir_next(req: *mut uv_fs_t, ent: *mut uv_dirent_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_stat(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                      path: *const ::std::os::raw::c_char, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_fstat(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                       file: uv_file, cb: uv_fs_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_rename(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                        path: *const ::std::os::raw::c_char,
                        new_path: *const ::std::os::raw::c_char, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_fsync(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                       file: uv_file, cb: uv_fs_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_fdatasync(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                           file: uv_file, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_ftruncate(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                           file: uv_file, offset: i64, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_sendfile(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                          out_fd: uv_file, in_fd: uv_file, in_offset: i64,
                          length: usize, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_access(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                        path: *const ::std::os::raw::c_char,
                        mode: ::std::os::raw::c_int, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_chmod(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                       path: *const ::std::os::raw::c_char,
                       mode: ::std::os::raw::c_int, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_utime(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                       path: *const ::std::os::raw::c_char, atime: f64,
                       mtime: f64, cb: uv_fs_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_futime(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                        file: uv_file, atime: f64, mtime: f64, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_lstat(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                       path: *const ::std::os::raw::c_char, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_link(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                      path: *const ::std::os::raw::c_char,
                      new_path: *const ::std::os::raw::c_char, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_symlink(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                         path: *const ::std::os::raw::c_char,
                         new_path: *const ::std::os::raw::c_char,
                         flags: ::std::os::raw::c_int, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_readlink(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                          path: *const ::std::os::raw::c_char, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_realpath(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                          path: *const ::std::os::raw::c_char, cb: uv_fs_cb)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_fchmod(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                        file: uv_file, mode: ::std::os::raw::c_int,
                        cb: uv_fs_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_chown(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                       path: *const ::std::os::raw::c_char, uid: uv_uid_t,
                       gid: uv_gid_t, cb: uv_fs_cb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_fchown(loop_: *mut uv_loop_t, req: *mut uv_fs_t,
                        file: uv_file, uid: uv_uid_t, gid: uv_gid_t,
                        cb: uv_fs_cb) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum uv_fs_event { UV_RENAME = 1, UV_CHANGE = 2, }
extern "C" {
    pub fn uv_fs_poll_init(loop_: *mut uv_loop_t, handle: *mut uv_fs_poll_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_poll_start(handle: *mut uv_fs_poll_t, poll_cb: uv_fs_poll_cb,
                            path: *const ::std::os::raw::c_char,
                            interval: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_poll_stop(handle: *mut uv_fs_poll_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_poll_getpath(handle: *mut uv_fs_poll_t,
                              buffer: *mut ::std::os::raw::c_char,
                              size: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_signal_init(loop_: *mut uv_loop_t, handle: *mut uv_signal_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_signal_start(handle: *mut uv_signal_t, signal_cb: uv_signal_cb,
                           signum: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_signal_stop(handle: *mut uv_signal_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_loadavg(avg: *mut f64);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum uv_fs_event_flags {
    UV_FS_EVENT_WATCH_ENTRY = 1,
    UV_FS_EVENT_STAT = 2,
    UV_FS_EVENT_RECURSIVE = 4,
}
extern "C" {
    pub fn uv_fs_event_init(loop_: *mut uv_loop_t, handle: *mut uv_fs_event_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_event_start(handle: *mut uv_fs_event_t, cb: uv_fs_event_cb,
                             path: *const ::std::os::raw::c_char,
                             flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_event_stop(handle: *mut uv_fs_event_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_fs_event_getpath(handle: *mut uv_fs_event_t,
                               buffer: *mut ::std::os::raw::c_char,
                               size: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_ip4_addr(ip: *const ::std::os::raw::c_char,
                       port: ::std::os::raw::c_int, addr: *mut sockaddr_in)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_ip6_addr(ip: *const ::std::os::raw::c_char,
                       port: ::std::os::raw::c_int, addr: *mut sockaddr_in6)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_ip4_name(src: *const sockaddr_in,
                       dst: *mut ::std::os::raw::c_char, size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_ip6_name(src: *const sockaddr_in6,
                       dst: *mut ::std::os::raw::c_char, size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_inet_ntop(af: ::std::os::raw::c_int,
                        src: *const ::std::os::raw::c_void,
                        dst: *mut ::std::os::raw::c_char, size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_inet_pton(af: ::std::os::raw::c_int,
                        src: *const ::std::os::raw::c_char,
                        dst: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_exepath(buffer: *mut ::std::os::raw::c_char, size: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_cwd(buffer: *mut ::std::os::raw::c_char, size: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_chdir(dir: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_get_free_memory() -> u64;
}
extern "C" {
    pub fn uv_get_total_memory() -> u64;
}
extern "C" {
    pub fn uv_hrtime() -> u64;
}
extern "C" {
    pub fn uv_disable_stdio_inheritance();
}
extern "C" {
    pub fn uv_dlopen(filename: *const ::std::os::raw::c_char,
                     lib: *mut uv_lib_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_dlclose(lib: *mut uv_lib_t);
}
extern "C" {
    pub fn uv_dlsym(lib: *mut uv_lib_t, name: *const ::std::os::raw::c_char,
                    ptr: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_dlerror(lib: *const uv_lib_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uv_mutex_init(handle: *mut uv_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_mutex_destroy(handle: *mut uv_mutex_t);
}
extern "C" {
    pub fn uv_mutex_lock(handle: *mut uv_mutex_t);
}
extern "C" {
    pub fn uv_mutex_trylock(handle: *mut uv_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_mutex_unlock(handle: *mut uv_mutex_t);
}
extern "C" {
    pub fn uv_rwlock_init(rwlock: *mut uv_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_rwlock_destroy(rwlock: *mut uv_rwlock_t);
}
extern "C" {
    pub fn uv_rwlock_rdlock(rwlock: *mut uv_rwlock_t);
}
extern "C" {
    pub fn uv_rwlock_tryrdlock(rwlock: *mut uv_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_rwlock_rdunlock(rwlock: *mut uv_rwlock_t);
}
extern "C" {
    pub fn uv_rwlock_wrlock(rwlock: *mut uv_rwlock_t);
}
extern "C" {
    pub fn uv_rwlock_trywrlock(rwlock: *mut uv_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_rwlock_wrunlock(rwlock: *mut uv_rwlock_t);
}
extern "C" {
    pub fn uv_sem_init(sem: *mut uv_sem_t, value: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_sem_destroy(sem: *mut uv_sem_t);
}
extern "C" {
    pub fn uv_sem_post(sem: *mut uv_sem_t);
}
extern "C" {
    pub fn uv_sem_wait(sem: *mut uv_sem_t);
}
extern "C" {
    pub fn uv_sem_trywait(sem: *mut uv_sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_cond_init(cond: *mut uv_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_cond_destroy(cond: *mut uv_cond_t);
}
extern "C" {
    pub fn uv_cond_signal(cond: *mut uv_cond_t);
}
extern "C" {
    pub fn uv_cond_broadcast(cond: *mut uv_cond_t);
}
extern "C" {
    pub fn uv_barrier_init(barrier: *mut uv_barrier_t,
                           count: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_barrier_destroy(barrier: *mut uv_barrier_t);
}
extern "C" {
    pub fn uv_barrier_wait(barrier: *mut uv_barrier_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_cond_wait(cond: *mut uv_cond_t, mutex: *mut uv_mutex_t);
}
extern "C" {
    pub fn uv_cond_timedwait(cond: *mut uv_cond_t, mutex: *mut uv_mutex_t,
                             timeout: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_once(guard: *mut uv_once_t,
                   callback: ::std::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    pub fn uv_key_create(key: *mut uv_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_key_delete(key: *mut uv_key_t);
}
extern "C" {
    pub fn uv_key_get(key: *mut uv_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn uv_key_set(key: *mut uv_key_t, value: *mut ::std::os::raw::c_void);
}
pub type uv_thread_cb =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn uv_thread_create(tid: *mut uv_thread_t, entry: uv_thread_cb,
                            arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_thread_setaffinity(tid: *mut uv_thread_t,
                                 cpumask: *mut ::std::os::raw::c_char,
                                 oldmask: *mut ::std::os::raw::c_char,
                                 mask_size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_thread_getaffinity(tid: *mut uv_thread_t,
                                 cpumask: *mut ::std::os::raw::c_char,
                                 mask_size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_thread_detach(tid: *mut uv_thread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_thread_self() -> uv_thread_t;
}
extern "C" {
    pub fn uv_thread_join(tid: *mut uv_thread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_thread_equal(t1: *const uv_thread_t, t2: *const uv_thread_t)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy)]
pub union uv_any_handle {
    pub async: uv_async_t,
    pub check: uv_check_t,
    pub fs_event: uv_fs_event_t,
    pub fs_poll: uv_fs_poll_t,
    pub handle: uv_handle_t,
    pub idle: uv_idle_t,
    pub pipe: uv_pipe_t,
    pub poll: uv_poll_t,
    pub prepare: uv_prepare_t,
    pub process: uv_process_t,
    pub stream: uv_stream_t,
    pub tcp: uv_tcp_t,
    pub timer: uv_timer_t,
    pub tty: uv_tty_t,
    pub udp: uv_udp_t,
    pub signal: uv_signal_t,
}
#[test]
fn bindgen_test_layout_uv_any_handle() {
    assert_eq!(::std::mem::size_of::<uv_any_handle>() , 312usize);
    assert_eq!(::std::mem::align_of::<uv_any_handle>() , 8usize);
}
impl Clone for uv_any_handle {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub union uv_any_req {
    pub req: uv_req_t,
    pub connect: uv_connect_t,
    pub write: uv_write_t,
    pub shutdown: uv_shutdown_t,
    pub udp_send: uv_udp_send_t,
    pub fs: uv_fs_t,
    pub work: uv_work_t,
    pub getaddrinfo: uv_getaddrinfo_t,
    pub getnameinfo: uv_getnameinfo_t,
}
#[test]
fn bindgen_test_layout_uv_any_req() {
    assert_eq!(::std::mem::size_of::<uv_any_req>() , 1320usize);
    assert_eq!(::std::mem::align_of::<uv_any_req>() , 8usize);
}
pub const bm_none: _bindgen_ty_71 = _bindgen_ty_71::bm_none;
pub const bm_line: _bindgen_ty_71 = _bindgen_ty_71::bm_line;
pub const bm_block: _bindgen_ty_71 = _bindgen_ty_71::bm_block;
pub const bm_mem: _bindgen_ty_71 = _bindgen_ty_71::bm_mem;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_71 {
    bm_none = 19,
    bm_line = 20,
    bm_block = 21,
    bm_mem = 22,
}
pub use self::_bindgen_ty_71 as bufmode_t;
pub const bst_none: _bindgen_ty_72 = _bindgen_ty_72::bst_none;
pub const bst_rd: _bindgen_ty_72 = _bindgen_ty_72::bst_rd;
pub const bst_wr: _bindgen_ty_72 = _bindgen_ty_72::bst_wr;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_72 { bst_none = 0, bst_rd = 1, bst_wr = 2, }
pub use self::_bindgen_ty_72 as bufstate_t;
#[repr(C)]
pub struct _bindgen_ty_73 {
    pub buf: *mut ::std::os::raw::c_char,
    pub errcode: ::std::os::raw::c_int,
    pub _pad_bm: ::std::os::raw::c_int,
    pub bm: bufmode_t,
    pub state: bufstate_t,
    pub maxsize: i64,
    pub size: i64,
    pub bpos: i64,
    pub ndirty: i64,
    pub fpos: i64,
    pub lineno: usize,
    pub fd: ::std::os::raw::c_long,
    pub _bitfield_1: u8,
    pub userdata: i64,
    pub local: [::std::os::raw::c_char; 54usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_73() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_73>() , 152usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_73>() , 8usize);
}
impl _bindgen_ty_73 {
    #[inline]
    pub fn readable(&self) -> ::std::os::raw::c_uchar {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (1usize as u8)) >>
                                       0u32) as u8)
        }
    }
    #[inline]
    pub fn set_readable(&mut self, val: ::std::os::raw::c_uchar) {
        self._bitfield_1 &= !(1usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 0u32) & (1usize as u8);
    }
    #[inline]
    pub fn writable(&self) -> ::std::os::raw::c_uchar {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (2usize as u8)) >>
                                       1u32) as u8)
        }
    }
    #[inline]
    pub fn set_writable(&mut self, val: ::std::os::raw::c_uchar) {
        self._bitfield_1 &= !(2usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 1u32) & (2usize as u8);
    }
    #[inline]
    pub fn ownbuf(&self) -> ::std::os::raw::c_uchar {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (4usize as u8)) >>
                                       2u32) as u8)
        }
    }
    #[inline]
    pub fn set_ownbuf(&mut self, val: ::std::os::raw::c_uchar) {
        self._bitfield_1 &= !(4usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 2u32) & (4usize as u8);
    }
    #[inline]
    pub fn ownfd(&self) -> ::std::os::raw::c_uchar {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (8usize as u8)) >>
                                       3u32) as u8)
        }
    }
    #[inline]
    pub fn set_ownfd(&mut self, val: ::std::os::raw::c_uchar) {
        self._bitfield_1 &= !(8usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 3u32) & (8usize as u8);
    }
    #[inline]
    pub fn _eof(&self) -> ::std::os::raw::c_uchar {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (16usize as u8)) >>
                                       4u32) as u8)
        }
    }
    #[inline]
    pub fn set__eof(&mut self, val: ::std::os::raw::c_uchar) {
        self._bitfield_1 &= !(16usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 4u32) & (16usize as u8);
    }
    #[inline]
    pub fn rereadable(&self) -> ::std::os::raw::c_uchar {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (32usize as u8)) >>
                                       5u32) as u8)
        }
    }
    #[inline]
    pub fn set_rereadable(&mut self, val: ::std::os::raw::c_uchar) {
        self._bitfield_1 &= !(32usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 5u32) & (32usize as u8);
    }
}
pub type ios_t = _bindgen_ty_73;
extern "C" {
    #[link_name = "ios_set_io_wait_func"]
    pub static mut ios_set_io_wait_func:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              ::std::os::raw::c_int)>;
}
extern "C" {
    pub fn ios_read(s: *mut ios_t, dest: *mut ::std::os::raw::c_char,
                    n: usize) -> usize;
}
extern "C" {
    pub fn ios_readall(s: *mut ios_t, dest: *mut ::std::os::raw::c_char,
                       n: usize) -> usize;
}
extern "C" {
    pub fn ios_write(s: *mut ios_t, data: *const ::std::os::raw::c_char,
                     n: usize) -> usize;
}
extern "C" {
    pub fn ios_seek(s: *mut ios_t, pos: i64) -> i64;
}
extern "C" {
    pub fn ios_seek_end(s: *mut ios_t) -> i64;
}
extern "C" {
    pub fn ios_skip(s: *mut ios_t, offs: i64) -> i64;
}
extern "C" {
    pub fn ios_pos(s: *mut ios_t) -> i64;
}
extern "C" {
    pub fn ios_trunc(s: *mut ios_t, size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_eof(s: *mut ios_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_eof_blocking(s: *mut ios_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_flush(s: *mut ios_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_close(s: *mut ios_t);
}
extern "C" {
    pub fn ios_isopen(s: *mut ios_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_takebuf(s: *mut ios_t, psize: *mut usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ios_setbuf(s: *mut ios_t, buf: *mut ::std::os::raw::c_char,
                      size: usize, own: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_bufmode(s: *mut ios_t, mode: bufmode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_get_readable(s: *mut ios_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_get_writable(s: *mut ios_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_set_readonly(s: *mut ios_t);
}
extern "C" {
    pub fn ios_copy(to: *mut ios_t, from: *mut ios_t, nbytes: usize) -> usize;
}
extern "C" {
    pub fn ios_copyall(to: *mut ios_t, from: *mut ios_t) -> usize;
}
extern "C" {
    pub fn ios_copyuntil(to: *mut ios_t, from: *mut ios_t,
                         delim: ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn ios_readprep(from: *mut ios_t, n: usize) -> usize;
}
extern "C" {
    pub fn ios_file(s: *mut ios_t, fname: *const ::std::os::raw::c_char,
                    rd: ::std::os::raw::c_int, wr: ::std::os::raw::c_int,
                    create: ::std::os::raw::c_int,
                    trunc: ::std::os::raw::c_int) -> *mut ios_t;
}
extern "C" {
    pub fn ios_mkstemp(f: *mut ios_t, fname: *mut ::std::os::raw::c_char)
     -> *mut ios_t;
}
extern "C" {
    pub fn ios_mem(s: *mut ios_t, initsize: usize) -> *mut ios_t;
}
extern "C" {
    pub fn ios_str(s: *mut ios_t, str: *mut ::std::os::raw::c_char)
     -> *mut ios_t;
}
extern "C" {
    pub fn ios_static_buffer(s: *mut ios_t, buf: *mut ::std::os::raw::c_char,
                             sz: usize) -> *mut ios_t;
}
extern "C" {
    pub fn ios_fd(s: *mut ios_t, fd: ::std::os::raw::c_long,
                  isfile: ::std::os::raw::c_int, own: ::std::os::raw::c_int)
     -> *mut ios_t;
}
extern "C" {
    #[link_name = "ios_stdin"]
    pub static mut ios_stdin: *mut ios_t;
}
extern "C" {
    #[link_name = "ios_stdout"]
    pub static mut ios_stdout: *mut ios_t;
}
extern "C" {
    #[link_name = "ios_stderr"]
    pub static mut ios_stderr: *mut ios_t;
}
extern "C" {
    pub fn ios_init_stdstreams();
}
extern "C" {
    pub fn ios_pututf8(s: *mut ios_t, wc: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_printf(s: *mut ios_t,
                      format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_vprintf(s: *mut ios_t, format: *const ::std::os::raw::c_char,
                       args: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_getutf8(s: *mut ios_t, pwc: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_peekutf8(s: *mut ios_t, pwc: *mut u32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_readline(s: *mut ios_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ios_purge(s: *mut ios_t);
}
extern "C" {
    pub fn ios_putc(c: ::std::os::raw::c_int, s: *mut ios_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_getc(s: *mut ios_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_peekc(s: *mut ios_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ios_ungetc(c: ::std::os::raw::c_int, s: *mut ios_t)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct jl_timeval {
    pub sec: i64,
    pub usec: i64,
}
#[test]
fn bindgen_test_layout_jl_timeval() {
    assert_eq!(::std::mem::size_of::<jl_timeval>() , 16usize);
    assert_eq!(::std::mem::align_of::<jl_timeval>() , 8usize);
}
impl Clone for jl_timeval {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn jl_gettimeofday(jtv: *mut jl_timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_clock_now() -> f64;
}
extern "C" {
    pub fn sleep_ms(ms: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nextipow2(i: uint_t) -> uint_t;
}
extern "C" {
    pub fn int32hash(a: u32) -> u32;
}
extern "C" {
    pub fn int64hash(key: u64) -> u64;
}
extern "C" {
    pub fn int64to32hash(key: u64) -> u32;
}
extern "C" {
    pub fn memhash(buf: *const ::std::os::raw::c_char, n: usize) -> u64;
}
extern "C" {
    pub fn memhash_seed(buf: *const ::std::os::raw::c_char, n: usize,
                        seed: u32) -> u64;
}
extern "C" {
    pub fn memhash32(buf: *const ::std::os::raw::c_char, n: usize) -> u32;
}
extern "C" {
    pub fn memhash32_seed(buf: *const ::std::os::raw::c_char, n: usize,
                          seed: u32) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_74 {
    pub size: usize,
    pub table: *mut *mut ::std::os::raw::c_void,
    pub _space: [*mut ::std::os::raw::c_void; 32usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_74() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_74>() , 272usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_74>() , 8usize);
}
impl Clone for _bindgen_ty_74 {
    fn clone(&self) -> Self { *self }
}
pub type htable_t = _bindgen_ty_74;
extern "C" {
    pub fn htable_new(h: *mut htable_t, size: usize) -> *mut htable_t;
}
extern "C" {
    pub fn htable_free(h: *mut htable_t);
}
extern "C" {
    pub fn htable_reset(h: *mut htable_t, sz: usize);
}
extern "C" {
    pub fn ptrhash_get(h: *mut htable_t, key: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ptrhash_put(h: *mut htable_t, key: *mut ::std::os::raw::c_void,
                       val: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ptrhash_adjoin(h: *mut htable_t, key: *mut ::std::os::raw::c_void,
                          val: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ptrhash_has(h: *mut htable_t, key: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptrhash_remove(h: *mut htable_t, key: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptrhash_bp(h: *mut htable_t, key: *mut ::std::os::raw::c_void)
     -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn bitvector_new(n: u64, initzero: ::std::os::raw::c_int) -> *mut u32;
}
extern "C" {
    pub fn bitvector_resize(b: *mut u32, oldsz: u64, newsz: u64,
                            initzero: ::std::os::raw::c_int) -> *mut u32;
}
extern "C" {
    pub fn bitvector_nwords(nbits: u64) -> usize;
}
extern "C" {
    pub fn bitvector_set(b: *mut u32, n: u64, c: u32);
}
extern "C" {
    pub fn bitvector_get(b: *mut u32, n: u64) -> u32;
}
extern "C" {
    pub fn bitvector_next(b: *mut u32, n0: u64, n: u64) -> u64;
}
extern "C" {
    pub fn bitvector_count(b: *mut u32, offs: u64, nbits: u64) -> u64;
}
extern "C" {
    pub fn bitvector_any1(b: *mut u32, offs: u64, nbits: u64) -> u32;
}
extern "C" {
    pub fn jl_strtod_c(nptr: *const ::std::os::raw::c_char,
                       endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn jl_strtof_c(nptr: *const ::std::os::raw::c_char,
                       endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn libsupport_init();
}
extern "C" {
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize,
                     __l: __locale_t) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize)
     -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__xpg_strerror_r"]
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_75 {
    pub len: usize,
    pub max: usize,
    pub items: *mut *mut ::std::os::raw::c_void,
    pub _space: [*mut ::std::os::raw::c_void; 29usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_75() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_75>() , 256usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_75>() , 8usize);
}
impl Clone for _bindgen_ty_75 {
    fn clone(&self) -> Self { *self }
}
pub type arraylist_t = _bindgen_ty_75;
extern "C" {
    pub fn arraylist_new(a: *mut arraylist_t, size: usize)
     -> *mut arraylist_t;
}
extern "C" {
    pub fn arraylist_free(a: *mut arraylist_t);
}
extern "C" {
    pub fn arraylist_push(a: *mut arraylist_t,
                          elt: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn arraylist_pop(a: *mut arraylist_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn arraylist_grow(a: *mut arraylist_t, n: usize);
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag,
                      __val: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Copy)]
pub struct _jl_taggedvalue_t {
    pub __bindgen_anon_1: _jl_taggedvalue_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _jl_taggedvalue_t__bindgen_ty_1 {
    pub header: usize,
    pub next: *mut jl_taggedvalue_t,
    pub type_: *mut jl_value_t,
    pub bits: _jl_taggedvalue_bits,
}
#[test]
fn bindgen_test_layout__jl_taggedvalue_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_jl_taggedvalue_t__bindgen_ty_1>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_jl_taggedvalue_t__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _jl_taggedvalue_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__jl_taggedvalue_t() {
    assert_eq!(::std::mem::size_of::<_jl_taggedvalue_t>() , 8usize);
    assert_eq!(::std::mem::align_of::<_jl_taggedvalue_t>() , 8usize);
}
impl Clone for _jl_taggedvalue_t {
    fn clone(&self) -> Self { *self }
}
pub type jl_taggedvalue_t = _jl_taggedvalue_t;
pub type __m64 = [::std::os::raw::c_longlong; 1usize];
pub type __v1di = [::std::os::raw::c_longlong; 1usize];
pub type __v2si = [::std::os::raw::c_int; 2usize];
pub type __v4hi = [::std::os::raw::c_short; 4usize];
pub type __v8qi = [::std::os::raw::c_char; 8usize];
pub type __v4si = [::std::os::raw::c_int; 4usize];
pub type __v4sf = [f32; 4usize];
pub type __m128 = [f32; 4usize];
pub type __v4su = [::std::os::raw::c_uint; 4usize];
pub type __m128d = [f64; 2usize];
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
pub type __v2df = [f64; 2usize];
pub type __v2di = [::std::os::raw::c_longlong; 2usize];
pub type __v8hi = [::std::os::raw::c_short; 8usize];
pub type __v16qi = [::std::os::raw::c_char; 16usize];
pub type __v2du = [::std::os::raw::c_ulonglong; 2usize];
pub type __v8hu = [::std::os::raw::c_ushort; 8usize];
pub type __v16qu = [::std::os::raw::c_uchar; 16usize];
pub type __v16qs = [::std::os::raw::c_char; 16usize];
pub type __v4df = [f64; 4usize];
pub type __v8sf = [f32; 8usize];
pub type __v4di = [::std::os::raw::c_longlong; 4usize];
pub type __v8si = [::std::os::raw::c_int; 8usize];
pub type __v16hi = [::std::os::raw::c_short; 16usize];
pub type __v32qi = [::std::os::raw::c_char; 32usize];
pub type __v4du = [::std::os::raw::c_ulonglong; 4usize];
pub type __v8su = [::std::os::raw::c_uint; 8usize];
pub type __v16hu = [::std::os::raw::c_ushort; 16usize];
pub type __v32qu = [::std::os::raw::c_uchar; 32usize];
pub type __v32qs = [::std::os::raw::c_char; 32usize];
pub type __m256 = [f32; 8usize];
pub type __m256d = [f64; 4usize];
pub type __m256i = [::std::os::raw::c_longlong; 4usize];
pub type __v64qi = [::std::os::raw::c_char; 64usize];
pub type __v32hi = [::std::os::raw::c_short; 32usize];
pub type __v8df = [f64; 8usize];
pub type __v16sf = [f32; 16usize];
pub type __v8di = [::std::os::raw::c_longlong; 8usize];
pub type __v16si = [::std::os::raw::c_int; 16usize];
pub type __v64qu = [::std::os::raw::c_uchar; 64usize];
pub type __v32hu = [::std::os::raw::c_ushort; 32usize];
pub type __v8du = [::std::os::raw::c_ulonglong; 8usize];
pub type __v16su = [::std::os::raw::c_uint; 16usize];
pub type __m512 = [f32; 16usize];
pub type __m512d = [f64; 8usize];
pub type __m512i = [::std::os::raw::c_longlong; 8usize];
pub type __mmask8 = ::std::os::raw::c_uchar;
pub type __mmask16 = ::std::os::raw::c_ushort;
pub const _MM_PERM_AAAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AAAA;
pub const _MM_PERM_AAAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AAAB;
pub const _MM_PERM_AAAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AAAC;
pub const _MM_PERM_AAAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AAAD;
pub const _MM_PERM_AABA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AABA;
pub const _MM_PERM_AABB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AABB;
pub const _MM_PERM_AABC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AABC;
pub const _MM_PERM_AABD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AABD;
pub const _MM_PERM_AACA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AACA;
pub const _MM_PERM_AACB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AACB;
pub const _MM_PERM_AACC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AACC;
pub const _MM_PERM_AACD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AACD;
pub const _MM_PERM_AADA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AADA;
pub const _MM_PERM_AADB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AADB;
pub const _MM_PERM_AADC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AADC;
pub const _MM_PERM_AADD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_AADD;
pub const _MM_PERM_ABAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABAA;
pub const _MM_PERM_ABAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABAB;
pub const _MM_PERM_ABAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABAC;
pub const _MM_PERM_ABAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABAD;
pub const _MM_PERM_ABBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABBA;
pub const _MM_PERM_ABBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABBB;
pub const _MM_PERM_ABBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABBC;
pub const _MM_PERM_ABBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABBD;
pub const _MM_PERM_ABCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABCA;
pub const _MM_PERM_ABCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABCB;
pub const _MM_PERM_ABCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABCC;
pub const _MM_PERM_ABCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABCD;
pub const _MM_PERM_ABDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABDA;
pub const _MM_PERM_ABDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABDB;
pub const _MM_PERM_ABDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABDC;
pub const _MM_PERM_ABDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ABDD;
pub const _MM_PERM_ACAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACAA;
pub const _MM_PERM_ACAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACAB;
pub const _MM_PERM_ACAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACAC;
pub const _MM_PERM_ACAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACAD;
pub const _MM_PERM_ACBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACBA;
pub const _MM_PERM_ACBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACBB;
pub const _MM_PERM_ACBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACBC;
pub const _MM_PERM_ACBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACBD;
pub const _MM_PERM_ACCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACCA;
pub const _MM_PERM_ACCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACCB;
pub const _MM_PERM_ACCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACCC;
pub const _MM_PERM_ACCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACCD;
pub const _MM_PERM_ACDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACDA;
pub const _MM_PERM_ACDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACDB;
pub const _MM_PERM_ACDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACDC;
pub const _MM_PERM_ACDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ACDD;
pub const _MM_PERM_ADAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADAA;
pub const _MM_PERM_ADAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADAB;
pub const _MM_PERM_ADAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADAC;
pub const _MM_PERM_ADAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADAD;
pub const _MM_PERM_ADBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADBA;
pub const _MM_PERM_ADBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADBB;
pub const _MM_PERM_ADBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADBC;
pub const _MM_PERM_ADBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADBD;
pub const _MM_PERM_ADCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADCA;
pub const _MM_PERM_ADCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADCB;
pub const _MM_PERM_ADCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADCC;
pub const _MM_PERM_ADCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADCD;
pub const _MM_PERM_ADDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADDA;
pub const _MM_PERM_ADDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADDB;
pub const _MM_PERM_ADDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADDC;
pub const _MM_PERM_ADDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_ADDD;
pub const _MM_PERM_BAAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BAAA;
pub const _MM_PERM_BAAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BAAB;
pub const _MM_PERM_BAAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BAAC;
pub const _MM_PERM_BAAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BAAD;
pub const _MM_PERM_BABA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BABA;
pub const _MM_PERM_BABB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BABB;
pub const _MM_PERM_BABC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BABC;
pub const _MM_PERM_BABD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BABD;
pub const _MM_PERM_BACA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BACA;
pub const _MM_PERM_BACB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BACB;
pub const _MM_PERM_BACC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BACC;
pub const _MM_PERM_BACD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BACD;
pub const _MM_PERM_BADA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BADA;
pub const _MM_PERM_BADB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BADB;
pub const _MM_PERM_BADC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BADC;
pub const _MM_PERM_BADD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BADD;
pub const _MM_PERM_BBAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBAA;
pub const _MM_PERM_BBAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBAB;
pub const _MM_PERM_BBAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBAC;
pub const _MM_PERM_BBAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBAD;
pub const _MM_PERM_BBBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBBA;
pub const _MM_PERM_BBBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBBB;
pub const _MM_PERM_BBBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBBC;
pub const _MM_PERM_BBBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBBD;
pub const _MM_PERM_BBCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBCA;
pub const _MM_PERM_BBCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBCB;
pub const _MM_PERM_BBCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBCC;
pub const _MM_PERM_BBCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBCD;
pub const _MM_PERM_BBDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBDA;
pub const _MM_PERM_BBDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBDB;
pub const _MM_PERM_BBDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBDC;
pub const _MM_PERM_BBDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BBDD;
pub const _MM_PERM_BCAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCAA;
pub const _MM_PERM_BCAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCAB;
pub const _MM_PERM_BCAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCAC;
pub const _MM_PERM_BCAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCAD;
pub const _MM_PERM_BCBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCBA;
pub const _MM_PERM_BCBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCBB;
pub const _MM_PERM_BCBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCBC;
pub const _MM_PERM_BCBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCBD;
pub const _MM_PERM_BCCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCCA;
pub const _MM_PERM_BCCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCCB;
pub const _MM_PERM_BCCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCCC;
pub const _MM_PERM_BCCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCCD;
pub const _MM_PERM_BCDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCDA;
pub const _MM_PERM_BCDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCDB;
pub const _MM_PERM_BCDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCDC;
pub const _MM_PERM_BCDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BCDD;
pub const _MM_PERM_BDAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDAA;
pub const _MM_PERM_BDAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDAB;
pub const _MM_PERM_BDAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDAC;
pub const _MM_PERM_BDAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDAD;
pub const _MM_PERM_BDBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDBA;
pub const _MM_PERM_BDBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDBB;
pub const _MM_PERM_BDBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDBC;
pub const _MM_PERM_BDBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDBD;
pub const _MM_PERM_BDCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDCA;
pub const _MM_PERM_BDCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDCB;
pub const _MM_PERM_BDCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDCC;
pub const _MM_PERM_BDCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDCD;
pub const _MM_PERM_BDDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDDA;
pub const _MM_PERM_BDDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDDB;
pub const _MM_PERM_BDDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDDC;
pub const _MM_PERM_BDDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_BDDD;
pub const _MM_PERM_CAAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CAAA;
pub const _MM_PERM_CAAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CAAB;
pub const _MM_PERM_CAAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CAAC;
pub const _MM_PERM_CAAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CAAD;
pub const _MM_PERM_CABA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CABA;
pub const _MM_PERM_CABB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CABB;
pub const _MM_PERM_CABC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CABC;
pub const _MM_PERM_CABD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CABD;
pub const _MM_PERM_CACA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CACA;
pub const _MM_PERM_CACB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CACB;
pub const _MM_PERM_CACC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CACC;
pub const _MM_PERM_CACD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CACD;
pub const _MM_PERM_CADA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CADA;
pub const _MM_PERM_CADB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CADB;
pub const _MM_PERM_CADC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CADC;
pub const _MM_PERM_CADD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CADD;
pub const _MM_PERM_CBAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBAA;
pub const _MM_PERM_CBAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBAB;
pub const _MM_PERM_CBAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBAC;
pub const _MM_PERM_CBAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBAD;
pub const _MM_PERM_CBBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBBA;
pub const _MM_PERM_CBBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBBB;
pub const _MM_PERM_CBBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBBC;
pub const _MM_PERM_CBBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBBD;
pub const _MM_PERM_CBCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBCA;
pub const _MM_PERM_CBCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBCB;
pub const _MM_PERM_CBCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBCC;
pub const _MM_PERM_CBCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBCD;
pub const _MM_PERM_CBDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBDA;
pub const _MM_PERM_CBDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBDB;
pub const _MM_PERM_CBDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBDC;
pub const _MM_PERM_CBDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CBDD;
pub const _MM_PERM_CCAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCAA;
pub const _MM_PERM_CCAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCAB;
pub const _MM_PERM_CCAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCAC;
pub const _MM_PERM_CCAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCAD;
pub const _MM_PERM_CCBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCBA;
pub const _MM_PERM_CCBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCBB;
pub const _MM_PERM_CCBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCBC;
pub const _MM_PERM_CCBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCBD;
pub const _MM_PERM_CCCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCCA;
pub const _MM_PERM_CCCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCCB;
pub const _MM_PERM_CCCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCCC;
pub const _MM_PERM_CCCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCCD;
pub const _MM_PERM_CCDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCDA;
pub const _MM_PERM_CCDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCDB;
pub const _MM_PERM_CCDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCDC;
pub const _MM_PERM_CCDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CCDD;
pub const _MM_PERM_CDAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDAA;
pub const _MM_PERM_CDAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDAB;
pub const _MM_PERM_CDAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDAC;
pub const _MM_PERM_CDAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDAD;
pub const _MM_PERM_CDBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDBA;
pub const _MM_PERM_CDBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDBB;
pub const _MM_PERM_CDBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDBC;
pub const _MM_PERM_CDBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDBD;
pub const _MM_PERM_CDCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDCA;
pub const _MM_PERM_CDCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDCB;
pub const _MM_PERM_CDCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDCC;
pub const _MM_PERM_CDCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDCD;
pub const _MM_PERM_CDDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDDA;
pub const _MM_PERM_CDDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDDB;
pub const _MM_PERM_CDDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDDC;
pub const _MM_PERM_CDDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_CDDD;
pub const _MM_PERM_DAAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DAAA;
pub const _MM_PERM_DAAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DAAB;
pub const _MM_PERM_DAAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DAAC;
pub const _MM_PERM_DAAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DAAD;
pub const _MM_PERM_DABA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DABA;
pub const _MM_PERM_DABB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DABB;
pub const _MM_PERM_DABC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DABC;
pub const _MM_PERM_DABD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DABD;
pub const _MM_PERM_DACA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DACA;
pub const _MM_PERM_DACB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DACB;
pub const _MM_PERM_DACC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DACC;
pub const _MM_PERM_DACD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DACD;
pub const _MM_PERM_DADA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DADA;
pub const _MM_PERM_DADB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DADB;
pub const _MM_PERM_DADC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DADC;
pub const _MM_PERM_DADD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DADD;
pub const _MM_PERM_DBAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBAA;
pub const _MM_PERM_DBAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBAB;
pub const _MM_PERM_DBAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBAC;
pub const _MM_PERM_DBAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBAD;
pub const _MM_PERM_DBBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBBA;
pub const _MM_PERM_DBBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBBB;
pub const _MM_PERM_DBBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBBC;
pub const _MM_PERM_DBBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBBD;
pub const _MM_PERM_DBCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBCA;
pub const _MM_PERM_DBCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBCB;
pub const _MM_PERM_DBCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBCC;
pub const _MM_PERM_DBCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBCD;
pub const _MM_PERM_DBDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBDA;
pub const _MM_PERM_DBDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBDB;
pub const _MM_PERM_DBDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBDC;
pub const _MM_PERM_DBDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DBDD;
pub const _MM_PERM_DCAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCAA;
pub const _MM_PERM_DCAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCAB;
pub const _MM_PERM_DCAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCAC;
pub const _MM_PERM_DCAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCAD;
pub const _MM_PERM_DCBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCBA;
pub const _MM_PERM_DCBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCBB;
pub const _MM_PERM_DCBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCBC;
pub const _MM_PERM_DCBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCBD;
pub const _MM_PERM_DCCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCCA;
pub const _MM_PERM_DCCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCCB;
pub const _MM_PERM_DCCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCCC;
pub const _MM_PERM_DCCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCCD;
pub const _MM_PERM_DCDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCDA;
pub const _MM_PERM_DCDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCDB;
pub const _MM_PERM_DCDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCDC;
pub const _MM_PERM_DCDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DCDD;
pub const _MM_PERM_DDAA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDAA;
pub const _MM_PERM_DDAB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDAB;
pub const _MM_PERM_DDAC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDAC;
pub const _MM_PERM_DDAD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDAD;
pub const _MM_PERM_DDBA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDBA;
pub const _MM_PERM_DDBB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDBB;
pub const _MM_PERM_DDBC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDBC;
pub const _MM_PERM_DDBD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDBD;
pub const _MM_PERM_DDCA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDCA;
pub const _MM_PERM_DDCB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDCB;
pub const _MM_PERM_DDCC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDCC;
pub const _MM_PERM_DDCD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDCD;
pub const _MM_PERM_DDDA: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDDA;
pub const _MM_PERM_DDDB: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDDB;
pub const _MM_PERM_DDDC: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDDC;
pub const _MM_PERM_DDDD: _bindgen_ty_76 = _bindgen_ty_76::_MM_PERM_DDDD;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_76 {
    _MM_PERM_AAAA = 0,
    _MM_PERM_AAAB = 1,
    _MM_PERM_AAAC = 2,
    _MM_PERM_AAAD = 3,
    _MM_PERM_AABA = 4,
    _MM_PERM_AABB = 5,
    _MM_PERM_AABC = 6,
    _MM_PERM_AABD = 7,
    _MM_PERM_AACA = 8,
    _MM_PERM_AACB = 9,
    _MM_PERM_AACC = 10,
    _MM_PERM_AACD = 11,
    _MM_PERM_AADA = 12,
    _MM_PERM_AADB = 13,
    _MM_PERM_AADC = 14,
    _MM_PERM_AADD = 15,
    _MM_PERM_ABAA = 16,
    _MM_PERM_ABAB = 17,
    _MM_PERM_ABAC = 18,
    _MM_PERM_ABAD = 19,
    _MM_PERM_ABBA = 20,
    _MM_PERM_ABBB = 21,
    _MM_PERM_ABBC = 22,
    _MM_PERM_ABBD = 23,
    _MM_PERM_ABCA = 24,
    _MM_PERM_ABCB = 25,
    _MM_PERM_ABCC = 26,
    _MM_PERM_ABCD = 27,
    _MM_PERM_ABDA = 28,
    _MM_PERM_ABDB = 29,
    _MM_PERM_ABDC = 30,
    _MM_PERM_ABDD = 31,
    _MM_PERM_ACAA = 32,
    _MM_PERM_ACAB = 33,
    _MM_PERM_ACAC = 34,
    _MM_PERM_ACAD = 35,
    _MM_PERM_ACBA = 36,
    _MM_PERM_ACBB = 37,
    _MM_PERM_ACBC = 38,
    _MM_PERM_ACBD = 39,
    _MM_PERM_ACCA = 40,
    _MM_PERM_ACCB = 41,
    _MM_PERM_ACCC = 42,
    _MM_PERM_ACCD = 43,
    _MM_PERM_ACDA = 44,
    _MM_PERM_ACDB = 45,
    _MM_PERM_ACDC = 46,
    _MM_PERM_ACDD = 47,
    _MM_PERM_ADAA = 48,
    _MM_PERM_ADAB = 49,
    _MM_PERM_ADAC = 50,
    _MM_PERM_ADAD = 51,
    _MM_PERM_ADBA = 52,
    _MM_PERM_ADBB = 53,
    _MM_PERM_ADBC = 54,
    _MM_PERM_ADBD = 55,
    _MM_PERM_ADCA = 56,
    _MM_PERM_ADCB = 57,
    _MM_PERM_ADCC = 58,
    _MM_PERM_ADCD = 59,
    _MM_PERM_ADDA = 60,
    _MM_PERM_ADDB = 61,
    _MM_PERM_ADDC = 62,
    _MM_PERM_ADDD = 63,
    _MM_PERM_BAAA = 64,
    _MM_PERM_BAAB = 65,
    _MM_PERM_BAAC = 66,
    _MM_PERM_BAAD = 67,
    _MM_PERM_BABA = 68,
    _MM_PERM_BABB = 69,
    _MM_PERM_BABC = 70,
    _MM_PERM_BABD = 71,
    _MM_PERM_BACA = 72,
    _MM_PERM_BACB = 73,
    _MM_PERM_BACC = 74,
    _MM_PERM_BACD = 75,
    _MM_PERM_BADA = 76,
    _MM_PERM_BADB = 77,
    _MM_PERM_BADC = 78,
    _MM_PERM_BADD = 79,
    _MM_PERM_BBAA = 80,
    _MM_PERM_BBAB = 81,
    _MM_PERM_BBAC = 82,
    _MM_PERM_BBAD = 83,
    _MM_PERM_BBBA = 84,
    _MM_PERM_BBBB = 85,
    _MM_PERM_BBBC = 86,
    _MM_PERM_BBBD = 87,
    _MM_PERM_BBCA = 88,
    _MM_PERM_BBCB = 89,
    _MM_PERM_BBCC = 90,
    _MM_PERM_BBCD = 91,
    _MM_PERM_BBDA = 92,
    _MM_PERM_BBDB = 93,
    _MM_PERM_BBDC = 94,
    _MM_PERM_BBDD = 95,
    _MM_PERM_BCAA = 96,
    _MM_PERM_BCAB = 97,
    _MM_PERM_BCAC = 98,
    _MM_PERM_BCAD = 99,
    _MM_PERM_BCBA = 100,
    _MM_PERM_BCBB = 101,
    _MM_PERM_BCBC = 102,
    _MM_PERM_BCBD = 103,
    _MM_PERM_BCCA = 104,
    _MM_PERM_BCCB = 105,
    _MM_PERM_BCCC = 106,
    _MM_PERM_BCCD = 107,
    _MM_PERM_BCDA = 108,
    _MM_PERM_BCDB = 109,
    _MM_PERM_BCDC = 110,
    _MM_PERM_BCDD = 111,
    _MM_PERM_BDAA = 112,
    _MM_PERM_BDAB = 113,
    _MM_PERM_BDAC = 114,
    _MM_PERM_BDAD = 115,
    _MM_PERM_BDBA = 116,
    _MM_PERM_BDBB = 117,
    _MM_PERM_BDBC = 118,
    _MM_PERM_BDBD = 119,
    _MM_PERM_BDCA = 120,
    _MM_PERM_BDCB = 121,
    _MM_PERM_BDCC = 122,
    _MM_PERM_BDCD = 123,
    _MM_PERM_BDDA = 124,
    _MM_PERM_BDDB = 125,
    _MM_PERM_BDDC = 126,
    _MM_PERM_BDDD = 127,
    _MM_PERM_CAAA = 128,
    _MM_PERM_CAAB = 129,
    _MM_PERM_CAAC = 130,
    _MM_PERM_CAAD = 131,
    _MM_PERM_CABA = 132,
    _MM_PERM_CABB = 133,
    _MM_PERM_CABC = 134,
    _MM_PERM_CABD = 135,
    _MM_PERM_CACA = 136,
    _MM_PERM_CACB = 137,
    _MM_PERM_CACC = 138,
    _MM_PERM_CACD = 139,
    _MM_PERM_CADA = 140,
    _MM_PERM_CADB = 141,
    _MM_PERM_CADC = 142,
    _MM_PERM_CADD = 143,
    _MM_PERM_CBAA = 144,
    _MM_PERM_CBAB = 145,
    _MM_PERM_CBAC = 146,
    _MM_PERM_CBAD = 147,
    _MM_PERM_CBBA = 148,
    _MM_PERM_CBBB = 149,
    _MM_PERM_CBBC = 150,
    _MM_PERM_CBBD = 151,
    _MM_PERM_CBCA = 152,
    _MM_PERM_CBCB = 153,
    _MM_PERM_CBCC = 154,
    _MM_PERM_CBCD = 155,
    _MM_PERM_CBDA = 156,
    _MM_PERM_CBDB = 157,
    _MM_PERM_CBDC = 158,
    _MM_PERM_CBDD = 159,
    _MM_PERM_CCAA = 160,
    _MM_PERM_CCAB = 161,
    _MM_PERM_CCAC = 162,
    _MM_PERM_CCAD = 163,
    _MM_PERM_CCBA = 164,
    _MM_PERM_CCBB = 165,
    _MM_PERM_CCBC = 166,
    _MM_PERM_CCBD = 167,
    _MM_PERM_CCCA = 168,
    _MM_PERM_CCCB = 169,
    _MM_PERM_CCCC = 170,
    _MM_PERM_CCCD = 171,
    _MM_PERM_CCDA = 172,
    _MM_PERM_CCDB = 173,
    _MM_PERM_CCDC = 174,
    _MM_PERM_CCDD = 175,
    _MM_PERM_CDAA = 176,
    _MM_PERM_CDAB = 177,
    _MM_PERM_CDAC = 178,
    _MM_PERM_CDAD = 179,
    _MM_PERM_CDBA = 180,
    _MM_PERM_CDBB = 181,
    _MM_PERM_CDBC = 182,
    _MM_PERM_CDBD = 183,
    _MM_PERM_CDCA = 184,
    _MM_PERM_CDCB = 185,
    _MM_PERM_CDCC = 186,
    _MM_PERM_CDCD = 187,
    _MM_PERM_CDDA = 188,
    _MM_PERM_CDDB = 189,
    _MM_PERM_CDDC = 190,
    _MM_PERM_CDDD = 191,
    _MM_PERM_DAAA = 192,
    _MM_PERM_DAAB = 193,
    _MM_PERM_DAAC = 194,
    _MM_PERM_DAAD = 195,
    _MM_PERM_DABA = 196,
    _MM_PERM_DABB = 197,
    _MM_PERM_DABC = 198,
    _MM_PERM_DABD = 199,
    _MM_PERM_DACA = 200,
    _MM_PERM_DACB = 201,
    _MM_PERM_DACC = 202,
    _MM_PERM_DACD = 203,
    _MM_PERM_DADA = 204,
    _MM_PERM_DADB = 205,
    _MM_PERM_DADC = 206,
    _MM_PERM_DADD = 207,
    _MM_PERM_DBAA = 208,
    _MM_PERM_DBAB = 209,
    _MM_PERM_DBAC = 210,
    _MM_PERM_DBAD = 211,
    _MM_PERM_DBBA = 212,
    _MM_PERM_DBBB = 213,
    _MM_PERM_DBBC = 214,
    _MM_PERM_DBBD = 215,
    _MM_PERM_DBCA = 216,
    _MM_PERM_DBCB = 217,
    _MM_PERM_DBCC = 218,
    _MM_PERM_DBCD = 219,
    _MM_PERM_DBDA = 220,
    _MM_PERM_DBDB = 221,
    _MM_PERM_DBDC = 222,
    _MM_PERM_DBDD = 223,
    _MM_PERM_DCAA = 224,
    _MM_PERM_DCAB = 225,
    _MM_PERM_DCAC = 226,
    _MM_PERM_DCAD = 227,
    _MM_PERM_DCBA = 228,
    _MM_PERM_DCBB = 229,
    _MM_PERM_DCBC = 230,
    _MM_PERM_DCBD = 231,
    _MM_PERM_DCCA = 232,
    _MM_PERM_DCCB = 233,
    _MM_PERM_DCCC = 234,
    _MM_PERM_DCCD = 235,
    _MM_PERM_DCDA = 236,
    _MM_PERM_DCDB = 237,
    _MM_PERM_DCDC = 238,
    _MM_PERM_DCDD = 239,
    _MM_PERM_DDAA = 240,
    _MM_PERM_DDAB = 241,
    _MM_PERM_DDAC = 242,
    _MM_PERM_DDAD = 243,
    _MM_PERM_DDBA = 244,
    _MM_PERM_DDBB = 245,
    _MM_PERM_DDBC = 246,
    _MM_PERM_DDBD = 247,
    _MM_PERM_DDCA = 248,
    _MM_PERM_DDCB = 249,
    _MM_PERM_DDCC = 250,
    _MM_PERM_DDCD = 251,
    _MM_PERM_DDDA = 252,
    _MM_PERM_DDDB = 253,
    _MM_PERM_DDDC = 254,
    _MM_PERM_DDDD = 255,
}
pub use self::_bindgen_ty_76 as _MM_PERM_ENUM;
pub const _MM_MANT_NORM_1_2: _bindgen_ty_77 =
    _bindgen_ty_77::_MM_MANT_NORM_1_2;
pub const _MM_MANT_NORM_p5_2: _bindgen_ty_77 =
    _bindgen_ty_77::_MM_MANT_NORM_p5_2;
pub const _MM_MANT_NORM_p5_1: _bindgen_ty_77 =
    _bindgen_ty_77::_MM_MANT_NORM_p5_1;
pub const _MM_MANT_NORM_p75_1p5: _bindgen_ty_77 =
    _bindgen_ty_77::_MM_MANT_NORM_p75_1p5;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_77 {
    _MM_MANT_NORM_1_2 = 0,
    _MM_MANT_NORM_p5_2 = 1,
    _MM_MANT_NORM_p5_1 = 2,
    _MM_MANT_NORM_p75_1p5 = 3,
}
pub use self::_bindgen_ty_77 as _MM_MANTISSA_NORM_ENUM;
pub const _MM_MANT_SIGN_src: _bindgen_ty_78 =
    _bindgen_ty_78::_MM_MANT_SIGN_src;
pub const _MM_MANT_SIGN_zero: _bindgen_ty_78 =
    _bindgen_ty_78::_MM_MANT_SIGN_zero;
pub const _MM_MANT_SIGN_nan: _bindgen_ty_78 =
    _bindgen_ty_78::_MM_MANT_SIGN_nan;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_78 {
    _MM_MANT_SIGN_src = 0,
    _MM_MANT_SIGN_zero = 1,
    _MM_MANT_SIGN_nan = 2,
}
pub use self::_bindgen_ty_78 as _MM_MANTISSA_SIGN_ENUM;
pub type __mmask32 = ::std::os::raw::c_uint;
pub type __mmask64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_79 {
    pub freelist: *mut jl_taggedvalue_t,
    pub newpages: *mut jl_taggedvalue_t,
    pub osize: u16,
}
#[test]
fn bindgen_test_layout__bindgen_ty_79() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_79>() , 24usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_79>() , 8usize);
}
impl Clone for _bindgen_ty_79 {
    fn clone(&self) -> Self { *self }
}
pub type jl_gc_pool_t = _bindgen_ty_79;
#[repr(C)]
pub struct _bindgen_ty_80 {
    pub weak_refs: arraylist_t,
    pub mallocarrays: *mut _bindgen_ty_80__mallocarray_t,
    pub mafreelist: *mut _bindgen_ty_80__mallocarray_t,
    pub big_objects: *mut _bindgen_ty_80__bigval_t,
    pub rem_bindings: arraylist_t,
    pub _remset: [arraylist_t; 2usize],
    pub remset_nptr: ::std::os::raw::c_int,
    pub remset: *mut arraylist_t,
    pub last_remset: *mut arraylist_t,
    pub norm_pools: [jl_gc_pool_t; 41usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_80__mallocarray_t([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_80__bigval_t([u8; 0]);
#[test]
fn bindgen_test_layout__bindgen_ty_80() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_80>() , 2056usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_80>() , 8usize);
}
pub type jl_thread_heap_t = _bindgen_ty_80;
#[repr(C)]
pub struct _jl_tls_states_t {
    pub pgcstack: *mut _jl_tls_states_t__jl_gcframe_t,
    pub exception_in_transit: *mut _jl_tls_states_t__jl_value_t,
    pub safepoint: *mut usize,
    pub gc_state: i8,
    pub in_finalizer: i8,
    pub disable_gc: i8,
    pub defer_signal: sig_atomic_t,
    pub current_module: *mut _jl_tls_states_t__jl_module_t,
    pub current_task: *mut _jl_tls_states_t__jl_task_t,
    pub root_task: *mut _jl_tls_states_t__jl_task_t,
    pub task_arg_in_transit: *mut _jl_tls_states_t__jl_value_t,
    pub stackbase: *mut ::std::os::raw::c_void,
    pub stack_lo: *mut ::std::os::raw::c_char,
    pub stack_hi: *mut ::std::os::raw::c_char,
    pub jmp_target: *mut sigjmp_buf,
    pub base_ctx: sigjmp_buf,
    pub safe_restore: *mut sigjmp_buf,
    pub tid: i16,
    pub bt_size: usize,
    pub bt_data: *mut usize,
    pub signal_request: sig_atomic_t,
    pub io_wait: sig_atomic_t,
    pub heap: jl_thread_heap_t,
    pub system_id: pthread_t,
    pub signal_stack: *mut ::std::os::raw::c_void,
    pub finalizers_inhibited: ::std::os::raw::c_int,
    pub finalizers: arraylist_t,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _jl_tls_states_t__jl_gcframe_t {
    pub nroots: usize,
    pub prev: *mut _jl_tls_states_t__jl_gcframe_t,
}
#[test]
fn bindgen_test_layout__jl_tls_states_t__jl_gcframe_t() {
    assert_eq!(::std::mem::size_of::<_jl_tls_states_t__jl_gcframe_t>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_jl_tls_states_t__jl_gcframe_t>() ,
               8usize);
}
impl Clone for _jl_tls_states_t__jl_gcframe_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jl_tls_states_t__jl_value_t([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _jl_tls_states_t__jl_module_t {
    pub name: *mut jl_sym_t,
    pub parent: *mut _jl_tls_states_t__jl_module_t,
    pub bindings: htable_t,
    pub usings: arraylist_t,
    pub istopmod: u8,
    pub uuid: u64,
    pub counter: u32,
}
#[test]
fn bindgen_test_layout__jl_tls_states_t__jl_module_t() {
    assert_eq!(::std::mem::size_of::<_jl_tls_states_t__jl_module_t>() ,
               568usize);
    assert_eq!(::std::mem::align_of::<_jl_tls_states_t__jl_module_t>() ,
               8usize);
}
impl Clone for _jl_tls_states_t__jl_module_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _jl_tls_states_t__jl_task_t {
    pub parent: *mut _jl_tls_states_t__jl_task_t,
    pub tls: *mut jl_value_t,
    pub state: *mut jl_sym_t,
    pub consumers: *mut jl_value_t,
    pub donenotify: *mut jl_value_t,
    pub result: *mut jl_value_t,
    pub exception: *mut jl_value_t,
    pub backtrace: *mut jl_value_t,
    pub start: *mut jl_function_t,
    pub ctx: sigjmp_buf,
    pub bufsz: usize,
    pub stkbuf: *mut ::std::os::raw::c_void,
    pub ssize: usize,
    pub _bitfield_1: u8,
    pub eh: *mut jl_handler_t,
    pub gcstack: *mut jl_gcframe_t,
    pub current_module: *mut jl_module_t,
    pub tid: i16,
    pub timing_stack: *mut jl_timing_block_t,
}
#[test]
fn bindgen_test_layout__jl_tls_states_t__jl_task_t() {
    assert_eq!(::std::mem::size_of::<_jl_tls_states_t__jl_task_t>() ,
               344usize);
    assert_eq!(::std::mem::align_of::<_jl_tls_states_t__jl_task_t>() ,
               8usize);
}
impl Clone for _jl_tls_states_t__jl_task_t {
    fn clone(&self) -> Self { *self }
}
impl _jl_tls_states_t__jl_task_t {
    #[inline]
    pub fn started(&self) -> usize {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (1usize as u8)) >>
                                       0u32) as u64)
        }
    }
    #[inline]
    pub fn set_started(&mut self, val: usize) {
        self._bitfield_1 &= !(1usize as u8);
        self._bitfield_1 |= ((val as u64 as u8) << 0u32) & (1usize as u8);
    }
}
#[test]
fn bindgen_test_layout__jl_tls_states_t() {
    assert_eq!(::std::mem::size_of::<_jl_tls_states_t>() , 2672usize);
    assert_eq!(::std::mem::align_of::<_jl_tls_states_t>() , 8usize);
}
pub type jl_tls_states_t = _jl_tls_states_t;
pub type jl_ptls_t = *mut jl_tls_states_t;
extern "C" {
    pub fn jl_threadid() -> i16;
}
extern "C" {
    pub fn jl_threadgroup() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jl_threading_profile();
}
extern "C" {
    pub fn jl_cpu_pause();
}
extern "C" {
    pub fn jl_cpu_wake();
}
extern "C" {
    pub fn jl_get_ptls_states() -> *mut _jl_tls_states_t;
}
extern "C" {
    #[link_name = "jl_tls_states"]
    pub static mut jl_tls_states: jl_tls_states_t;
}
extern "C" {
    pub fn jl_gc_safepoint();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_81 {
    pub owner: ::std::os::raw::c_ulong,
    pub count: u32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_81() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_81>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_81>() , 8usize);
}
impl Clone for _bindgen_ty_81 {
    fn clone(&self) -> Self { *self }
}
pub type jl_mutex_t = _bindgen_ty_81;
extern "C" {
    pub fn jl_gc_enable_finalizers(ptls: jl_ptls_t,
                                   on: ::std::os::raw::c_int);
}
pub type jl_value_t = _jl_tls_states_t__jl_value_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _jl_taggedvalue_bits {
    pub _bitfield_1: u8,
}
#[test]
fn bindgen_test_layout__jl_taggedvalue_bits() {
    assert_eq!(::std::mem::size_of::<_jl_taggedvalue_bits>() , 8usize);
    assert_eq!(::std::mem::align_of::<_jl_taggedvalue_bits>() , 8usize);
}
impl Clone for _jl_taggedvalue_bits {
    fn clone(&self) -> Self { *self }
}
impl _jl_taggedvalue_bits {
    #[inline]
    pub fn gc(&self) -> usize {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (3usize as u8)) >>
                                       0u32) as u64)
        }
    }
    #[inline]
    pub fn set_gc(&mut self, val: usize) {
        self._bitfield_1 &= !(3usize as u8);
        self._bitfield_1 |= ((val as u64 as u8) << 0u32) & (3usize as u8);
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _jl_sym_t {
    pub left: *mut _jl_sym_t,
    pub right: *mut _jl_sym_t,
    pub hash: usize,
}
#[test]
fn bindgen_test_layout__jl_sym_t() {
    assert_eq!(::std::mem::size_of::<_jl_sym_t>() , 24usize);
    assert_eq!(::std::mem::align_of::<_jl_sym_t>() , 8usize);
}
impl Clone for _jl_sym_t {
    fn clone(&self) -> Self { *self }
}
pub type jl_sym_t = _jl_sym_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _jl_ssavalue_t {
    pub id: isize,
}
#[test]
fn bindgen_test_layout__jl_ssavalue_t() {
    assert_eq!(::std::mem::size_of::<_jl_ssavalue_t>() , 8usize);
    assert_eq!(::std::mem::align_of::<_jl_ssavalue_t>() , 8usize);
}
impl Clone for _jl_ssavalue_t {
    fn clone(&self) -> Self { *self }
}
pub type jl_ssavalue_t = _jl_ssavalue_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_82 {
    pub length: usize,
}
#[test]
fn bindgen_test_layout__bindgen_ty_82() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_82>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_82>() , 8usize);
}
impl Clone for _bindgen_ty_82 {
    fn clone(&self) -> Self { *self }
}
pub type jl_svec_t = _bindgen_ty_82;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_83 {
    pub _bitfield_1: u16,
}
#[test]
fn bindgen_test_layout__bindgen_ty_83() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_83>() , 2usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_83>() , 2usize);
}
impl Clone for _bindgen_ty_83 {
    fn clone(&self) -> Self { *self }
}
impl _bindgen_ty_83 {
    #[inline]
    pub fn how(&self) -> u16 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (3usize as u16)) >>
                                       0u32) as u16)
        }
    }
    #[inline]
    pub fn set_how(&mut self, val: u16) {
        self._bitfield_1 &= !(3usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 0u32) & (3usize as u16);
    }
    #[inline]
    pub fn ndims(&self) -> u16 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (4092usize as u16)) >>
                                       2u32) as u16)
        }
    }
    #[inline]
    pub fn set_ndims(&mut self, val: u16) {
        self._bitfield_1 &= !(4092usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 2u32) & (4092usize as u16);
    }
    #[inline]
    pub fn pooled(&self) -> u16 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (4096usize as u16)) >>
                                       12u32) as u16)
        }
    }
    #[inline]
    pub fn set_pooled(&mut self, val: u16) {
        self._bitfield_1 &= !(4096usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 12u32) & (4096usize as u16);
    }
    #[inline]
    pub fn ptrarray(&self) -> u16 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (8192usize as u16)) >>
                                       13u32) as u16)
        }
    }
    #[inline]
    pub fn set_ptrarray(&mut self, val: u16) {
        self._bitfield_1 &= !(8192usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 13u32) & (8192usize as u16);
    }
    #[inline]
    pub fn isshared(&self) -> u16 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (16384usize as u16)) >>
                                       14u32) as u16)
        }
    }
    #[inline]
    pub fn set_isshared(&mut self, val: u16) {
        self._bitfield_1 &= !(16384usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 14u32) & (16384usize as u16);
    }
    #[inline]
    pub fn isaligned(&self) -> u16 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (32768usize as u16)) >>
                                       15u32) as u16)
        }
    }
    #[inline]
    pub fn set_isaligned(&mut self, val: u16) {
        self._bitfield_1 &= !(32768usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 15u32) & (32768usize as u16);
    }
}
pub type jl_array_flags_t = _bindgen_ty_83;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_84 {
    pub data: *mut ::std::os::raw::c_void,
    pub length: usize,
    pub flags: jl_array_flags_t,
    pub elsize: u16,
    pub offset: u32,
    pub nrows: usize,
    pub __bindgen_anon_1: _bindgen_ty_84__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_84__bindgen_ty_1 {
    pub maxsize: usize,
    pub ncols: usize,
}
#[test]
fn bindgen_test_layout__bindgen_ty_84__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_84__bindgen_ty_1>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_84__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_84__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_84() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_84>() , 40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_84>() , 8usize);
}
impl Clone for _bindgen_ty_84 {
    fn clone(&self) -> Self { *self }
}
pub type jl_array_t = _bindgen_ty_84;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _jl_datatype_t {
    pub name: *mut jl_typename_t,
    pub super_: *mut _jl_datatype_t,
    pub parameters: *mut jl_svec_t,
    pub types: *mut jl_svec_t,
    pub instance: *mut jl_value_t,
    pub layout: *const jl_datatype_layout_t,
    pub size: i32,
    pub ninitialized: i32,
    pub uid: u32,
    pub abstract_: u8,
    pub mutabl: u8,
    pub struct_decl: *mut ::std::os::raw::c_void,
    pub ditype: *mut ::std::os::raw::c_void,
    pub depth: i32,
    pub hastypevars: i8,
    pub haswildcard: i8,
    pub isleaftype: i8,
}
#[test]
fn bindgen_test_layout__jl_datatype_t() {
    assert_eq!(::std::mem::size_of::<_jl_datatype_t>() , 88usize);
    assert_eq!(::std::mem::align_of::<_jl_datatype_t>() , 8usize);
}
impl Clone for _jl_datatype_t {
    fn clone(&self) -> Self { *self }
}
pub type jl_tupletype_t = _jl_datatype_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _jl_lambda_info_t {
    pub rettype: *mut jl_value_t,
    pub sparam_syms: *mut jl_svec_t,
    pub sparam_vals: *mut jl_svec_t,
    pub specTypes: *mut jl_tupletype_t,
    pub code: *mut jl_value_t,
    pub slottypes: *mut jl_value_t,
    pub ssavaluetypes: *mut jl_value_t,
    pub slotnames: *mut jl_array_t,
    pub slotflags: *mut jl_array_t,
    pub unspecialized_ducttape: *mut _jl_lambda_info_t,
    pub def: *mut jl_method_t,
    pub constval: *mut jl_value_t,
    pub nargs: i32,
    pub isva: i8,
    pub inferred: i8,
    pub pure_: i8,
    pub inlineable: i8,
    pub inInference: i8,
    pub inCompile: i8,
    pub jlcall_api: i8,
    pub compile_traced: i8,
    pub fptr: jl_fptr_t,
    pub functionObjectsDecls: jl_llvm_functions_t,
}
#[test]
fn bindgen_test_layout__jl_lambda_info_t() {
    assert_eq!(::std::mem::size_of::<_jl_lambda_info_t>() , 136usize);
    assert_eq!(::std::mem::align_of::<_jl_lambda_info_t>() , 8usize);
}
impl Clone for _jl_lambda_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union jl_typemap_t {
    pub node: *mut jl_typemap_t__jl_typemap_level_t,
    pub leaf: *mut jl_typemap_t__jl_typemap_entry_t,
    pub unknown: *mut _jl_tls_states_t__jl_value_t,
}
#[repr(C)]
#[derive(Copy)]
pub struct jl_typemap_t__jl_typemap_level_t {
    pub arg1: jl_ordereddict_t,
    pub targ: jl_ordereddict_t,
    pub linear: *mut jl_typemap_entry_t,
    pub any: jl_typemap_t,
    pub key: *mut jl_value_t,
}
#[test]
fn bindgen_test_layout_jl_typemap_t__jl_typemap_level_t() {
    assert_eq!(::std::mem::size_of::<jl_typemap_t__jl_typemap_level_t>() ,
               56usize);
    assert_eq!(::std::mem::align_of::<jl_typemap_t__jl_typemap_level_t>() ,
               8usize);
}
impl Clone for jl_typemap_t__jl_typemap_level_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct jl_typemap_t__jl_typemap_entry_t {
    pub next: *mut jl_typemap_t__jl_typemap_entry_t,
    pub sig: *mut jl_tupletype_t,
    pub tvars: *mut jl_svec_t,
    pub simplesig: *mut jl_tupletype_t,
    pub guardsigs: *mut jl_svec_t,
    pub func: jl_typemap_t__jl_typemap_entry_t__bindgen_ty_1,
    pub isleafsig: i8,
    pub issimplesig: i8,
    pub va: i8,
}
#[repr(C)]
#[derive(Copy)]
pub union jl_typemap_t__jl_typemap_entry_t__bindgen_ty_1 {
    pub value: *mut jl_value_t,
    pub linfo: *mut jl_lambda_info_t,
    pub method: *mut jl_method_t,
}
#[test]
fn bindgen_test_layout_jl_typemap_t__jl_typemap_entry_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<jl_typemap_t__jl_typemap_entry_t__bindgen_ty_1>()
               , 8usize);
    assert_eq!(::std::mem::align_of::<jl_typemap_t__jl_typemap_entry_t__bindgen_ty_1>()
               , 8usize);
}
impl Clone for jl_typemap_t__jl_typemap_entry_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_jl_typemap_t__jl_typemap_entry_t() {
    assert_eq!(::std::mem::size_of::<jl_typemap_t__jl_typemap_entry_t>() ,
               56usize);
    assert_eq!(::std::mem::align_of::<jl_typemap_t__jl_typemap_entry_t>() ,
               8usize);
}
impl Clone for jl_typemap_t__jl_typemap_entry_t {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_jl_typemap_t() {
    assert_eq!(::std::mem::size_of::<jl_typemap_t>() , 8usize);
    assert_eq!(::std::mem::align_of::<jl_typemap_t>() , 8usize);
}
impl Clone for jl_typemap_t {
    fn clone(&self) -> Self { *self }
}
pub type jl_fptr_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut jl_value_t,
                                               arg2: *mut *mut jl_value_t,
                                               arg3: u32)
                              -> *mut _jl_tls_states_t__jl_value_t>;
pub type jl_fptr_sparam_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut jl_svec_t,
                                               arg2: *mut jl_value_t,
                                               arg3: *mut *mut jl_value_t,
                                               arg4: u32)
                              -> *mut _jl_tls_states_t__jl_value_t>;
pub type jl_fptr_linfo_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut _jl_lambda_info_t,
                                               arg2: *mut *mut jl_value_t,
                                               arg3: u32,
                                               arg4: *mut jl_svec_t)
                              -> *mut _jl_tls_states_t__jl_value_t>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _jl_llvm_functions_t {
    pub functionObject: *mut ::std::os::raw::c_void,
    pub specFunctionObject: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__jl_llvm_functions_t() {
    assert_eq!(::std::mem::size_of::<_jl_llvm_functions_t>() , 16usize);
    assert_eq!(::std::mem::align_of::<_jl_llvm_functions_t>() , 8usize);
}
impl Clone for _jl_llvm_functions_t {
    fn clone(&self) -> Self { *self }
}
pub type jl_llvm_functions_t = _jl_llvm_functions_t;
#[repr(C)]
#[derive(Copy)]
pub struct _jl_method_t {
    pub name: *mut jl_sym_t,
    pub module: *mut _jl_tls_states_t__jl_module_t,
    pub file: *mut jl_sym_t,
    pub line: i32,
    pub sig: *mut jl_tupletype_t,
    pub tvars: *mut jl_svec_t,
    pub ambig: *mut jl_value_t,
    pub specializations: jl_typemap_t,
    pub lambda_template: *mut _jl_lambda_info_t,
    pub roots: *mut jl_array_t,
    pub invokes: jl_typemap_t,
    pub called: i32,
    pub isstaged: i8,
    pub needs_sparam_vals_ducttape: u8,
    pub traced: u8,
    pub writelock: jl_mutex_t,
}
#[test]
fn bindgen_test_layout__jl_method_t() {
    assert_eq!(::std::mem::size_of::<_jl_method_t>() , 112usize);
    assert_eq!(::std::mem::align_of::<_jl_method_t>() , 8usize);
}
impl Clone for _jl_method_t {
    fn clone(&self) -> Self { *self }
}
pub type jl_method_t = _jl_method_t;
pub type jl_lambda_info_t = _jl_lambda_info_t;
pub type jl_function_t = jl_value_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_85 {
    pub parameters: *mut jl_svec_t,
    pub body: *mut jl_value_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_85() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_85>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_85>() , 8usize);
}
impl Clone for _bindgen_ty_85 {
    fn clone(&self) -> Self { *self }
}
pub type jl_typector_t = _bindgen_ty_85;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_86 {
    pub name: *mut jl_sym_t,
    pub module: *mut _jl_tls_states_t__jl_module_t,
    pub names: *mut jl_svec_t,
    pub primary: *mut jl_value_t,
    pub cache: *mut jl_svec_t,
    pub linearcache: *mut jl_svec_t,
    pub hash: isize,
    pub mt: *mut _bindgen_ty_86__jl_methtable_t,
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_86__jl_methtable_t {
    pub name: *mut jl_sym_t,
    pub defs: jl_typemap_t,
    pub cache: jl_typemap_t,
    pub max_args: isize,
    pub kwsorter: *mut jl_value_t,
    pub module: *mut jl_module_t,
    pub writelock: jl_mutex_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_86__jl_methtable_t() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_86__jl_methtable_t>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_86__jl_methtable_t>() ,
               8usize);
}
impl Clone for _bindgen_ty_86__jl_methtable_t {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_86() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_86>() , 64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_86>() , 8usize);
}
impl Clone for _bindgen_ty_86 {
    fn clone(&self) -> Self { *self }
}
pub type jl_typename_t = _bindgen_ty_86;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_87 {
    pub types: *mut jl_svec_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_87() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_87>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_87>() , 8usize);
}
impl Clone for _bindgen_ty_87 {
    fn clone(&self) -> Self { *self }
}
pub type jl_uniontype_t = _bindgen_ty_87;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_88 {
    pub _bitfield_1: u8,
    pub offset: u8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_88() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_88>() , 2usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_88>() , 1usize);
}
impl Clone for _bindgen_ty_88 {
    fn clone(&self) -> Self { *self }
}
impl _bindgen_ty_88 {
    #[inline]
    pub fn isptr(&self) -> u8 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (1usize as u8)) >>
                                       0u32) as u8)
        }
    }
    #[inline]
    pub fn set_isptr(&mut self, val: u8) {
        self._bitfield_1 &= !(1usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 0u32) & (1usize as u8);
    }
    #[inline]
    pub fn size(&self) -> u8 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (254usize as u8)) >>
                                       1u32) as u8)
        }
    }
    #[inline]
    pub fn set_size(&mut self, val: u8) {
        self._bitfield_1 &= !(254usize as u8);
        self._bitfield_1 |= ((val as u8 as u8) << 1u32) & (254usize as u8);
    }
}
pub type jl_fielddesc8_t = _bindgen_ty_88;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_89 {
    pub _bitfield_1: u16,
    pub offset: u16,
}
#[test]
fn bindgen_test_layout__bindgen_ty_89() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_89>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_89>() , 2usize);
}
impl Clone for _bindgen_ty_89 {
    fn clone(&self) -> Self { *self }
}
impl _bindgen_ty_89 {
    #[inline]
    pub fn isptr(&self) -> u16 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (1usize as u16)) >>
                                       0u32) as u16)
        }
    }
    #[inline]
    pub fn set_isptr(&mut self, val: u16) {
        self._bitfield_1 &= !(1usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 0u32) & (1usize as u16);
    }
    #[inline]
    pub fn size(&self) -> u16 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (65534usize as u16)) >>
                                       1u32) as u16)
        }
    }
    #[inline]
    pub fn set_size(&mut self, val: u16) {
        self._bitfield_1 &= !(65534usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 1u32) & (65534usize as u16);
    }
}
pub type jl_fielddesc16_t = _bindgen_ty_89;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_90 {
    pub _bitfield_1: u32,
    pub offset: u32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_90() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_90>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_90>() , 4usize);
}
impl Clone for _bindgen_ty_90 {
    fn clone(&self) -> Self { *self }
}
impl _bindgen_ty_90 {
    #[inline]
    pub fn isptr(&self) -> u32 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (1usize as u32)) >>
                                       0u32) as u32)
        }
    }
    #[inline]
    pub fn set_isptr(&mut self, val: u32) {
        self._bitfield_1 &= !(1usize as u32);
        self._bitfield_1 |= ((val as u32 as u32) << 0u32) & (1usize as u32);
    }
    #[inline]
    pub fn size(&self) -> u32 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4294967294usize as u32)) >> 1u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_size(&mut self, val: u32) {
        self._bitfield_1 &= !(4294967294usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 1u32) & (4294967294usize as u32);
    }
}
pub type jl_fielddesc32_t = _bindgen_ty_90;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_91 {
    pub nfields: u32,
    pub _bitfield_1: u32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_91() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_91>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_91>() , 4usize);
}
impl Clone for _bindgen_ty_91 {
    fn clone(&self) -> Self { *self }
}
impl _bindgen_ty_91 {
    #[inline]
    pub fn alignment(&self) -> u32 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (268435455usize as u32)) >> 0u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_alignment(&mut self, val: u32) {
        self._bitfield_1 &= !(268435455usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 0u32) & (268435455usize as u32);
    }
    #[inline]
    pub fn haspadding(&self) -> u32 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (268435456usize as u32)) >> 28u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_haspadding(&mut self, val: u32) {
        self._bitfield_1 &= !(268435456usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 28u32) & (268435456usize as u32);
    }
    #[inline]
    pub fn pointerfree(&self) -> u32 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (536870912usize as u32)) >> 29u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_pointerfree(&mut self, val: u32) {
        self._bitfield_1 &= !(536870912usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 29u32) & (536870912usize as u32);
    }
    #[inline]
    pub fn fielddesc_type(&self) -> u32 {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (3221225472usize as u32)) >> 30u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_fielddesc_type(&mut self, val: u32) {
        self._bitfield_1 &= !(3221225472usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 30u32) & (3221225472usize as u32);
    }
}
pub type jl_datatype_layout_t = _bindgen_ty_91;
pub type jl_datatype_t = _jl_datatype_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_92 {
    pub name: *mut jl_sym_t,
    pub lb: *mut jl_value_t,
    pub ub: *mut jl_value_t,
    pub bound: u8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_92() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_92>() , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_92>() , 8usize);
}
impl Clone for _bindgen_ty_92 {
    fn clone(&self) -> Self { *self }
}
pub type jl_tvar_t = _bindgen_ty_92;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_93 {
    pub value: *mut jl_value_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_93() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_93>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_93>() , 8usize);
}
impl Clone for _bindgen_ty_93 {
    fn clone(&self) -> Self { *self }
}
pub type jl_weakref_t = _bindgen_ty_93;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_94 {
    pub name: *mut jl_sym_t,
    pub value: *mut jl_value_t,
    pub globalref: *mut jl_value_t,
    pub owner: *mut _jl_tls_states_t__jl_module_t,
    pub _bitfield_1: u8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_94() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_94>() , 40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_94>() , 8usize);
}
impl Clone for _bindgen_ty_94 {
    fn clone(&self) -> Self { *self }
}
impl _bindgen_ty_94 {
    #[inline]
    pub fn constp(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (1usize as u8)) >>
                                       0u32) as u32)
        }
    }
    #[inline]
    pub fn set_constp(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(1usize as u8);
        self._bitfield_1 |= ((val as u32 as u8) << 0u32) & (1usize as u8);
    }
    #[inline]
    pub fn exportp(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (2usize as u8)) >>
                                       1u32) as u32)
        }
    }
    #[inline]
    pub fn set_exportp(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(2usize as u8);
        self._bitfield_1 |= ((val as u32 as u8) << 1u32) & (2usize as u8);
    }
    #[inline]
    pub fn imported(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (4usize as u8)) >>
                                       2u32) as u32)
        }
    }
    #[inline]
    pub fn set_imported(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(4usize as u8);
        self._bitfield_1 |= ((val as u32 as u8) << 2u32) & (4usize as u8);
    }
    #[inline]
    pub fn deprecated(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (8usize as u8)) >>
                                       3u32) as u32)
        }
    }
    #[inline]
    pub fn set_deprecated(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(8usize as u8);
        self._bitfield_1 |= ((val as u32 as u8) << 3u32) & (8usize as u8);
    }
}
pub type jl_binding_t = _bindgen_ty_94;
pub type jl_module_t = _jl_tls_states_t__jl_module_t;
pub type jl_typemap_entry_t = jl_typemap_t__jl_typemap_entry_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct jl_ordereddict_t {
    pub indexes: *mut jl_array_t,
    pub values: *mut jl_array_t,
}
#[test]
fn bindgen_test_layout_jl_ordereddict_t() {
    assert_eq!(::std::mem::size_of::<jl_ordereddict_t>() , 16usize);
    assert_eq!(::std::mem::align_of::<jl_ordereddict_t>() , 8usize);
}
impl Clone for jl_ordereddict_t {
    fn clone(&self) -> Self { *self }
}
pub type jl_typemap_level_t = jl_typemap_t__jl_typemap_level_t;
pub type jl_methtable_t = _bindgen_ty_86__jl_methtable_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_95 {
    pub head: *mut jl_sym_t,
    pub args: *mut jl_array_t,
    pub etype: *mut jl_value_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_95() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_95>() , 24usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_95>() , 8usize);
}
impl Clone for _bindgen_ty_95 {
    fn clone(&self) -> Self { *self }
}
pub type jl_expr_t = _bindgen_ty_95;
extern "C" {
    #[link_name = "jl_any_type"]
    pub static mut jl_any_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_type_type"]
    pub static mut jl_type_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_typetype_tvar"]
    pub static mut jl_typetype_tvar: *mut jl_tvar_t;
}
extern "C" {
    #[link_name = "jl_typetype_type"]
    pub static mut jl_typetype_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_ANY_flag"]
    pub static mut jl_ANY_flag: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_typename_type"]
    pub static mut jl_typename_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_typector_type"]
    pub static mut jl_typector_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_sym_type"]
    pub static mut jl_sym_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_symbol_type"]
    pub static mut jl_symbol_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_ssavalue_type"]
    pub static mut jl_ssavalue_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_abstractslot_type"]
    pub static mut jl_abstractslot_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_slotnumber_type"]
    pub static mut jl_slotnumber_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_typedslot_type"]
    pub static mut jl_typedslot_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_simplevector_type"]
    pub static mut jl_simplevector_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_tuple_typename"]
    pub static mut jl_tuple_typename: *mut jl_typename_t;
}
extern "C" {
    #[link_name = "jl_vecelement_typename"]
    pub static mut jl_vecelement_typename: *mut jl_typename_t;
}
extern "C" {
    #[link_name = "jl_anytuple_type"]
    pub static mut jl_anytuple_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_anytuple_type_type"]
    pub static mut jl_anytuple_type_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_vararg_type"]
    pub static mut jl_vararg_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_tvar_type"]
    pub static mut jl_tvar_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_task_type"]
    pub static mut jl_task_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_function_type"]
    pub static mut jl_function_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_builtin_type"]
    pub static mut jl_builtin_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_uniontype_type"]
    pub static mut jl_uniontype_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_datatype_type"]
    pub static mut jl_datatype_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_bottom_type"]
    pub static mut jl_bottom_type: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_lambda_info_type"]
    pub static mut jl_lambda_info_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_method_type"]
    pub static mut jl_method_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_module_type"]
    pub static mut jl_module_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_abstractarray_type"]
    pub static mut jl_abstractarray_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_densearray_type"]
    pub static mut jl_densearray_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_array_type"]
    pub static mut jl_array_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_array_typename"]
    pub static mut jl_array_typename: *mut jl_typename_t;
}
extern "C" {
    #[link_name = "jl_weakref_type"]
    pub static mut jl_weakref_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_string_type"]
    pub static mut jl_string_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_errorexception_type"]
    pub static mut jl_errorexception_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_argumenterror_type"]
    pub static mut jl_argumenterror_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_loaderror_type"]
    pub static mut jl_loaderror_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_initerror_type"]
    pub static mut jl_initerror_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_typeerror_type"]
    pub static mut jl_typeerror_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_methoderror_type"]
    pub static mut jl_methoderror_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_undefvarerror_type"]
    pub static mut jl_undefvarerror_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_stackovf_exception"]
    pub static mut jl_stackovf_exception: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_memory_exception"]
    pub static mut jl_memory_exception: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_readonlymemory_exception"]
    pub static mut jl_readonlymemory_exception: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_diverror_exception"]
    pub static mut jl_diverror_exception: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_domain_exception"]
    pub static mut jl_domain_exception: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_overflow_exception"]
    pub static mut jl_overflow_exception: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_inexact_exception"]
    pub static mut jl_inexact_exception: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_undefref_exception"]
    pub static mut jl_undefref_exception: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_interrupt_exception"]
    pub static mut jl_interrupt_exception: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_boundserror_type"]
    pub static mut jl_boundserror_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_an_empty_vec_any"]
    pub static mut jl_an_empty_vec_any: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_bool_type"]
    pub static mut jl_bool_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_char_type"]
    pub static mut jl_char_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_int8_type"]
    pub static mut jl_int8_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_uint8_type"]
    pub static mut jl_uint8_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_int16_type"]
    pub static mut jl_int16_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_uint16_type"]
    pub static mut jl_uint16_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_int32_type"]
    pub static mut jl_int32_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_uint32_type"]
    pub static mut jl_uint32_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_int64_type"]
    pub static mut jl_int64_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_uint64_type"]
    pub static mut jl_uint64_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_float16_type"]
    pub static mut jl_float16_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_float32_type"]
    pub static mut jl_float32_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_float64_type"]
    pub static mut jl_float64_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_floatingpoint_type"]
    pub static mut jl_floatingpoint_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_number_type"]
    pub static mut jl_number_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_void_type"]
    pub static mut jl_void_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_complex_type"]
    pub static mut jl_complex_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_signed_type"]
    pub static mut jl_signed_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_voidpointer_type"]
    pub static mut jl_voidpointer_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_pointer_type"]
    pub static mut jl_pointer_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_ref_type"]
    pub static mut jl_ref_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_array_uint8_type"]
    pub static mut jl_array_uint8_type: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_array_any_type"]
    pub static mut jl_array_any_type: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_array_symbol_type"]
    pub static mut jl_array_symbol_type: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_expr_type"]
    pub static mut jl_expr_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_globalref_type"]
    pub static mut jl_globalref_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_linenumbernode_type"]
    pub static mut jl_linenumbernode_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_labelnode_type"]
    pub static mut jl_labelnode_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_gotonode_type"]
    pub static mut jl_gotonode_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_quotenode_type"]
    pub static mut jl_quotenode_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_newvarnode_type"]
    pub static mut jl_newvarnode_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_intrinsic_type"]
    pub static mut jl_intrinsic_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_methtable_type"]
    pub static mut jl_methtable_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_typemap_level_type"]
    pub static mut jl_typemap_level_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_typemap_entry_type"]
    pub static mut jl_typemap_entry_type: *mut jl_datatype_t;
}
extern "C" {
    #[link_name = "jl_emptysvec"]
    pub static mut jl_emptysvec: *mut jl_svec_t;
}
extern "C" {
    #[link_name = "jl_emptytuple"]
    pub static mut jl_emptytuple: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_true"]
    pub static mut jl_true: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_false"]
    pub static mut jl_false: *mut jl_value_t;
}
extern "C" {
    #[link_name = "jl_nothing"]
    pub static mut jl_nothing: *mut jl_value_t;
}
extern "C" {
    #[link_name = "call_sym"]
    pub static mut call_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "invoke_sym"]
    pub static mut invoke_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "empty_sym"]
    pub static mut empty_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "body_sym"]
    pub static mut body_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "dots_sym"]
    pub static mut dots_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "vararg_sym"]
    pub static mut vararg_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "quote_sym"]
    pub static mut quote_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "newvar_sym"]
    pub static mut newvar_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "top_sym"]
    pub static mut top_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "dot_sym"]
    pub static mut dot_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "line_sym"]
    pub static mut line_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "toplevel_sym"]
    pub static mut toplevel_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "core_sym"]
    pub static mut core_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "globalref_sym"]
    pub static mut globalref_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "jl_incomplete_sym"]
    pub static mut jl_incomplete_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "error_sym"]
    pub static mut error_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "amp_sym"]
    pub static mut amp_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "module_sym"]
    pub static mut module_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "colons_sym"]
    pub static mut colons_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "export_sym"]
    pub static mut export_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "import_sym"]
    pub static mut import_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "importall_sym"]
    pub static mut importall_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "using_sym"]
    pub static mut using_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "goto_sym"]
    pub static mut goto_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "goto_ifnot_sym"]
    pub static mut goto_ifnot_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "label_sym"]
    pub static mut label_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "return_sym"]
    pub static mut return_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "lambda_sym"]
    pub static mut lambda_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "assign_sym"]
    pub static mut assign_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "method_sym"]
    pub static mut method_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "slot_sym"]
    pub static mut slot_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "enter_sym"]
    pub static mut enter_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "leave_sym"]
    pub static mut leave_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "exc_sym"]
    pub static mut exc_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "new_sym"]
    pub static mut new_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "compiler_temp_sym"]
    pub static mut compiler_temp_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "const_sym"]
    pub static mut const_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "thunk_sym"]
    pub static mut thunk_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "anonymous_sym"]
    pub static mut anonymous_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "underscore_sym"]
    pub static mut underscore_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "abstracttype_sym"]
    pub static mut abstracttype_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "bitstype_sym"]
    pub static mut bitstype_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "compositetype_sym"]
    pub static mut compositetype_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "global_sym"]
    pub static mut global_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "unused_sym"]
    pub static mut unused_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "boundscheck_sym"]
    pub static mut boundscheck_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "inbounds_sym"]
    pub static mut inbounds_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "copyast_sym"]
    pub static mut copyast_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "fastmath_sym"]
    pub static mut fastmath_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "pure_sym"]
    pub static mut pure_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "simdloop_sym"]
    pub static mut simdloop_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "meta_sym"]
    pub static mut meta_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "list_sym"]
    pub static mut list_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "inert_sym"]
    pub static mut inert_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "static_parameter_sym"]
    pub static mut static_parameter_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "polly_sym"]
    pub static mut polly_sym: *mut jl_sym_t;
}
extern "C" {
    #[link_name = "inline_sym"]
    pub static mut inline_sym: *mut jl_sym_t;
}
pub type jl_gcframe_t = _jl_tls_states_t__jl_gcframe_t;
extern "C" {
    pub fn jl_gc_enable(on: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_gc_is_enabled() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_gc_total_bytes() -> i64;
}
extern "C" {
    pub fn jl_gc_total_hrtime() -> u64;
}
extern "C" {
    pub fn jl_gc_diff_total_bytes() -> i64;
}
extern "C" {
    pub fn jl_gc_collect(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jl_gc_add_finalizer(v: *mut jl_value_t, f: *mut jl_function_t);
}
extern "C" {
    pub fn jl_finalize(o: *mut jl_value_t);
}
extern "C" {
    pub fn jl_gc_new_weakref(value: *mut jl_value_t) -> *mut jl_weakref_t;
}
extern "C" {
    pub fn jl_gc_alloc_0w() -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_gc_alloc_1w() -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_gc_alloc_2w() -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_gc_alloc_3w() -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_gc_allocobj(sz: usize) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_clear_malloc_data();
}
extern "C" {
    pub fn jl_gc_queue_root(root: *mut jl_value_t);
}
extern "C" {
    pub fn jl_gc_managed_malloc(sz: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jl_gc_managed_realloc(d: *mut ::std::os::raw::c_void, sz: usize,
                                 oldsz: usize,
                                 isaligned: ::std::os::raw::c_int,
                                 owner: *mut jl_value_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jl_egal(a: *mut jl_value_t, b: *mut jl_value_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_object_id(v: *mut jl_value_t) -> usize;
}
extern "C" {
    pub fn jl_is_leaf_type(v: *mut jl_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_has_typevars(v: *mut jl_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_subtype(a: *mut jl_value_t, b: *mut jl_value_t,
                      ta: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_types_equal(a: *mut jl_value_t, b: *mut jl_value_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_type_union(types: *mut jl_svec_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_type_intersection(a: *mut jl_value_t, b: *mut jl_value_t)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_args_morespecific(a: *mut jl_value_t, b: *mut jl_value_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_typename_str(v: *mut jl_value_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jl_typeof_str(v: *mut jl_value_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jl_type_morespecific(a: *mut jl_value_t, b: *mut jl_value_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_new_typename(name: *mut jl_sym_t) -> *mut jl_typename_t;
}
extern "C" {
    pub fn jl_new_typevar(name: *mut jl_sym_t, lb: *mut jl_value_t,
                          ub: *mut jl_value_t) -> *mut jl_tvar_t;
}
extern "C" {
    pub fn jl_apply_type(tc: *mut jl_value_t, params: *mut jl_svec_t)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_apply_tuple_type(params: *mut jl_svec_t) -> *mut jl_tupletype_t;
}
extern "C" {
    pub fn jl_apply_tuple_type_v(p: *mut *mut jl_value_t, np: usize)
     -> *mut jl_tupletype_t;
}
extern "C" {
    pub fn jl_new_datatype(name: *mut jl_sym_t, super_: *mut jl_datatype_t,
                           parameters: *mut jl_svec_t, fnames: *mut jl_svec_t,
                           ftypes: *mut jl_svec_t,
                           abstract_: ::std::os::raw::c_int,
                           mutabl: ::std::os::raw::c_int,
                           ninitialized: ::std::os::raw::c_int)
     -> *mut jl_datatype_t;
}
extern "C" {
    pub fn jl_new_bitstype(name: *mut jl_value_t, super_: *mut jl_datatype_t,
                           parameters: *mut jl_svec_t, nbits: usize)
     -> *mut jl_datatype_t;
}
extern "C" {
    pub fn jl_new_bits(bt: *mut jl_value_t, data: *mut ::std::os::raw::c_void)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_new_struct(type_: *mut jl_datatype_t, ...) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_new_structv(type_: *mut jl_datatype_t,
                          args: *mut *mut jl_value_t, na: u32)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_new_struct_uninit(type_: *mut jl_datatype_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_new_lambda_info_uninit() -> *mut jl_lambda_info_t;
}
extern "C" {
    pub fn jl_new_lambda_info_from_ast(ast: *mut jl_expr_t)
     -> *mut jl_lambda_info_t;
}
extern "C" {
    pub fn jl_new_method(definition: *mut jl_lambda_info_t,
                         name: *mut jl_sym_t, sig: *mut jl_tupletype_t,
                         tvars: *mut jl_svec_t,
                         isstaged: ::std::os::raw::c_int) -> *mut jl_method_t;
}
extern "C" {
    pub fn jl_svec(n: usize, ...) -> *mut jl_svec_t;
}
extern "C" {
    pub fn jl_svec1(a: *mut ::std::os::raw::c_void) -> *mut jl_svec_t;
}
extern "C" {
    pub fn jl_svec2(a: *mut ::std::os::raw::c_void,
                    b: *mut ::std::os::raw::c_void) -> *mut jl_svec_t;
}
extern "C" {
    pub fn jl_alloc_svec(n: usize) -> *mut jl_svec_t;
}
extern "C" {
    pub fn jl_alloc_svec_uninit(n: usize) -> *mut jl_svec_t;
}
extern "C" {
    pub fn jl_svec_copy(a: *mut jl_svec_t) -> *mut jl_svec_t;
}
extern "C" {
    pub fn jl_svec_fill(n: usize, x: *mut jl_value_t) -> *mut jl_svec_t;
}
extern "C" {
    pub fn jl_tupletype_fill(n: usize, v: *mut jl_value_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_symbol(str: *const ::std::os::raw::c_char) -> *mut jl_sym_t;
}
extern "C" {
    pub fn jl_symbol_lookup(str: *const ::std::os::raw::c_char)
     -> *mut jl_sym_t;
}
extern "C" {
    pub fn jl_symbol_n(str: *const ::std::os::raw::c_char, len: i32)
     -> *mut jl_sym_t;
}
extern "C" {
    pub fn jl_gensym() -> *mut jl_sym_t;
}
extern "C" {
    pub fn jl_tagged_gensym(str: *const ::std::os::raw::c_char, len: i32)
     -> *mut jl_sym_t;
}
extern "C" {
    pub fn jl_get_root_symbol() -> *mut jl_sym_t;
}
extern "C" {
    pub fn jl_generic_function_def(name: *mut jl_sym_t,
                                   bp: *mut *mut jl_value_t,
                                   bp_owner: *mut jl_value_t,
                                   bnd: *mut jl_binding_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_method_def(argdata: *mut jl_svec_t, f: *mut jl_lambda_info_t,
                         isstaged: *mut jl_value_t);
}
extern "C" {
    pub fn jl_get_kwsorter(tn: *mut jl_typename_t) -> *mut jl_function_t;
}
extern "C" {
    pub fn jl_box_bool(x: i8) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_int8(x: i8) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_uint8(x: u8) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_int16(x: i16) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_uint16(x: u16) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_int32(x: i32) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_uint32(x: u32) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_char(x: u32) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_int64(x: i64) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_uint64(x: u64) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_float32(x: f32) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_float64(x: f64) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_voidpointer(x: *mut ::std::os::raw::c_void)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_ssavalue(x: usize) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box_slotnumber(x: usize) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box8(t: *mut jl_datatype_t, x: i8) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box16(t: *mut jl_datatype_t, x: i16) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box32(t: *mut jl_datatype_t, x: i32) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_box64(t: *mut jl_datatype_t, x: i64) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_unbox_bool(v: *mut jl_value_t) -> i8;
}
extern "C" {
    pub fn jl_unbox_int8(v: *mut jl_value_t) -> i8;
}
extern "C" {
    pub fn jl_unbox_uint8(v: *mut jl_value_t) -> u8;
}
extern "C" {
    pub fn jl_unbox_int16(v: *mut jl_value_t) -> i16;
}
extern "C" {
    pub fn jl_unbox_uint16(v: *mut jl_value_t) -> u16;
}
extern "C" {
    pub fn jl_unbox_int32(v: *mut jl_value_t) -> i32;
}
extern "C" {
    pub fn jl_unbox_uint32(v: *mut jl_value_t) -> u32;
}
extern "C" {
    pub fn jl_unbox_int64(v: *mut jl_value_t) -> i64;
}
extern "C" {
    pub fn jl_unbox_uint64(v: *mut jl_value_t) -> u64;
}
extern "C" {
    pub fn jl_unbox_float32(v: *mut jl_value_t) -> f32;
}
extern "C" {
    pub fn jl_unbox_float64(v: *mut jl_value_t) -> f64;
}
extern "C" {
    pub fn jl_unbox_voidpointer(v: *mut jl_value_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jl_get_size(val: *mut jl_value_t, pnt: *mut usize)
     -> ::std::os::raw::c_int;
}
pub const JL_VARARG_NONE: _bindgen_ty_96 = _bindgen_ty_96::JL_VARARG_NONE;
pub const JL_VARARG_INT: _bindgen_ty_96 = _bindgen_ty_96::JL_VARARG_INT;
pub const JL_VARARG_BOUND: _bindgen_ty_96 = _bindgen_ty_96::JL_VARARG_BOUND;
pub const JL_VARARG_UNBOUND: _bindgen_ty_96 =
    _bindgen_ty_96::JL_VARARG_UNBOUND;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_96 {
    JL_VARARG_NONE = 0,
    JL_VARARG_INT = 1,
    JL_VARARG_BOUND = 2,
    JL_VARARG_UNBOUND = 3,
}
pub use self::_bindgen_ty_96 as jl_vararg_kind_t;
extern "C" {
    pub fn jl_field_index(t: *mut jl_datatype_t, fld: *mut jl_sym_t,
                          err: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_get_nth_field(v: *mut jl_value_t, i: usize) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_get_nth_field_checked(v: *mut jl_value_t, i: usize)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_set_nth_field(v: *mut jl_value_t, i: usize,
                            rhs: *mut jl_value_t);
}
extern "C" {
    pub fn jl_field_isdefined(v: *mut jl_value_t, i: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_get_field(o: *mut jl_value_t,
                        fld: *const ::std::os::raw::c_char)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_value_ptr(a: *mut jl_value_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_new_array(atype: *mut jl_value_t, dims: *mut jl_value_t)
     -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_reshape_array(atype: *mut jl_value_t, data: *mut jl_array_t,
                            dims: *mut jl_value_t) -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_ptr_to_array_1d(atype: *mut jl_value_t,
                              data: *mut ::std::os::raw::c_void, nel: usize,
                              own_buffer: ::std::os::raw::c_int)
     -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_ptr_to_array(atype: *mut jl_value_t,
                           data: *mut ::std::os::raw::c_void,
                           dims: *mut jl_value_t,
                           own_buffer: ::std::os::raw::c_int)
     -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_alloc_array_1d(atype: *mut jl_value_t, nr: usize)
     -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_alloc_array_2d(atype: *mut jl_value_t, nr: usize, nc: usize)
     -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_alloc_array_3d(atype: *mut jl_value_t, nr: usize, nc: usize,
                             z: usize) -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_pchar_to_array(str: *const ::std::os::raw::c_char, len: usize)
     -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_pchar_to_string(str: *const ::std::os::raw::c_char, len: usize)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_cstr_to_string(str: *const ::std::os::raw::c_char)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_array_to_string(a: *mut jl_array_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_alloc_vec_any(n: usize) -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_arrayref(a: *mut jl_array_t, i: usize) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_arrayset(a: *mut jl_array_t, v: *mut jl_value_t, i: usize);
}
extern "C" {
    pub fn jl_arrayunset(a: *mut jl_array_t, i: usize);
}
extern "C" {
    pub fn jl_array_grow_end(a: *mut jl_array_t, inc: usize);
}
extern "C" {
    pub fn jl_array_del_end(a: *mut jl_array_t, dec: usize);
}
extern "C" {
    pub fn jl_array_grow_beg(a: *mut jl_array_t, inc: usize);
}
extern "C" {
    pub fn jl_array_del_beg(a: *mut jl_array_t, dec: usize);
}
extern "C" {
    pub fn jl_array_sizehint(a: *mut jl_array_t, sz: usize);
}
extern "C" {
    pub fn jl_array_ptr_1d_push(a: *mut jl_array_t, item: *mut jl_value_t);
}
extern "C" {
    pub fn jl_array_ptr_1d_push2(a: *mut jl_array_t, b: *mut jl_value_t,
                                 c: *mut jl_value_t);
}
extern "C" {
    pub fn jl_apply_array_type(type_: *mut jl_datatype_t, dim: usize)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_array_ptr(a: *mut jl_array_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jl_array_eltype(a: *mut jl_value_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jl_array_rank(a: *mut jl_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_array_size(a: *mut jl_value_t, d: ::std::os::raw::c_int)
     -> usize;
}
extern "C" {
    pub fn jl_string_ptr(s: *mut jl_value_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "jl_main_module"]
    pub static mut jl_main_module: *mut jl_module_t;
}
extern "C" {
    #[link_name = "jl_internal_main_module"]
    pub static mut jl_internal_main_module: *mut jl_module_t;
}
extern "C" {
    #[link_name = "jl_core_module"]
    pub static mut jl_core_module: *mut jl_module_t;
}
extern "C" {
    #[link_name = "jl_base_module"]
    pub static mut jl_base_module: *mut jl_module_t;
}
extern "C" {
    #[link_name = "jl_top_module"]
    pub static mut jl_top_module: *mut jl_module_t;
}
extern "C" {
    pub fn jl_new_module(name: *mut jl_sym_t) -> *mut jl_module_t;
}
extern "C" {
    pub fn jl_get_binding(m: *mut jl_module_t, var: *mut jl_sym_t)
     -> *mut jl_binding_t;
}
extern "C" {
    pub fn jl_get_binding_or_error(m: *mut jl_module_t, var: *mut jl_sym_t)
     -> *mut jl_binding_t;
}
extern "C" {
    pub fn jl_module_globalref(m: *mut jl_module_t, var: *mut jl_sym_t)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_get_binding_wr(m: *mut jl_module_t, var: *mut jl_sym_t)
     -> *mut jl_binding_t;
}
extern "C" {
    pub fn jl_get_binding_for_method_def(m: *mut jl_module_t,
                                         var: *mut jl_sym_t)
     -> *mut jl_binding_t;
}
extern "C" {
    pub fn jl_boundp(m: *mut jl_module_t, var: *mut jl_sym_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_defines_or_exports_p(m: *mut jl_module_t, var: *mut jl_sym_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_binding_resolved_p(m: *mut jl_module_t, var: *mut jl_sym_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_is_const(m: *mut jl_module_t, var: *mut jl_sym_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_get_global(m: *mut jl_module_t, var: *mut jl_sym_t)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_set_global(m: *mut jl_module_t, var: *mut jl_sym_t,
                         val: *mut jl_value_t);
}
extern "C" {
    pub fn jl_set_const(m: *mut jl_module_t, var: *mut jl_sym_t,
                        val: *mut jl_value_t);
}
extern "C" {
    pub fn jl_checked_assignment(b: *mut jl_binding_t, rhs: *mut jl_value_t);
}
extern "C" {
    pub fn jl_declare_constant(b: *mut jl_binding_t);
}
extern "C" {
    pub fn jl_module_using(to: *mut jl_module_t, from: *mut jl_module_t);
}
extern "C" {
    pub fn jl_module_use(to: *mut jl_module_t, from: *mut jl_module_t,
                         s: *mut jl_sym_t);
}
extern "C" {
    pub fn jl_module_import(to: *mut jl_module_t, from: *mut jl_module_t,
                            s: *mut jl_sym_t);
}
extern "C" {
    pub fn jl_module_importall(to: *mut jl_module_t, from: *mut jl_module_t);
}
extern "C" {
    pub fn jl_module_export(from: *mut jl_module_t, s: *mut jl_sym_t);
}
extern "C" {
    pub fn jl_is_imported(m: *mut jl_module_t, s: *mut jl_sym_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_new_main_module() -> *mut jl_module_t;
}
extern "C" {
    pub fn jl_add_standard_imports(m: *mut jl_module_t);
}
extern "C" {
    pub fn jl_is_submodule(child: *mut jl_module_t, parent: *mut jl_module_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_eqtable_put(h: *mut jl_array_t,
                          key: *mut ::std::os::raw::c_void,
                          val: *mut ::std::os::raw::c_void)
     -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_eqtable_get(h: *mut jl_array_t,
                          key: *mut ::std::os::raw::c_void,
                          deflt: *mut jl_value_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_errno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_set_errno(e: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jl_stat(path: *const ::std::os::raw::c_char,
                   statbuf: *mut ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn jl_cpu_cores() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_getpagesize() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jl_getallocationgranularity() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jl_is_debugbuild() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_get_UNAME() -> *mut jl_sym_t;
}
extern "C" {
    pub fn jl_get_ARCH() -> *mut jl_sym_t;
}
extern "C" {
    pub fn jl_environ(i: ::std::os::raw::c_int) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_error(str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn jl_errorf(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn jl_exceptionf(ty: *mut jl_datatype_t,
                         fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn jl_too_few_args(fname: *const ::std::os::raw::c_char,
                           min: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jl_too_many_args(fname: *const ::std::os::raw::c_char,
                            max: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jl_type_error(fname: *const ::std::os::raw::c_char,
                         expected: *mut jl_value_t, got: *mut jl_value_t);
}
extern "C" {
    pub fn jl_type_error_rt(fname: *const ::std::os::raw::c_char,
                            context: *const ::std::os::raw::c_char,
                            ty: *mut jl_value_t, got: *mut jl_value_t);
}
extern "C" {
    pub fn jl_undefined_var_error(var: *mut jl_sym_t);
}
extern "C" {
    pub fn jl_bounds_error(v: *mut jl_value_t, t: *mut jl_value_t);
}
extern "C" {
    pub fn jl_bounds_error_v(v: *mut jl_value_t, idxs: *mut *mut jl_value_t,
                             nidxs: usize);
}
extern "C" {
    pub fn jl_bounds_error_int(v: *mut jl_value_t, i: usize);
}
extern "C" {
    pub fn jl_bounds_error_tuple_int(v: *mut *mut jl_value_t, nv: usize,
                                     i: usize);
}
extern "C" {
    pub fn jl_bounds_error_unboxed_int(v: *mut ::std::os::raw::c_void,
                                       vt: *mut jl_value_t, i: usize);
}
extern "C" {
    pub fn jl_bounds_error_ints(v: *mut jl_value_t, idxs: *mut usize,
                                nidxs: usize);
}
extern "C" {
    pub fn jl_eof_error();
}
extern "C" {
    pub fn jl_exception_occurred() -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_exception_clear();
}
pub const JL_IMAGE_CWD: _bindgen_ty_97 = _bindgen_ty_97::JL_IMAGE_CWD;
pub const JL_IMAGE_JULIA_HOME: _bindgen_ty_97 =
    _bindgen_ty_97::JL_IMAGE_JULIA_HOME;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_97 { JL_IMAGE_CWD = 0, JL_IMAGE_JULIA_HOME = 1, }
pub use self::_bindgen_ty_97 as JL_IMAGE_SEARCH;
extern "C" {
    pub fn julia_init(rel: JL_IMAGE_SEARCH);
}
extern "C" {
    pub fn jl_init(julia_home_dir: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn jl_init_with_image(julia_home_dir: *const ::std::os::raw::c_char,
                              image_relative_path:
                                  *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn jl_is_initialized() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_atexit_hook(status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jl_exit(status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jl_deserialize_verify_header(s: *mut ios_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_preload_sysimg_so(fname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn jl_create_system_image() -> *mut ios_t;
}
extern "C" {
    pub fn jl_save_system_image(fname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn jl_restore_system_image(fname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn jl_restore_system_image_data(buf: *const ::std::os::raw::c_char,
                                        len: usize);
}
extern "C" {
    pub fn jl_save_incremental(fname: *const ::std::os::raw::c_char,
                               worklist: *mut jl_array_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_restore_incremental(fname: *const ::std::os::raw::c_char)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_restore_incremental_from_buf(buf: *const ::std::os::raw::c_char,
                                           sz: usize) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_parse_input_line(str: *const ::std::os::raw::c_char, len: usize,
                               filename: *const ::std::os::raw::c_char,
                               filename_len: usize) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_parse_string(str: *const ::std::os::raw::c_char, len: usize,
                           pos0: ::std::os::raw::c_int,
                           greedy: ::std::os::raw::c_int) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_parse_depwarn(warn: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_load_file_string(text: *const ::std::os::raw::c_char,
                               len: usize,
                               filename: *mut ::std::os::raw::c_char)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_expand(expr: *mut jl_value_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_eval_string(str: *const ::std::os::raw::c_char)
     -> *mut jl_value_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum JL_RTLD_CONSTANT {
    JL_RTLD_LOCAL = 1,
    JL_RTLD_GLOBAL = 2,
    JL_RTLD_LAZY = 4,
    JL_RTLD_NOW = 8,
    JL_RTLD_NODELETE = 16,
    JL_RTLD_NOLOAD = 32,
    JL_RTLD_DEEPBIND = 64,
    JL_RTLD_FIRST = 128,
}
pub type jl_uv_libhandle = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn jl_load_dynamic_library(fname: *const ::std::os::raw::c_char,
                                   flags: ::std::os::raw::c_uint)
     -> jl_uv_libhandle;
}
extern "C" {
    pub fn jl_load_dynamic_library_e(fname: *const ::std::os::raw::c_char,
                                     flags: ::std::os::raw::c_uint)
     -> jl_uv_libhandle;
}
extern "C" {
    pub fn jl_dlopen(filename: *const ::std::os::raw::c_char,
                     flags: ::std::os::raw::c_uint) -> jl_uv_libhandle;
}
extern "C" {
    pub fn jl_dlclose(handle: jl_uv_libhandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_dlsym_e(handle: jl_uv_libhandle,
                      symbol: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jl_dlsym(handle: jl_uv_libhandle,
                    symbol: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jl_lookup_soname(pfx: *const ::std::os::raw::c_char, n: usize)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jl_toplevel_eval(v: *mut jl_value_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_toplevel_eval_in(m: *mut jl_module_t, ex: *mut jl_value_t)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_load(fname: *const ::std::os::raw::c_char) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_interpret_toplevel_expr_in(m: *mut jl_module_t,
                                         e: *mut jl_value_t,
                                         lam: *mut jl_lambda_info_t)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_base_relative_to(m: *mut jl_module_t) -> *mut jl_module_t;
}
extern "C" {
    pub fn jl_trace_method(m: *mut jl_method_t);
}
extern "C" {
    pub fn jl_untrace_method(m: *mut jl_method_t);
}
extern "C" {
    pub fn jl_trace_linfo(linfo: *mut jl_lambda_info_t);
}
extern "C" {
    pub fn jl_untrace_linfo(linfo: *mut jl_lambda_info_t);
}
extern "C" {
    pub fn jl_register_linfo_tracer(callback:
                                        ::std::option::Option<unsafe extern "C" fn(tracee:
                                                                                       *mut jl_lambda_info_t)>);
}
extern "C" {
    pub fn jl_register_method_tracer(callback:
                                         ::std::option::Option<unsafe extern "C" fn(tracee:
                                                                                        *mut jl_lambda_info_t)>);
}
extern "C" {
    pub fn jl_register_newmeth_tracer(callback:
                                          ::std::option::Option<unsafe extern "C" fn(tracee:
                                                                                         *mut jl_method_t)>);
}
extern "C" {
    pub fn jl_is_rest_arg(ex: *mut jl_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_copy_ast(expr: *mut jl_value_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_compress_ast(li: *mut jl_lambda_info_t, ast: *mut jl_array_t)
     -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_uncompress_ast(li: *mut jl_lambda_info_t, data: *mut jl_array_t)
     -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_is_operator(sym: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_operator_precedence(sym: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_apply_generic(args: *mut *mut jl_value_t, nargs: u32)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_invoke(meth: *mut jl_lambda_info_t, args: *mut *mut jl_value_t,
                     nargs: u32) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_call(f: *mut jl_function_t, args: *mut *mut jl_value_t,
                   nargs: i32) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_call0(f: *mut jl_function_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_call1(f: *mut jl_function_t, a: *mut jl_value_t)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_call2(f: *mut jl_function_t, a: *mut jl_value_t,
                    b: *mut jl_value_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_call3(f: *mut jl_function_t, a: *mut jl_value_t,
                    b: *mut jl_value_t, c: *mut jl_value_t)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_yield();
}
extern "C" {
    pub fn jl_install_sigint_handler();
}
extern "C" {
    pub fn jl_sigatomic_begin();
}
extern "C" {
    pub fn jl_sigatomic_end();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jl_timing_block_t([u8; 0]);
pub type jl_timing_block_t = _jl_timing_block_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _jl_handler_t {
    pub eh_ctx: sigjmp_buf,
    pub gcstack: *mut jl_gcframe_t,
    pub prev: *mut _jl_handler_t,
    pub gc_state: i8,
    pub defer_signal: sig_atomic_t,
    pub finalizers_inhibited: ::std::os::raw::c_int,
    pub timing_stack: *mut jl_timing_block_t,
}
#[test]
fn bindgen_test_layout__jl_handler_t() {
    assert_eq!(::std::mem::size_of::<_jl_handler_t>() , 240usize);
    assert_eq!(::std::mem::align_of::<_jl_handler_t>() , 8usize);
}
impl Clone for _jl_handler_t {
    fn clone(&self) -> Self { *self }
}
pub type jl_handler_t = _jl_handler_t;
pub type jl_task_t = _jl_tls_states_t__jl_task_t;
extern "C" {
    pub fn jl_new_task(start: *mut jl_function_t, ssize: usize)
     -> *mut jl_task_t;
}
extern "C" {
    pub fn jl_switchto(t: *mut jl_task_t, arg: *mut jl_value_t)
     -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_throw(e: *mut jl_value_t);
}
extern "C" {
    pub fn jl_rethrow();
}
extern "C" {
    pub fn jl_rethrow_other(e: *mut jl_value_t);
}
extern "C" {
    pub fn jl_enter_handler(eh: *mut jl_handler_t);
}
extern "C" {
    pub fn jl_pop_handler(n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jl_run_event_loop(loop_: *mut uv_loop_t);
}
extern "C" {
    pub fn jl_run_once(loop_: *mut uv_loop_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_process_events(loop_: *mut uv_loop_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_global_event_loop() -> *mut uv_loop_t;
}
extern "C" {
    pub fn jl_close_uv(handle: *mut uv_handle_t);
}
extern "C" {
    pub fn jl_tcp_bind(handle: *mut uv_tcp_t, port: u16, host: u32,
                       flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_sizeof_ios_t() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_takebuf_array(s: *mut ios_t) -> *mut jl_array_t;
}
extern "C" {
    pub fn jl_takebuf_string(s: *mut ios_t) -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_takebuf_raw(s: *mut ios_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jl_readuntil(s: *mut ios_t, delim: u8) -> *mut jl_value_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_98 {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub file: uv_file,
}
#[test]
fn bindgen_test_layout__bindgen_ty_98() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_98>() , 24usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_98>() , 8usize);
}
impl Clone for _bindgen_ty_98 {
    fn clone(&self) -> Self { *self }
}
pub type jl_uv_file_t = _bindgen_ty_98;
extern "C" {
    pub fn jl_printf(s: *mut uv_stream_t,
                     format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_vprintf(s: *mut uv_stream_t,
                      format: *const ::std::os::raw::c_char,
                      args: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_safe_printf(str: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "jl_uv_stdin"]
    pub static mut jl_uv_stdin: *mut uv_stream_t;
}
extern "C" {
    #[link_name = "jl_uv_stdout"]
    pub static mut jl_uv_stdout: *mut uv_stream_t;
}
extern "C" {
    #[link_name = "jl_uv_stderr"]
    pub static mut jl_uv_stderr: *mut uv_stream_t;
}
extern "C" {
    pub fn jl_stdout_stream() -> *mut uv_stream_t;
}
extern "C" {
    pub fn jl_stdin_stream() -> *mut uv_stream_t;
}
extern "C" {
    pub fn jl_stderr_stream() -> *mut uv_stream_t;
}
extern "C" {
    pub fn jl_show(stream: *mut jl_value_t, v: *mut jl_value_t);
}
extern "C" {
    pub fn jl_flush_cstdio();
}
extern "C" {
    pub fn jl_stdout_obj() -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_stderr_obj() -> *mut jl_value_t;
}
extern "C" {
    pub fn jl_static_show(out: *mut uv_stream_t, v: *mut jl_value_t) -> usize;
}
extern "C" {
    pub fn jl_static_show_func_sig(s: *mut uv_stream_t,
                                   type_: *mut jl_value_t) -> usize;
}
extern "C" {
    pub fn jlbacktrace();
}
extern "C" {
    pub fn jl_(jl_value: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_99 {
    pub quiet: i8,
    pub julia_home: *const ::std::os::raw::c_char,
    pub julia_bin: *const ::std::os::raw::c_char,
    pub eval: *const ::std::os::raw::c_char,
    pub print: *const ::std::os::raw::c_char,
    pub postboot: *const ::std::os::raw::c_char,
    pub load: *const ::std::os::raw::c_char,
    pub image_file: *const ::std::os::raw::c_char,
    pub cpu_target: *const ::std::os::raw::c_char,
    pub nprocs: i32,
    pub machinefile: *const ::std::os::raw::c_char,
    pub isinteractive: i8,
    pub color: i8,
    pub historyfile: i8,
    pub startupfile: i8,
    pub compile_enabled: i8,
    pub code_coverage: i8,
    pub malloc_log: i8,
    pub opt_level: i8,
    pub check_bounds: i8,
    pub depwarn: i8,
    pub can_inline: i8,
    pub fast_math: i8,
    pub worker: *const ::std::os::raw::c_char,
    pub handle_signals: i8,
    pub use_precompiled: i8,
    pub use_compilecache: i8,
    pub bindto: *const ::std::os::raw::c_char,
    pub outputbc: *const ::std::os::raw::c_char,
    pub outputo: *const ::std::os::raw::c_char,
    pub outputji: *const ::std::os::raw::c_char,
    pub incremental: i8,
    pub image_file_specified: i8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_99() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_99>() , 160usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_99>() , 8usize);
}
impl Clone for _bindgen_ty_99 {
    fn clone(&self) -> Self { *self }
}
pub type jl_options_t = _bindgen_ty_99;
extern "C" {
    #[link_name = "jl_options"]
    pub static mut jl_options: jl_options_t;
}
extern "C" {
    pub fn jl_parse_opts(argcp: *mut ::std::os::raw::c_int,
                         argvp: *mut *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn jl_set_ARGS(argc: ::std::os::raw::c_int,
                       argv: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn jl_generating_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_ver_major() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_ver_minor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_ver_patch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_ver_is_release() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jl_ver_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jl_git_branch() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jl_git_commit() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_100 {
    pub isnull: u8,
    pub value: f64,
}
#[test]
fn bindgen_test_layout__bindgen_ty_100() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_100>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_100>() , 8usize);
}
impl Clone for _bindgen_ty_100 {
    fn clone(&self) -> Self { *self }
}
pub type jl_nullable_float64_t = _bindgen_ty_100;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_101 {
    pub isnull: u8,
    pub value: f32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_101() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_101>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_101>() , 4usize);
}
impl Clone for _bindgen_ty_101 {
    fn clone(&self) -> Self { *self }
}
pub type jl_nullable_float32_t = _bindgen_ty_101;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
